{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?9b05","webpack:///./src/App.vue?760d","webpack:///./src/components/AddFlow.vue?7d31","webpack:///./src/components/Menu.vue?6754","webpack:///src/components/Menu.vue","webpack:///./src/components/Menu.vue?2218","webpack:///./src/components/Menu.vue","webpack:///./src/js/addflow.js","webpack:///./src/js/mockData.js","webpack:///./src/js/jsonflow.js","webpack:///./src/components/DrawerBox.vue?5504","webpack:///src/components/DrawerBox.vue","webpack:///./src/components/DrawerBox.vue?606c","webpack:///./src/components/DrawerBox.vue","webpack:///src/components/AddFlow.vue","webpack:///./src/components/AddFlow.vue?e928","webpack:///./src/components/AddFlow.vue","webpack:///src/App.vue","webpack:///./src/App.vue?a7d1","webpack:///./src/App.vue","webpack:///./src/js/shortcut.js","webpack:///./src/main.js","webpack:///./src/components/AddFlow.vue?702f","webpack:///./src/components/Menu.vue?b0a5"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","staticRenderFns","ref","on","download","upload","command","staticClass","attrs","elements","pull","put","moveNode","addNewNode","_l","item","id","_v","_s","text","list","flow","undo","redo","refresh","deleteNode","zoomIn","zoomOut","fileList","methods","$emit","console","log","reader","onload","readAsText","file","raw","component","Lassalle","Flow","canvas","that","_taskManager","_items","_quadtree","_selectedItems","hittedItem","_arrow","StretchTypeEnum","ResizeHandleEnum","itemsetEnum","moveStartDist","minNodeSize","millisec","xScrollUnit","yScrollUnit","ptStart","ptPrior","ptOrg","ptPinOrigin","invRect","selRect","tmpRect","graphRect","_isMouseDown","startMove","_handle","linkDistance","outOrg","pinAreas","pinAreaCentral","pinnedItem","origin","pinOrigin","pinDestination","stretchType","stretchedLink","initialWidth","initialHeight","_cursor","offsetDatabase","selectAllFlag","xoffset","yoffset","_isSelChanged","okToStartMove","okToStartNode","okToStartLink","okToStartResize","okToStartStretch","okToStartSelect","okToStartZoom","okToStartPan","_repaint","_isCreatingNode","_isCreatingLink","_isStretchingLink","_isResizingNode","_isMovingNode","_isSelecting","_isZooming","_isPanning","xScrollDir","yScrollDir","ptScroll","timerStarted","timer","scrollStartPoint","orthoRouter","MyRect","Helpers","Node","Link","Task","NodeLayoutTask","AddNodeTask","RemoveNodeTask","AddLinkTask","RemoveLinkTask","StretchLinkTask","SetLinkOrgTask","SetLinkDstTask","SetLinkPinOrgTask","SetLinkPinDstTask","ZOrderTask","LineStyleTask","_isQuadtree","OrthoRouter","orgOrientation","dstOrientation","n1","n2","s1","s2","or","normalizePoints","apt","_points","isChanged","A","B","C","pt1","pt2","pt3","pt4","y","x","rectIntersectsLine","rc","startPoint","endPoint","inflate","intersectsWith","getRectByTwoPoints","isPtVisible","fromPoint","targetPoint","rects","getOffsetPoint","pt","rect","orientation","offsetPoint","left","top","width","height","getOrientation2","p1","p2","getOrientation","itm","d1","d2","d3","d4","min","getNodeRect","Math","abs","getOppositeCorners","getNeighborCorners","getNearestNeighborOrg","rcOrg","rcDst","flag","containsPoint","getPointsDistance","getNearestVisibleNeighborDst","flag1","flag2","undefined","isRectVisible","getRectWithMargin","margin","checkPathEnd","marginPath","optimizeLinePoints","k","orientFrom","orientTo","centerX","centerY","apt2","cut","getConnectionLine","org","dst","pinOrg","pinDst","orthoMargin","currentPoint","neighbour","n1Visible","n2Visible","virtualPinsOrg","virtualPinsDst","orgPins","dstPins","centerPoint","ptDst","pins","getPinPosition","PolylineHelper","plh","priorSegment","tangent","Segment","getSegmentLength","getLength","offset","point","seg","sqrt","pow","segment","getPointAtFractionLength","progress","index1","index2","testIndex","seg1","seg2","offset1","offset2","dx","dy","floor","getTangent","w","h","doclone","equals","unionRect","boundingRect","right","bottom","max","containsRect","drawBezier","ctx","pt0","beginPath","moveTo","bezierCurveTo","drawPolyline","lineTo","drawPolylineRounded","getStartingPointOfRoundedCorner","getEndingPointOfRoundedCorner","drawEllipse","kappa","ox","oy","xe","ye","xm","ym","closePath","drawRectangle","drawPolygon","points","multiFillText","_text","_lineHeight","fitWidth","draw","sections","str","wordWidth","words","printNextLine","lineSpacing","index","currentLine","maxHeight","maxWidth","replace","split","fillText","measureText","join","getFirstPointOfLastSegmentOfBezier","drawArrow","_shape","fill","stroke","translateShape","xdelta","ydelta","rv","rotateShape","ang","rotatePoint","cos","sin","getSplinePoints","curvePoints","splineSegment","T","N","SX1","SY1","SX2","SY2","AX","AY","BX","BY","CX","CY","DX","DY","adjustGrid","xgrid","ygrid","iX","iY","round","middlePoint","getEllipseNearestPt","center","angle","theta","alpha","a","b","ptInter","PI","atan2","getPolyNearestPt","ctr","a1","a2","ptI","dist","ptNear","maxdist","nbPt","getRectanglePoints","getDistanceBetweenPointAndPolyline","linkWidth","distance","inc","getSegDist","M","dx1","dy1","dx2","dy2","dBAsqr","dMAsqr","dMBsqr","dBA","P","dPCsqr","sizeRound","flattenBezier","getBoundingRect","_polygon","minX","maxX","minY","maxY","Quadtree","quadrant","_topLeft","_topRight","_bottomLeft","_bottomRight","_getIntersectingItems","_array","_bounds","topLeft","topRight","bottomLeft","bottomRight","bounds","_insert","_child","_remove","idx","_clear","_root","_getItems","_isSelected","_links","kindOfItem","strokeStyle","fillStyle","gradientFillStyle","textFillStyle","lineWidth","shapeFamily","polygon","drawShape","fillShape","isSelectable","isXSizeable","isYSizeable","isXMoveable","isYMoveable","isOutLinkable","isInLinkable","isContextHandle","isShadowed","image","textMargin","imageMargin","textPosition","imagePosition","font","textLineHeight","getIsSelected","setIsSelected","sel","selectItem","getLinks","getLeft","setLeft","setNodeRect","getTop","setTop","getWidth","setWidth","getHeight","setHeight","invalidateNode","updateDrawing","clone","_node","copyNodeProperties","isStretchable","isOrgPointAdjustable","isDstPointAdjustable","roundedCornerSize","isOrientedText","isOpaque","arrowDst","arrowOrg","lineStyle","firstSegmentHorizontal","getOrg","setOrg","setLinkOrg","getDst","setDst","setLinkDst","getPinOrg","setPinOrg","setLinkPinOrg","getPinDst","setPinDst","setLinkPinDst","invalidateLink","_link","copyLinkProperties","getLineStyle","setLineStyle","setLinkLineStyle","getIsOrgPointAdjustable","setIsOrgPointAdjustable","adjustable","setLinkIsOrgPointAdjustable","getIsDstPointAdjustable","setIsDstPointAdjustable","setLinkIsDstPointAdjustable","addPoint","addLinkPoint","removePoint","removeLinkPoint","clearPoints","clearLinkPoints","countPoints","getPoint","getLinkPoint","setPoint","setLinkPoint","_currentItem","group","groupCode","code","oldrc","div","hScrollOffset","vScrollOffset","tsk","parentNode","scrollLeft","scrollTop","hScrollOffset2","vScrollOffset2","adjustNodeLinks","removeItemByIndex","updateDiagramSize","updateDiagramSizeWithRect","getLinkRect","getNodeLinks","oldPoints","oldIsOrgPointAdjustable","oldIsDstPointAdjustable","handleSize","concat","invalidate","oldOrg","oldDst","oldPinOrg","oldPinDst","olditems","curitems","oldLineStyle","TaskManager","tasks","currentGroup","inActionGroupExternal","inActionGroupInternal","undoRedoing","tm","_removeLastTask","_undo","task","task2","canUndoRedo","_canUndo","_beginUpdate","_endUpdate","_redo","_canRedo","_beginAction","substr","_beginActionExternal","_endAction","_endActionExternal","_addToLastAction","_getCode","undoLimit","skipUndo","undoCode","redoCode","undoItem","redoItem","_canredo","canUndo","canRedo","beginAction","endAction","clear","addToLastAction","submitTask","_submitTask","removeLastTask","taskCount","undoAllowed","_beginActionInternal","_endActionInternal","isCurrentActionGroup","g","spice","initialize","addEventListener","readyHandler","mouseDownHandler","mouseMoveHandler","mouseUpHandler","touchStartHandler","touchMoveHandler","touchEndHandler","_buildQuadtree","fireContextEvent","event","document","createEvent","initEvent","dispatchEvent","fireSelectionChangeEvent","_init","isNode","_isNode","_isLink","_addNode","getItems","nodeModel","_removeNode","_removeLink","_addLink","linkModel","initLinkPoints","nodes","_deleteSel","_selectAll","_unselectAll","isLink","_sendToBack","_bringToFront","getNodeContextHandle","contextHandleSize","getLinkContextHandle","polylineHelper","getNodeHandles","_handles","size","node","getNodeRectWithHandles","isEllipse","isRectangle","isPolygon","getNodePolygonPoints","polypoints","cx","cy","x2","y2","adjustLink","isOriginOf","_node1","_node2","isDestinationOf","getLinkRectWithHandles","getLinkHandles","nbHandles","firstEnabled","lastEnabled","otherEnabled","isLinkNewPointsAllowed","canChangeOrg","canChangeDst","canStretchLink","isLinkReflexive","fixDatabaseLinkPoints","fixOrthogonalLinkPoints","calcLinkStartPoint","calcLinkEndPoint","oldValue","_index","changePoint","rcText","getContext","parseInt","linkSelectionAreaWidth","initLinkPointsOrthogonal","initLinkPointsDatabase","initLinkPointsBezier","initLinkPointsPolyline","rc1","rc2","isOriginPin","getLinkOrgPinPoint","isDestinationPin","getLinkDstPinPoint","updateLinkPoints","insertLinkPoint","pos","saveLinkPoints","points2","model","optimized","canSendSelectionChangedEvent","paintInvalidatedRect","resetInvalidatedRect","zoom","save","scale","setClipRegion","drawBackground","ownerDraw","drawItems","drawSelection","drawPins","drawOutline","restore","clip","fillRect","gridDraw","drawGrid","gridSizeX","gridSizeY","gridStrokeStyle","xStart","yStart","xEnd","yEnd","drawPinArea","drawCentralPinArea","itemList","drawNode","drawLink","drawItemSelection","drawResizeHandle","canShowContextHandle","drawNodeContextHandle","drawStretchHandle","drawLinkContextHandle","drawBezierVisual","drawContextHandle","gradObj","contextHandleStrokeStyle","createLinearGradient","addColorStop","contextHandleGradientColor1","contextHandleGradientColor2","handleGradientColor1","handleGradientColor2","handleStrokeStyle","pinGradientColor1","pinGradientColor2","pinStrokeStyle","centralPinGradientColor1","centralPinGradientColor2","centralPinStrokeColor","drawNodeOutline","drawLinkOutline","drawSelectOutline","selRectStrokeStyle","selRectFillStyle","selRectLineWidth","strokeRect","bezierSelectionLinesStrokeStyle","setShadowProperties","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","drawNodeShape","drawNodeContent","rcImg","getNodeImageRectangle","drawImage","textBaseline","textAlign","rcClip","rcImage","ptTan","drawDstArrow","drawOrgArrow","translate","rotate","hitNodeTest","t1","t2","t3","ptCtr","hit","isPointInPath","hitNodeTest2","hitLinkTest","pinIndex","checkArea","hitArea","_getHitItem","items","checkPins","canMoveNode","checkNodeArea","checkLinkArea","canDrawLink","getPinAreas","getCentralPinArea","getHittedPinIndex","pinSize","_resizeHandle","canSizeNode","down","up","leftDown","rightUp","leftUp","rightDown","first","last","add","del","none","change","itemset","candidate","links","selectableItems","selectableNodes","selectableLinks","updateScrollInfo","isFixedSize","getGraphRect","_zoomRectangle","style","isNaN","isNewDstAllowed","newDst","canReflexLink","canMultiLink","isNewOrgAllowed","newOrg","setMouseCapture","setCapture","releaseMouseCapture","releaseCapture","removeEventListener","getPosition","e","getBoundingClientRect","clientX","clientY","xCustomOffset","yCustomOffset","preventDefault","clickEvent","clickedItem","ClickZoneEnum","mult","mayMoveNode","mayCreateNode","maySelect","mayZoom","mayPan","out","outShift","selNode","nodeShift","selNodeShift","link","selLink","linkShift","selLinkShift","canMultiSelect","shiftKey","ctrlKey","gridSnap","mouseSelection","canDrawNode","parent","cursor","doAutoScrolling","autoNode","doNode","autoLink","doLink","autoMove","doMove","autoSize","doResize","autoStretch","doStretch","autoSelect","doSelect","autoZoom","doZoom","doPan","endNode","endLink","endMove","endResize","endStretch","endSelect","endZoom","endPan","autoJob","xScroll","yScroll","clearInterval","canDragScroll","setInterval","autoScroll","dxScroll","dyScroll","beginNode","beginLink","destination","beginMove","getSelRect","xMove","yMove","resetFlagOfLinks","xMove2","yMove2","beginResize","deltaX","deltaY","manageLinksOfResizingNode","X","Y","updateFirstAndLastPointsOfLinks","beginStretch","stretchDatabase","stretchOrthogonal","stretchPoly","removePointDistance","lastSegmentVertical","beginSelect","canSelectOnMouseMove","doSelection","rcSelection","selectItemsEntirelyInRect","selectItemsPartiallyInRect","beginZoom","beginPan","canScroll","taskManager","useQuadtree","isQuadtree","getSelectedItems","getHitItem","addNode","addLink","removeNode","removeLink","deleteSel","selectAll","unselectAll","beginUpdate","endUpdate","invalidateRect","isMovingNode","isCreatingNode","isCreatingLink","isStretchingLink","isResizingNode","isSelecting","isZooming","isPanning","setSelChangedFlag","isSelChanged","sendToBack","bringToFront","zoomRectangle","getXExtent","getYExtent","img","toJSON","jsonItems","JsonNode","srcImage","src","propertyName","drawShapeKey","fillShapeKey","JsonLink","idOrg","idDst","JSON","stringify","fromJSON","jsonData","jnode","jlink","oldItemCount","idxOrder","idxOrderNodeMax","parse","Image","tmpIdx","handleClose","dialog","$event","selectedNode","nativeOn","type","indexOf","_k","keyCode","arguments","callback","$$v","$set","expression","props","showInfo","setTimeout","temp","getSelectedNode","components","draggable","Menu","DrawerBox","config","updateNodes","$refs","drawer","createElement","Blob","json","href","URL","createObjectURL","click","created","$shortcut","mounted","AddFlow","watch","bindKeyHandler","fn","shortcut","seed","func","keymaster","Vue","productionTip","el","render","App"],"mappings":"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","file":"js/app.41333c25.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('AddFlow')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('Menu',{ref:\"menu\",on:{\"download\":_vm.download,\"upload\":_vm.upload,\"command\":_vm.command}}),_c('el-row',{staticClass:\"margin-10\",attrs:{\"gutter\":10,\"justify\":\"center\",\"type\":\"flex\"}},[_c('el-col',{attrs:{\"span\":4}},[_c('draggable',{attrs:{\"id\":\"components\",\"tag\":\"div\",\"list\":_vm.elements,\"group\":{ name: 'addflow', pull: 'clone', put: false },\"move\":_vm.moveNode,\"drag-class\":\"ghost\"},on:{\"end\":_vm.addNewNode}},_vm._l((_vm.elements),function(item){return _c('div',{key:item.id,staticClass:\"component-item no-user-select\"},[_vm._v(\" \"+_vm._s(item.text)+\" \")])}),0)],1),_c('el-col',{attrs:{\"span\":20}},[_c('draggable',{attrs:{\"id\":\"canvas-wrapper\",\"tag\":\"div\",\"list\":_vm.list,\"group\":\"addflow\",\"draggable\":\".drag\"}},[_c('canvas',{ref:\"canvas\",attrs:{\"height\":\"800\",\"width\":\"800\"}})])],1)],1),_c('drawer-box',{ref:\"drawer\",attrs:{\"flow\":_vm.flow}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"no-user-select\"},[_c('el-row',{staticClass:\"align-center\",attrs:{\"gutter\":0.5,\"type\":\"flex\",\"align\":\"middle\"}},[_c('el-col',{attrs:{\"span\":0.5}},[_c('el-button',{attrs:{\"icon\":\"el-icon-refresh-left\",\"size\":\"mini\"},on:{\"click\":_vm.undo}})],1),_c('el-col',{attrs:{\"span\":0.5}},[_c('el-button',{attrs:{\"icon\":\"el-icon-refresh-right\",\"size\":\"mini\"},on:{\"click\":_vm.redo}})],1),_c('el-col',{attrs:{\"span\":0.5}},[_c('el-button',{attrs:{\"icon\":\"el-icon-refresh\",\"size\":\"mini\"},on:{\"click\":_vm.refresh}})],1),_c('el-col',{attrs:{\"span\":0.5}},[_c('el-button',{attrs:{\"icon\":\"el-icon-delete\",\"size\":\"mini\"},on:{\"click\":_vm.deleteNode}})],1),_c('el-col',{attrs:{\"span\":0.5}},[_c('el-button',{attrs:{\"icon\":\"el-icon-zoom-in\",\"size\":\"mini\"},on:{\"click\":_vm.zoomIn}})],1),_c('el-col',{attrs:{\"span\":0.5}},[_c('el-button',{attrs:{\"icon\":\"el-icon-zoom-out\",\"size\":\"mini\"},on:{\"click\":_vm.zoomOut}})],1),_c('el-col',{attrs:{\"span\":1.5}},[_c('el-upload',{staticClass:\"upload-demo\",attrs:{\"accept\":\".json\",\"action\":\"\",\"limit\":1,\"file-list\":_vm.fileList,\"on-change\":_vm.upload,\"auto-upload\":false,\"show-file-list\":false}},[_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"primary\"}},[_vm._v(\"点击上传\")])],1)],1),_c('el-col',{attrs:{\"span\":1.5}},[_c('el-button',{attrs:{\"size\":\"small\",\"type\":\"success\"},on:{\"click\":_vm.download}},[_vm._v(\"点击下载\")])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"no-user-select\">\r\n    <el-row :gutter=\"0.5\" type=\"flex\" align=\"middle\" class=\"align-center\">\r\n      <el-col :span=\"0.5\">\r\n        <el-button\r\n          icon=\"el-icon-refresh-left\"\r\n          size=\"mini\"\r\n          @click=\"undo\"\r\n        ></el-button>\r\n      </el-col>\r\n      <el-col :span=\"0.5\">\r\n        <el-button\r\n          icon=\"el-icon-refresh-right\"\r\n          size=\"mini\"\r\n          @click=\"redo\"\r\n        ></el-button>\r\n      </el-col>\r\n      <el-col :span=\"0.5\">\r\n        <el-button\r\n          icon=\"el-icon-refresh\"\r\n          size=\"mini\"\r\n          @click=\"refresh\"\r\n        ></el-button>\r\n      </el-col>\r\n      <el-col :span=\"0.5\">\r\n        <el-button\r\n          icon=\"el-icon-delete\"\r\n          size=\"mini\"\r\n          @click=\"deleteNode\"\r\n        ></el-button>\r\n      </el-col>\r\n      <el-col :span=\"0.5\">\r\n        <el-button\r\n          icon=\"el-icon-zoom-in\"\r\n          size=\"mini\"\r\n          @click=\"zoomIn\"\r\n        ></el-button>\r\n      </el-col>\r\n      <el-col :span=\"0.5\">\r\n        <el-button\r\n          icon=\"el-icon-zoom-out\"\r\n          size=\"mini\"\r\n          @click=\"zoomOut\"\r\n        ></el-button>\r\n      </el-col>\r\n      <el-col :span=\"1.5\">\r\n        <el-upload\r\n          class=\"upload-demo\"\r\n          accept=\".json\"\r\n          action=\"\"\r\n          :limit=\"1\"\r\n          :file-list=\"fileList\"\r\n          :on-change=\"upload\"\r\n          :auto-upload=\"false\"\r\n          :show-file-list=\"false\"\r\n        >\r\n          <el-button size=\"small\" type=\"primary\">点击上传</el-button>\r\n        </el-upload>\r\n      </el-col>\r\n      <el-col :span=\"1.5\">\r\n        <el-button size=\"small\" type=\"success\" @click=\"download\"\r\n          >点击下载</el-button\r\n        >\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Menu\",\r\n  data() {\r\n    return {\r\n      fileList: [],\r\n    };\r\n  },\r\n  methods: {\r\n    download() {\r\n      this.$emit(\"download\");\r\n    },\r\n    upload(file, _) {\r\n      console.log(\"upload\");\r\n      this.fileList = []\r\n      let reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          let json = e.target.result;\r\n          this.$emit(\"upload\", json);\r\n        } catch (err) {\r\n          console.log(`load JSON document from file error: ${err.message}`);\r\n          this.fileList = [];\r\n          alert(\"填充失败，请重新选择文件或手动输入。\");\r\n        }\r\n      };\r\n      reader.readAsText(file.raw);\r\n    },\r\n    undo(){\r\n      this.$emit(\"command\",\"undo\");\r\n    },\r\n    redo(){\r\n      this.$emit(\"command\",\"redo\");\r\n    },\r\n    refresh(){\r\n      this.$emit(\"command\",\"refresh\");\r\n    },\r\n    deleteNode(){\r\n      this.$emit(\"command\", \"delete\");\r\n    },\r\n    zoomIn(){\r\n      this.$emit(\"command\", 'zoom-in');\r\n    },\r\n    zoomOut(){\r\n      this.$emit(\"command\", 'zoom-out');\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#title {\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Menu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Menu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Menu.vue?vue&type=template&id=80dab468&scoped=true&\"\nimport script from \"./Menu.vue?vue&type=script&lang=js&\"\nexport * from \"./Menu.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Menu.vue?vue&type=style&index=0&id=80dab468&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"80dab468\",\n  null\n  \n)\n\nexport default component.exports"," /*<JasobNoObfs> AddFlow for HTML5\r\n    v1.2.1.0 - September 3, 2015\r\n    Copyright (c) 2012-2015 Lassalle Technologies. All rights reserved.\r\n    http://www.lassalle.com\r\n    Author: Patrick Lassalle mailto:plassalle@lassalle.com \r\n    If you do not own a commercial license, this file shall be governed by the license \r\n    agreement that can be found at: http://www.lassalle.com/html5/license_evaluation.pdf\r\n    If you own a commercial license, this file shall be governed by the license \r\n     agreement that can be found at: http://www.lassalle.com/html5/license_commercial.pdf\r\n     */\r\n\r\n //</JasobNoObfs>\r\n\r\n /** @author <a href='mailto:plassalle@lassalle.com'>Patrick Lassalle</a> \r\n     @version v1.2.1.0 \r\n     @namespace \r\n     @description Lassalle namespace, contains all classes and methods. \r\n */\r\n export var Lassalle = {\r\n     /** @description Creates a new Flow component.\r\n     @class Represents a Flow component. \r\n     @param canvas The canvas where this diagram will paint to. \r\n     */\r\n     Flow: function (canvas) {\r\n         // We will define successively:\r\n         // - the internal variables used in this class\r\n         // - MyRect class: a rectangle class\r\n         // - Helpers class: a namespace containing helper functions\r\n         // - OrthoRouter class: class for creating orthogonal links\r\n         // - PolylineHelper class: a class for finding a point on a polyline\r\n         // - Quadtree class: a class improving speed performance\r\n         // - Node class\r\n         // - Link class\r\n         // - Task class and all class deriving from the Task class\r\n         // - TaskManager class: the object managing the list of tasks and undo/redo.\r\n         // - AddFlow properties\r\n         // - AddFlow methods\r\n         // - AddFlow helpers (including event handlers)\r\n\r\n         var that, _taskManager, _items, _quadtree, _selectedItems, hittedItem, _arrow,\r\n             StretchTypeEnum, ResizeHandleEnum, itemsetEnum, moveStartDist,\r\n             minNodeSize, millisec, xScrollUnit, yScrollUnit, ptStart,\r\n             ptPrior, ptOrg, ptPinOrigin, ptPinDestination, invRect, selRect,\r\n             tmpRect, graphRect, _isMouseDown, startMove, _handle, linkDistance,\r\n             outOrg, pinAreas, pinAreaCentral, pinnedItem, origin, pinOrigin,\r\n             pinDestination, sizedir, stretchType, stretchedLink, _resizeHandle,\r\n             initialWidth, initialHeight, _cursor, offsetDatabase, selectAllFlag,\r\n             xoffset, yoffset, _isSelChanged, okToStartMove, okToStartNode, okToStartLink,\r\n             okToStartResize, okToStartStretch, okToStartSelect, okToStartZoom,\r\n             okToStartPan, _repaint, _isCreatingNode, _isCreatingLink, _isStretchingLink,\r\n             _isResizingNode, _isMovingNode, _isSelecting, _isZooming, _isPanning,\r\n             xScrollDir, yScrollDir, ptScroll, timerStarted, timer, scrollStartPoint,\r\n             orthoRouter, MyRect, Helpers, Node, Link, Task, NodeLayoutTask,\r\n             AddNodeTask, RemoveNodeTask, AddLinkTask, RemoveLinkTask,\r\n             StretchLinkTask, SetLinkOrgTask, SetLinkDstTask, SetLinkPinOrgTask, SetLinkPinDstTask, ZOrderTask, LineStyleTask, _isQuadtree;\r\n\r\n         //----------------------------------------------------------------\r\n         // MyRect class (used internally)\r\n         //----------------------------------------------------------------\r\n\r\n         MyRect = function (x, y, w, h) {\r\n             this.left = x;\r\n             this.top = y;\r\n             this.width = w;\r\n             this.height = h;\r\n         };\r\n\r\n         MyRect.prototype.doclone = function () {\r\n             return new MyRect(this.left, this.top, this.width, this.height);\r\n         };\r\n\r\n         MyRect.prototype.equals = function (rect) {\r\n             return this.left === rect.left &&\r\n                 this.top === rect.top &&\r\n                 this.width === rect.width &&\r\n                 this.height === rect.height;\r\n         };\r\n\r\n         MyRect.prototype.intersectsWith = function (rect) {\r\n             return (this.left < rect.left + rect.width &&\r\n                 this.left + this.width > rect.left &&\r\n                 this.top < rect.top + rect.height &&\r\n                 this.top + this.height > rect.top);\r\n         };\r\n\r\n         MyRect.prototype.inflate = function (dx, dy) {\r\n             return new MyRect(this.left - dx,\r\n                 this.top - dy,\r\n                 this.width + 2 * dx,\r\n                 this.height + 2 * dy);\r\n         };\r\n\r\n         MyRect.prototype.offset = function (dx, dy) {\r\n             return new MyRect(this.left + dx, this.top + dy, this.width, this.height);\r\n         };\r\n\r\n         MyRect.prototype.unionRect = function (rect) {\r\n             var rc = this.doclone();\r\n             rc.boundingRect(rect);\r\n             return rc;\r\n         };\r\n\r\n         MyRect.prototype.boundingRect = function (rect) {\r\n             var right, bottom;\r\n\r\n             // We compute right and bottom before we change left and top below.\r\n             right = Math.max(this.left + this.width, rect.left + rect.width);\r\n             bottom = Math.max(this.top + this.height, rect.top + rect.height);\r\n\r\n             this.left = Math.min(this.left, rect.left);\r\n             this.top = Math.min(this.top, rect.top);\r\n\r\n             this.width = right - this.left;\r\n             this.height = bottom - this.top;\r\n         };\r\n\r\n         MyRect.prototype.centerPoint = function () {\r\n             return {\r\n                 x: this.left + this.width / 2,\r\n                 y: this.top + this.height / 2\r\n             };\r\n         };\r\n\r\n         MyRect.prototype.containsPoint = function (pt) {\r\n             return pt.x >= this.left &&\r\n                 pt.x <= this.left + this.width &&\r\n                 pt.y >= this.top &&\r\n                 pt.y <= this.top + this.height;\r\n         };\r\n\r\n         MyRect.prototype.containsRect = function (rc) {\r\n             return rc.left >= this.left &&\r\n                 rc.left + rc.width <= this.left + this.width &&\r\n                 rc.top >= this.top &&\r\n                 rc.top + rc.height <= this.top + this.height;\r\n         };\r\n\r\n         //---------------------------------------------------------------\r\n         // Helpers namespace. \r\n         //---------------------------------------------------------------\r\n\r\n         Helpers = {\r\n             // Draw a beziezr curve defined by 4 points \r\n             drawBezier: function (ctx, pt0, pt1, pt2, pt3) {\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(pt0.x, pt0.y);\r\n                 ctx.bezierCurveTo(pt1.x, pt1.y, pt2.x, pt2.y, pt3.x, pt3.y);\r\n             },\r\n\r\n             // Draw a polyline path. The polyline is defined by a set of points \r\n             drawPolyline: function (ctx, _points) {\r\n                 var i;\r\n\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(_points[0].x, _points[0].y);\r\n                 for (i = 1; i < _points.length; i++) {\r\n                     ctx.lineTo(_points[i].x, _points[i].y);\r\n                 }\r\n             },\r\n\r\n             // Draw a polyline path with roudned corners.\r\n             // The polyline is defined by a set of points \r\n             drawPolylineRounded: function (ctx, _points, r) {\r\n                 var k, A, B, n;\r\n\r\n                 n = _points.length;\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(_points[0].x, _points[0].y);\r\n                 for (k = 0; k < n - 2; k++) {\r\n                     A = Helpers.getStartingPointOfRoundedCorner(_points, k, r);\r\n                     B = Helpers.getEndingPointOfRoundedCorner(_points, k, r);\r\n                     if ((A.x === 0 && A.y === 0) || (B.x === 0 && B.y === 0)) {\r\n                         ctx.lineTo(_points[k + 1].x, _points[k + 1].y);\r\n                     } else {\r\n                         // Normal case\r\n                         ctx.lineTo(A.x, A.y);\r\n                         ctx.bezierCurveTo(_points[k + 1].x, _points[k + 1].y,\r\n                             _points[k + 1].x, _points[k + 1].y,\r\n                             B.x, B.y);\r\n                     }\r\n                 }\r\n\r\n                 // Terminate the last segment\r\n                 ctx.lineTo(_points[n - 1].x, _points[n - 1].y);\r\n             },\r\n\r\n             // Draw an ellipse path. See \r\n             // http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\r\n             drawEllipse: function (ctx, x, y, w, h) {\r\n                 var kappa, ox, oy, xe, ye, xm, ym;\r\n\r\n                 kappa = 0.5522848;\r\n                 ox = (w / 2) * kappa; // control point offset horizontal\r\n                 oy = (h / 2) * kappa; // control point offset vertical\r\n                 xe = x + w; // x-end\r\n                 ye = y + h; // y-end\r\n                 xm = x + w / 2; // x-middle\r\n                 ym = y + h / 2; // y-middle\r\n\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(x, ym);\r\n                 ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\r\n                 ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\r\n                 ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\r\n                 ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\r\n                 ctx.closePath();\r\n             },\r\n\r\n             // Draw a rectangular path \r\n             drawRectangle: function (ctx, x, y, w, h) {\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(x, y);\r\n                 ctx.lineTo(x + w, y);\r\n                 ctx.lineTo(x + w, y + h);\r\n                 ctx.lineTo(x, y + h);\r\n                 ctx.closePath();\r\n             },\r\n\r\n             // Draw a polygon path \r\n             drawPolygon: function (ctx, points) {\r\n                 var i;\r\n\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(points[0].x, points[0].y);\r\n                 for (i = 1; i < points.length; i++) {\r\n                     ctx.lineTo(points[i].x, points[i].y);\r\n                 }\r\n                 ctx.closePath();\r\n             },\r\n\r\n             // Draw a multi-line text \r\n             multiFillText: function (ctx, _text, x, y, _lineHeight, fitWidth, draw) {\r\n                 var sections, i, str, wordWidth, words, printNextLine, lineSpacing,\r\n                     index, currentLine, maxHeight, maxWidth;\r\n\r\n                 currentLine = 0;\r\n                 maxHeight = 0;\r\n                 maxWidth = 0;\r\n                 _text = _text.replace(/(\\r\\n|\\n\\r|\\r|\\n)/g, '\\n');\r\n                 sections = _text.split('\\n');\r\n\r\n                 printNextLine = function (str) {\r\n                     if (draw) {\r\n                         ctx.fillText(str, x, y + (_lineHeight * currentLine));\r\n                     }\r\n                     currentLine++;\r\n                     wordWidth = ctx.measureText(str).width;\r\n                     if (wordWidth > maxWidth) {\r\n                         maxWidth = wordWidth;\r\n                     }\r\n                 };\r\n\r\n                 for (i = 0; i < sections.length; i++) {\r\n                     words = sections[i].split(' ');\r\n                     index = 1;\r\n\r\n                     while (words.length > 0 && index <= words.length) {\r\n                         str = words.slice(0, index).join(' ');\r\n                         wordWidth = ctx.measureText(str).width;\r\n                         if (wordWidth > fitWidth) {\r\n                             if (index === 1) {\r\n                                 // Falls to this case if the first word in words[] is bigger than fitWidth\r\n                                 // so we print this word on its own line; index = 2 because slice is\r\n                                 str = words.slice(0, 1).join(' ');\r\n                                 words = words.splice(1);\r\n                             } else {\r\n                                 str = words.slice(0, index - 1).join(' ');\r\n                                 words = words.splice(index - 1);\r\n                             }\r\n\r\n                             printNextLine(str);\r\n\r\n                             index = 1;\r\n                         } else {\r\n                             index++;\r\n                         }\r\n                     }\r\n\r\n                     // The left over words on the last line\r\n                     if (index > 0) {\r\n                         printNextLine(words.join(' '));\r\n                     }\r\n                 }\r\n\r\n                 lineSpacing = 1 / 4 * _lineHeight;\r\n                 maxHeight = _lineHeight * currentLine + (currentLine - 1) * lineSpacing;\r\n                 if (!draw) {\r\n                     return {\r\n                         height: maxHeight,\r\n                         width: maxWidth\r\n                     };\r\n                 }\r\n             },\r\n\r\n             getFirstPointOfLastSegmentOfBezier: function (pt0, pt1, pt2, pt3) {\r\n                 var t, x, y;\r\n\r\n                 t = 18 / (20 - 1);\r\n                 x = (1 - t) * (1 - t) * (1 - t) * pt0.x +\r\n                     3 * t * (1 - t) * (1 - t) * pt1.x +\r\n                     3 * t * t * (1 - t) * pt2.x +\r\n                     t * t * t * pt3.x;\r\n                 y = (1 - t) * (1 - t) * (1 - t) * pt0.y +\r\n                     3 * t * (1 - t) * (1 - t) * pt1.y +\r\n                     3 * t * t * (1 - t) * pt2.y +\r\n                     t * t * t * pt3.y;\r\n                 return {\r\n                     x: x,\r\n                     y: y\r\n                 };\r\n             },\r\n\r\n             // Draw an arrow path \r\n             drawArrow: function (ctx, _shape) {\r\n                 var p;\r\n\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(_shape[0][0], _shape[0][1]);\r\n\r\n                 for (p in _shape) {\r\n                     if (p > 0) {\r\n                         ctx.lineTo(_shape[p][0], _shape[p][1]);\r\n                     }\r\n                 }\r\n\r\n                 ctx.lineTo(_shape[0][0], _shape[0][1]);\r\n                 ctx.fill();\r\n                 ctx.stroke();\r\n             },\r\n\r\n             // Translate the points of a polygon shape \r\n             translateShape: function (_shape, xdelta, ydelta) {\r\n                 var p, rv;\r\n\r\n                 rv = [];\r\n                 for (p in _shape) {\r\n                     rv.push([_shape[p][0] + xdelta, _shape[p][1] + ydelta]);\r\n                 }\r\n                 return rv;\r\n             },\r\n\r\n             // Rotate the points of a polygon shape \r\n             rotateShape: function (_shape, ang) {\r\n                 var p, rv;\r\n\r\n                 rv = [];\r\n                 for (p in _shape) {\r\n                     rv.push(Helpers.rotatePoint(ang, _shape[p][0], _shape[p][1]));\r\n                 }\r\n                 return rv;\r\n             },\r\n\r\n             // Rotate a point \r\n             rotatePoint: function (ang, x, y) {\r\n                 return [(x * Math.cos(ang)) - (y * Math.sin(ang)),\r\n                     (x * Math.sin(ang)) + (y * Math.cos(ang))\r\n                 ];\r\n             },\r\n\r\n             // Gets the array of points needed to draw a spline curve. \r\n             getSplinePoints: function (points, curvePoints) {\r\n                 var i, l;\r\n\r\n                 l = points.length;\r\n                 if (l === 2) {\r\n                     curvePoints.push(points[0]);\r\n                     curvePoints.push(points[1]);\r\n                 } else if (l === 3) {\r\n                     Helpers.splineSegment(curvePoints, points[0], points[0], points[1], points[2]);\r\n                     Helpers.splineSegment(curvePoints, points[0], points[1], points[2], points[2]);\r\n                 } else {\r\n                     Helpers.splineSegment(curvePoints, points[0], points[0], points[1], points[2]);\r\n                     for (i = 0; i < l - 3; i++) {\r\n                         Helpers.splineSegment(curvePoints,\r\n                             points[i], points[i + 1], points[i + 2], points[i + 3]);\r\n                     }\r\n                     Helpers.splineSegment(curvePoints,\r\n                         points[l - 3], points[l - 2], points[l - 1], points[l - 1]);\r\n                 }\r\n             },\r\n\r\n             // It uses an array of 10 points for each segment. \r\n             splineSegment: function (curvePoints, pt0, pt1, pt2, pt3) {\r\n                 var i, t, pt,\r\n                     T = 0.5,\r\n                     N = 10,\r\n                     SX1 = T * (pt2.x - pt0.x),\r\n                     SY1 = T * (pt2.y - pt0.y),\r\n                     SX2 = T * (pt3.x - pt1.x),\r\n                     SY2 = T * (pt3.y - pt1.y),\r\n                     AX = SX1 + SX2 + 2 * pt1.x - 2 * pt2.x,\r\n                     AY = SY1 + SY2 + 2 * pt1.y - 2 * pt2.y,\r\n                     BX = -2 * SX1 - SX2 - 3 * pt1.x + 3 * pt2.x,\r\n                     BY = -2 * SY1 - SY2 - 3 * pt1.y + 3 * pt2.y,\r\n                     CX = SX1,\r\n                     CY = SY1,\r\n                     DX = pt1.x,\r\n                     DY = pt1.y;\r\n\r\n                 for (i = 0; i < N; i++) {\r\n                     t = i / (N - 1);\r\n                     pt = {\r\n                         x: AX * t * t * t + BX * t * t + CX * t + DX,\r\n                         y: AY * t * t * t + BY * t * t + CY * t + DY\r\n                     };\r\n                     curvePoints.push(pt);\r\n                 }\r\n             },\r\n\r\n             // Adjust the coordinates of a point so that it fits to a grid \r\n             adjustGrid: function (pt, xgrid, ygrid) {\r\n                 var x, y, iX, iY;\r\n\r\n                 iX = Math.round(pt.x);\r\n                 iY = Math.round(pt.y);\r\n                 xgrid = Math.round(xgrid);\r\n                 ygrid = Math.round(ygrid);\r\n\r\n                 if (xgrid > 0) {\r\n                     x = iX % xgrid;\r\n                     if (x < xgrid / 2) {\r\n                         iX -= x;\r\n                     } else {\r\n                         iX += xgrid - x;\r\n                     }\r\n                 }\r\n                 if (ygrid > 0) {\r\n                     y = iY % ygrid;\r\n                     if (y < ygrid / 2) {\r\n                         iY -= y;\r\n                     } else {\r\n                         iY += ygrid - y;\r\n                     }\r\n                 }\r\n                 return {\r\n                     x: iX,\r\n                     y: iY\r\n                 };\r\n             },\r\n\r\n             // Returns the middle of two points \r\n             middlePoint: function (pt1, pt2) {\r\n                 return {\r\n                     x: (pt1.x + pt2.x) / 2,\r\n                     y: (pt1.y + pt2.y) / 2\r\n                 };\r\n             },\r\n\r\n             // Returns the rectangle defined by two points \r\n             getRectByTwoPoints: function (pt1, pt2) {\r\n                 return new MyRect(Math.min(pt1.x, pt2.x), Math.min(pt1.y, pt2.y),\r\n                     Math.abs(pt2.x - pt1.x), Math.abs(pt2.y - pt1.y));\r\n             },\r\n\r\n             // Get the intersection between a segment and an ellipse,\r\n             // the segment being directed to the centre of the ellipse \r\n             getEllipseNearestPt: function (rc, pt, center, angle) {\r\n                 var x, y, theta, alpha, dx, dy, a, b, r, ptInter;\r\n\r\n                 a = rc.width / 2;\r\n                 b = rc.height / 2;\r\n                 if (a === 0 || b === 0) {\r\n                     return center;\r\n                 }\r\n\r\n                 // The cos and sin functions work with angles defined in radians.\r\n                 theta = angle * (Math.PI / 180);\r\n\r\n                 // Translation\r\n                 // We defined the coordinates origin as the center of the ellipse\r\n                 pt.x -= center.x;\r\n                 pt.y -= center.y;\r\n\r\n                 // Rotation\r\n                 // To take account of ellipse rotation if any, we transform the \r\n                 // coordinates to keep on working as if the ellipse was not \r\n                 // rotated\r\n                 if (theta !== 0) {\r\n                     x = pt.x;\r\n                     y = pt.y;\r\n                     pt.x = x * Math.cos(theta) + y * Math.sin(theta);\r\n                     pt.y = x * Math.sin(theta) - y * Math.cos(theta);\r\n                 }\r\n\r\n                 // Angle with our horizontal ellipse\r\n                 alpha = Math.atan2(pt.y, -pt.x);\r\n\r\n                 // Get the intersection point\r\n                 dx = a * Math.sin(alpha);\r\n                 dy = b * Math.cos(alpha);\r\n                 r = (a * b) / Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n                 ptInter = {\r\n                     x: -r * Math.cos(alpha),\r\n                     y: r * Math.sin(alpha)\r\n                 };\r\n\r\n                 // Return to normal coordinates\r\n                 if (theta !== 0) {\r\n                     x = ptInter.x;\r\n                     y = ptInter.y;\r\n                     ptInter.x = x * Math.cos(theta) + y * Math.sin(theta);\r\n                     ptInter.y = x * Math.sin(theta) - y * Math.cos(theta);\r\n                 }\r\n\r\n                 // Needed in js\r\n                 pt.x += center.x;\r\n                 pt.y += center.y;\r\n\r\n                 ptInter.x += center.x;\r\n                 ptInter.y += center.y;\r\n                 return ptInter;\r\n             },\r\n\r\n             // Get the intersection between a segment and a polygon, the segment \r\n             // being directed to the centre of the bounding rectangle of the polygon \r\n             getPolyNearestPt: function (_points, pt, ctr) {\r\n                 var i, a1, a2, ptI, pt1, pt2, rc, dx, dy, dist, ptNear, maxdist, nbPt;\r\n\r\n                 ptNear = {\r\n                     x: 0,\r\n                     y: 0\r\n                 };\r\n                 maxdist = 0;\r\n                 nbPt = _points.length;\r\n\r\n                 for (i = 0; i < nbPt; i++) {\r\n                     ptI = {\r\n                         x: 0,\r\n                         y: 0\r\n                     };\r\n                     pt1 = _points[i];\r\n                     pt2 = (i < nbPt - 1) ? _points[i + 1] : _points[0];\r\n\r\n                     //if (pt1.x == pt2.x)\r\n                     if (Math.abs(pt1.x - pt2.x) < 0.0001) {\r\n                         //if (ctr.x == pt.x)\r\n                         if (Math.abs(ctr.x - pt.x) < 0.0001) {\r\n                             continue;\r\n                         } else {\r\n                             a1 = (pt.y - ctr.y) / (pt.x - ctr.x);\r\n                             ptI.x = pt1.x;\r\n                             ptI.y = a1 * (pt1.x - ctr.x) + ctr.y;\r\n                         }\r\n                     } else {\r\n                         a2 = (pt2.y - pt1.y) / (pt2.x - pt1.x);\r\n                         //if (ctr.x == pt.x)\r\n                         if (Math.abs(ctr.x - pt.x) < 0.0001) {\r\n                             ptI.x = pt.x;\r\n                             ptI.y = a2 * (pt.x - pt2.x) + pt2.y;\r\n                         } else {\r\n                             a1 = (pt.y - ctr.y) / (pt.x - ctr.x);\r\n                             //if (a1 == a2)\r\n                             if (Math.abs(a1 - a2) < 0.0001) {\r\n                                 continue;\r\n                             } else {\r\n                                 ptI.x = -(pt2.y - a2 * pt2.x - ctr.y + a1 * ctr.x) / (a2 - a1);\r\n                                 ptI.y = a1 * (ptI.x - ctr.x) + ctr.y;\r\n                             }\r\n                         }\r\n                     }\r\n\r\n                     rc = Helpers.getRectByTwoPoints(pt1, pt2);\r\n                     rc.left -= 1;\r\n                     rc.top -= 1;\r\n                     rc.width += 2;\r\n                     rc.height += 2;\r\n                     if (rc.containsPoint(ptI)) {\r\n                         dx = ptI.x - pt.x;\r\n                         dy = ptI.y - pt.y;\r\n                         dist = Math.pow(dx, 2) + Math.pow(dy, 2);\r\n                         if (maxdist === 0 || dist < maxdist) {\r\n                             maxdist = dist;\r\n                             ptNear = ptI;\r\n                         }\r\n                     }\r\n                 }\r\n                 return ptNear;\r\n             },\r\n\r\n             getRectanglePoints: function (rc, _points) {\r\n                 _points.push({\r\n                     x: rc.left,\r\n                     y: rc.top\r\n                 });\r\n                 _points.push({\r\n                     x: rc.left + rc.width,\r\n                     y: rc.top\r\n                 });\r\n                 _points.push({\r\n                     x: rc.left + rc.width,\r\n                     y: rc.top + rc.height\r\n                 });\r\n                 _points.push({\r\n                     x: rc.left,\r\n                     y: rc.top + rc.height\r\n                 });\r\n                 return 4;\r\n             },\r\n\r\n             // Calculate distance between a point and a link (which has several segments) \r\n             getDistanceBetweenPointAndPolyline: function (_points, nbPt, pt, linkWidth) {\r\n                 var rc, distance, inc, i;\r\n\r\n                 distance = 100000000;\r\n                 inc = linkWidth / 2;\r\n                 for (i = 0; i < nbPt - 1; i++) {\r\n                     if (i === 0 || i === nbPt - 2) {\r\n                         if (_points[i].x === _points[i + 1].x) {\r\n                             if (pt.y < Math.min(_points[i].y, _points[i + 1].y) ||\r\n                                 pt.y > Math.max(_points[i].y, _points[i + 1].y)) {\r\n                                 continue;\r\n                             }\r\n                         } else if (_points[i].y === _points[i + 1].y) {\r\n                             if (pt.x < Math.min(_points[i].x, _points[i + 1].x) ||\r\n                                 pt.x > Math.max(_points[i].x, _points[i + 1].x)) {\r\n                                 continue;\r\n                             }\r\n                         } else {\r\n                             rc = Helpers.getRectByTwoPoints(_points[i], _points[i + 1]);\r\n                             rc = rc.inflate(inc, inc);\r\n                             if (!rc.containsPoint(pt)) {\r\n                                 continue;\r\n                             }\r\n                         }\r\n                     }\r\n                     distance = Math.min(distance,\r\n                         Helpers.getSegDist(_points[i], _points[i + 1], pt));\r\n                 }\r\n                 return distance;\r\n             },\r\n\r\n             // Calculate distance between a point and a segment. \r\n             getSegDist: function (A, B, M) {\r\n                 var dist, dx1, dy1, dx2, dy2, a, b,\r\n                     dBAsqr, dMAsqr, dMBsqr, dBA, P, C, dPCsqr;\r\n\r\n                 dx1 = A.x - M.x;\r\n                 dy1 = A.y - M.y;\r\n                 dx2 = B.x - M.x;\r\n                 dy2 = B.y - M.y;\r\n                 a = B.x - A.x;\r\n                 b = B.y - A.y;\r\n                 dBAsqr = Math.pow(a, 2) + Math.pow(b, 2);\r\n                 dMAsqr = Math.pow(dx1, 2) + Math.pow(dy1, 2);\r\n                 dMBsqr = Math.pow(dx2, 2) + Math.pow(dy2, 2);\r\n\r\n                 // Distance between M and line AB\r\n                 dBA = Math.sqrt(dBAsqr);\r\n                 if (dBA < 1) {\r\n                     dist = Math.sqrt(dMAsqr);\r\n                     return dist;\r\n                 }\r\n\r\n                 dist = Math.abs(b * dx1 - a * dy1) / dBA;\r\n\r\n                 // In fact we want the distance between M and segment AB (not line AB)\r\n                 // Get the projection point of M on AB line\r\n                 P = {\r\n                     x: M.x - (dist * b / dBA),\r\n                     y: M.y + (dist * a / dBA)\r\n                 };\r\n\r\n                 // Get middle point of AB segment\r\n                 C = {\r\n                     x: (B.x + A.x) / 2,\r\n                     y: (B.y + A.y) / 2\r\n                 };\r\n\r\n                 // Verify if position of P is outside the segment AB.\r\n                 // If yes then the distance between M and the segment is the\r\n                 // distance between M and the extremity point (A or B) of the segment.\r\n                 dPCsqr = (P.x - C.x) * (P.x - C.x) + (P.y - C.y) * (P.y - C.y);\r\n                 if (dPCsqr > dBAsqr / 4) {\r\n                     dist = Math.sqrt(Math.min(dMAsqr, dMBsqr));\r\n                 }\r\n                 return dist;\r\n             },\r\n\r\n             // Gets the first point of a polyline corner \r\n             getStartingPointOfRoundedCorner: function (_points, k, sizeRound) {\r\n                 var dx, dy, dist, cos, sin, pt;\r\n\r\n                 pt = {\r\n                     x: 0,\r\n                     y: 0\r\n                 };\r\n                 dx = _points[k + 1].x - _points[k].x;\r\n                 dy = _points[k].y - _points[k + 1].y;\r\n                 dist = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n                 if (dist > 0) {\r\n                     cos = dx / dist;\r\n                     sin = dy / dist;\r\n                     pt = {\r\n                         x: _points[k + 1].x - sizeRound * cos,\r\n                         y: _points[k + 1].y + sizeRound * sin\r\n                     };\r\n                 }\r\n                 return pt;\r\n             },\r\n\r\n             //  Gets the last point of a polyline corner \r\n             getEndingPointOfRoundedCorner: function (_points, k, sizeRound) {\r\n                 var dx, dy, dist, cos, sin, pt;\r\n\r\n                 pt = {\r\n                     x: 0,\r\n                     y: 0\r\n                 };\r\n                 dx = _points[k + 2].x - _points[k + 1].x;\r\n                 dy = _points[k + 1].y - _points[k + 2].y;\r\n                 dist = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n                 if (dist > 0) {\r\n                     cos = dx / dist;\r\n                     sin = dy / dist;\r\n                     return {\r\n                         x: _points[k + 1].x + sizeRound * cos,\r\n                         y: _points[k + 1].y - sizeRound * sin\r\n                     };\r\n                 }\r\n                 return pt;\r\n             },\r\n\r\n             // Determines an array of points that approximate a bezier curve \r\n             flattenBezier: function (pt0, pt1, pt2, pt3, apt) {\r\n                 var t, x, y;\r\n\r\n                 for (t = 0.0; t < 1.0; t = t + 0.1) {\r\n                     x = ((1 - t) * (1 - t) * (1 - t) * pt0.x +\r\n                         3 * t * (1 - t) * (1 - t) * pt1.x +\r\n                         3 * t * t * (1 - t) * pt2.x +\r\n                         t * t * t * pt3.x);\r\n                     y = ((1 - t) * (1 - t) * (1 - t) * pt0.y +\r\n                         3 * t * (1 - t) * (1 - t) * pt1.y +\r\n                         3 * t * t * (1 - t) * pt2.y +\r\n                         t * t * t * pt3.y);\r\n                     apt.push({\r\n                         x: x,\r\n                         y: y\r\n                     });\r\n                 }\r\n                 apt.push(pt3);\r\n             },\r\n\r\n             // Returns the distance between 2 points\r\n             getPointsDistance: function (p1, p2) {\r\n                 return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\r\n             },\r\n\r\n             // Return the bound rectangle for a given set of points\r\n             getBoundingRect: function (_polygon) {\r\n                 var minX, maxX, minY, maxY, i;\r\n\r\n                 if (_polygon.length === 0) {\r\n                     return null;\r\n                 }\r\n                 minX = _polygon[0][0];\r\n                 maxX = minX;\r\n                 minY = _polygon[0][1];\r\n                 maxY = minY;\r\n                 for (i = 0; i < _polygon.length; i++) {\r\n                     minX = Math.min(minX, _polygon[i][0]);\r\n                     minY = Math.min(minY, _polygon[i][1]);\r\n                     maxX = Math.max(maxX, _polygon[i][0]);\r\n                     maxY = Math.max(maxY, _polygon[i][1]);\r\n                 }\r\n                 return new MyRect(minX, minY, maxX - minX, maxY - minY);\r\n             }\r\n         };\r\n\r\n         //----------------------------------------------------------------\r\n         // OrthoRouter class. A class for creating orthogonal links\r\n         //----------------------------------------------------------------\r\n\r\n         function OrthoRouter() {\r\n             var orgOrientation, dstOrientation, n1, n2, s1, s2, or;\r\n\r\n             or = this;\r\n\r\n             function isAligned(pt1, pt2, pt3) {\r\n                 return ((pt1.x === pt2.x && pt2.x === pt3.x) ||\r\n                     (pt1.y === pt2.y && pt2.y === pt3.y));\r\n             }\r\n\r\n             function normalizePoints(apt, _points) {\r\n                 var isChanged, A, B, C, pt1, pt2, pt3, pt4, i;\r\n\r\n                 if (_points.length <= 2) {\r\n                     return;\r\n                 }\r\n\r\n                 isChanged = true;\r\n\r\n                 while (isChanged) {\r\n                     isChanged = false;\r\n                     for (i = 1; i < _points.length - 1; i++) {\r\n                         A = _points[i - 1];\r\n                         B = _points[i];\r\n                         C = _points[i + 1];\r\n\r\n                         if ((A.y === B.y && B.y === C.y) || (A.x === B.x && B.x === C.x)) {\r\n                             _points.splice(i, 1); // Remove point\r\n                             isChanged = true;\r\n                             break;\r\n                         }\r\n                     }\r\n                 }\r\n\r\n                 for (i = 0; i < _points.length; i++) {\r\n                     apt.push(_points[i]);\r\n                 }\r\n\r\n                 // If only 2 points, we add 2 points to obtain 3 orthogonal segments\r\n                 if (_points.length === 2) {\r\n                     pt1 = apt[0];\r\n                     pt4 = apt[1];\r\n                     if (pt1.y === pt4.y) {\r\n                         pt2 = {\r\n                             x: pt1.x + (pt4.x - pt1.x) / 2,\r\n                             y: pt1.y\r\n                         };\r\n                         pt3 = {\r\n                             x: pt4.x - (pt4.x - pt1.x) / 2,\r\n                             y: pt4.y\r\n                         };\r\n                     } else {\r\n                         pt2 = {\r\n                             x: pt1.x,\r\n                             y: pt1.y + (pt4.y - pt1.y) / 2\r\n                         };\r\n                         pt3 = {\r\n                             x: pt4.x,\r\n                             y: pt4.y - (pt4.y - pt1.y) / 2\r\n                         };\r\n                     }\r\n                     apt.splice(1, 0, pt2);\r\n                     apt.splice(2, 0, pt3);\r\n                 }\r\n             }\r\n\r\n             function rectIntersectsLine(rc, startPoint, endPoint) {\r\n                 rc = rc.inflate(-1, -1);\r\n                 return rc.intersectsWith(\r\n                     Helpers.getRectByTwoPoints(startPoint, endPoint));\r\n             }\r\n\r\n             function isPtVisible(fromPoint, targetPoint, rects) {\r\n                 var i, result;\r\n\r\n                 result = true;\r\n                 for (i = 0; i < rects.length; i++) {\r\n                     if (rectIntersectsLine(rects[i], fromPoint, targetPoint)) {\r\n                         result = false;\r\n                         break;\r\n                     }\r\n                 }\r\n                 return result;\r\n             }\r\n\r\n             function getOffsetPoint(pt, rect, orientation) {\r\n                 var offsetPoint;\r\n\r\n                 switch (orientation) {\r\n                     case 'left':\r\n                         offsetPoint = {\r\n                             x: rect.left,\r\n                             y: pt.y\r\n                         };\r\n                         break;\r\n                     case 'top':\r\n                         offsetPoint = {\r\n                             x: pt.x,\r\n                             y: rect.top\r\n                         };\r\n                         break;\r\n                     case 'right':\r\n                         offsetPoint = {\r\n                             x: rect.left + rect.width,\r\n                             y: pt.y\r\n                         };\r\n                         break;\r\n                     case 'bottom':\r\n                         offsetPoint = {\r\n                             x: pt.x,\r\n                             y: rect.top + rect.height\r\n                         };\r\n                         break;\r\n                     default:\r\n                         break;\r\n                 }\r\n                 return offsetPoint;\r\n             }\r\n\r\n             function getOrientation2(p1, p2) {\r\n                 var result = 'none';\r\n\r\n                 if (p1.x === p2.x) {\r\n                     if (p1.y >= p2.y) {\r\n                         result = 'bottom';\r\n                     } else {\r\n                         result = 'top';\r\n                     }\r\n                 } else if (p1.y === p2.y) {\r\n                     if (p1.x >= p2.x) {\r\n                         result = 'right';\r\n                     } else {\r\n                         result = 'left';\r\n                     }\r\n                 }\r\n                 return result;\r\n             }\r\n\r\n             function getOrientation(itm, pt) {\r\n                 var result, rc, d1, d2, d3, d4, min;\r\n\r\n                 rc = getNodeRect(itm);\r\n                 d1 = Math.abs(pt.x - rc.left);\r\n                 d2 = Math.abs(pt.x - (rc.left + rc.width));\r\n                 d3 = Math.abs(pt.y - rc.top);\r\n                 d4 = Math.abs(pt.y - (rc.top + rc.height));\r\n                 min = Math.min(Math.min(Math.min(d1, d2), d3), d4);\r\n\r\n                 if (min === d1) {\r\n                     result = 'left';\r\n                 } else if (min === d2) {\r\n                     result = 'right';\r\n                 } else if (min === d3) {\r\n                     result = 'top';\r\n                 } else {\r\n                     result = 'bottom';\r\n                 }\r\n                 return result;\r\n             }\r\n\r\n             function getOppositeCorners(orientation, rc) {\r\n                 switch (orientation) {\r\n                     case 'left':\r\n                         n1 = {\r\n                             x: rc.left + rc.width,\r\n                             y: rc.top\r\n                         };\r\n                         n2 = {\r\n                             x: rc.left + rc.width,\r\n                             y: rc.top + rc.height\r\n                         };\r\n                         break;\r\n                     case 'top':\r\n                         n1 = {\r\n                             x: rc.left,\r\n                             y: rc.top + rc.height\r\n                         };\r\n                         n2 = {\r\n                             x: rc.left + rc.width,\r\n                             y: rc.top + rc.height\r\n                         };\r\n                         break;\r\n                     case 'right':\r\n                         n1 = {\r\n                             x: rc.left,\r\n                             y: rc.top\r\n                         };\r\n                         n2 = {\r\n                             x: rc.left,\r\n                             y: rc.top + rc.height\r\n                         };\r\n                         break;\r\n                     case 'bottom':\r\n                         n1 = {\r\n                             x: rc.left,\r\n                             y: rc.top\r\n                         };\r\n                         n2 = {\r\n                             x: rc.left + rc.width,\r\n                             y: rc.top\r\n                         };\r\n                         break;\r\n                     default:\r\n                         // No opposite corners found!\r\n                         break;\r\n                 }\r\n             }\r\n\r\n             function getNeighborCorners(orientation, rc) {\r\n                 switch (orientation) {\r\n                     case 'left':\r\n                         n1 = {\r\n                             x: rc.left,\r\n                             y: rc.top\r\n                         };\r\n                         n2 = {\r\n                             x: rc.left,\r\n                             y: rc.top + rc.height\r\n                         };\r\n                         break;\r\n                     case 'top':\r\n                         n1 = {\r\n                             x: rc.left,\r\n                             y: rc.top\r\n                         };\r\n                         n2 = {\r\n                             x: rc.left + rc.width,\r\n                             y: rc.top\r\n                         };\r\n                         break;\r\n                     case 'right':\r\n                         n1 = {\r\n                             x: rc.left + rc.width,\r\n                             y: rc.top\r\n                         };\r\n                         n2 = {\r\n                             x: rc.left + rc.width,\r\n                             y: rc.top + rc.height\r\n                         };\r\n                         break;\r\n                     case 'bottom':\r\n                         n1 = {\r\n                             x: rc.left,\r\n                             y: rc.top + rc.height\r\n                         };\r\n                         n2 = {\r\n                             x: rc.left + rc.width,\r\n                             y: rc.top + rc.height\r\n                         };\r\n                         break;\r\n                     default:\r\n                         // No neighbour corners found\r\n                         break;\r\n                 }\r\n             }\r\n\r\n             function getNearestNeighborOrg(endPoint, rcOrg, rcDst, flag) {\r\n                 getNeighborCorners(orgOrientation, rcOrg);\r\n                 if (rcDst.containsPoint(n1)) {\r\n                     flag = false;\r\n                     return n2;\r\n                 }\r\n                 if (rcDst.containsPoint(n2)) {\r\n                     flag = true;\r\n                     return n1;\r\n                 }\r\n                 if ((Helpers.getPointsDistance(n1, endPoint) <=\r\n                         Helpers.getPointsDistance(n2, endPoint))) {\r\n                     flag = true;\r\n                     return n1;\r\n                 } else {\r\n                     flag = false;\r\n                     return n2;\r\n                 }\r\n             }\r\n\r\n             function getNearestVisibleNeighborDst(pt, endPoint, rcOrg, rcDst) {\r\n                 var flag1, flag2;\r\n\r\n                 getNeighborCorners(dstOrientation, rcDst);\r\n                 s1 = n1;\r\n                 s2 = n2;\r\n\r\n                 flag1 = isPtVisible(pt, s1, [rcOrg, rcDst]);\r\n                 flag2 = isPtVisible(pt, s2, [rcOrg, rcDst]);\r\n\r\n                 if (flag1) // s1 visible\r\n                 {\r\n                     if (flag2) // s1 and s2 visible\r\n                     {\r\n                         if (rcDst.containsPoint(s1)) {\r\n                             return s2;\r\n                         }\r\n                         if (rcDst.containsPoint(s2)) {\r\n                             return s1;\r\n                         }\r\n                         if ((Helpers.getPointsDistance(s1, endPoint) <=\r\n                                 Helpers.getPointsDistance(s2, endPoint))) {\r\n                             return s1;\r\n                         } else {\r\n                             return s2;\r\n                         }\r\n                     } else {\r\n                         return s1;\r\n                     }\r\n                 } else { // s1 not visible\r\n                     if (flag2) {\r\n                         // only s2 visible\r\n                         return s2;\r\n                     } else {\r\n                         // s1 and s2 not visible\r\n                         return {\r\n                             x: undefined,\r\n                             y: undefined\r\n                         };\r\n                     }\r\n                 }\r\n             }\r\n\r\n             function isRectVisible(pt, rc, rects) {\r\n                 if (isPtVisible(pt, {\r\n                         x: rc.left,\r\n                         y: rc.top\r\n                     }, rects)) {\r\n                     return true;\r\n                 }\r\n                 if (isPtVisible(pt, {\r\n                         x: rc.left + rc.width,\r\n                         y: rc.top\r\n                     }, rects)) {\r\n                     return true;\r\n                 }\r\n                 if (isPtVisible(pt, {\r\n                         x: rc.left,\r\n                         y: rc.top + rc.height\r\n                     }, rects)) {\r\n                     return true;\r\n                 }\r\n                 if (isPtVisible(pt, {\r\n                         x: rc.left + rc.width,\r\n                         y: rc.top + rc.height\r\n                     }, rects)) {\r\n                     return true;\r\n                 }\r\n                 return false;\r\n             }\r\n\r\n             function getRectWithMargin(itm, margin) {\r\n                 var rc = getNodeRect(itm);\r\n                 rc = rc.inflate(margin, margin);\r\n                 return rc;\r\n             }\r\n\r\n             function checkPathEnd(startPoint, endPoint, _points, marginPath) {\r\n                 var pt1 = {\r\n                         x: 0,\r\n                         y: 0\r\n                     },\r\n                     pt2 = {\r\n                         x: 0,\r\n                         y: 0\r\n                     };\r\n\r\n                 switch (orgOrientation) {\r\n                     case 'left':\r\n                         pt1 = {\r\n                             x: startPoint.x + marginPath,\r\n                             y: startPoint.y\r\n                         };\r\n                         break;\r\n                     case 'top':\r\n                         pt1 = {\r\n                             x: startPoint.x,\r\n                             y: startPoint.y + marginPath\r\n                         };\r\n                         break;\r\n                     case 'right':\r\n                         pt1 = {\r\n                             x: startPoint.x - marginPath,\r\n                             y: startPoint.y\r\n                         };\r\n                         break;\r\n                     case 'bottom':\r\n                         pt1 = {\r\n                             x: startPoint.x,\r\n                             y: startPoint.y - marginPath\r\n                         };\r\n                         break;\r\n                     default:\r\n                         break;\r\n                 }\r\n\r\n                 switch (dstOrientation) {\r\n                     case 'left':\r\n                         pt2 = {\r\n                             x: endPoint.x + marginPath,\r\n                             y: endPoint.y\r\n                         };\r\n                         break;\r\n                     case 'top':\r\n                         pt2 = {\r\n                             x: endPoint.x,\r\n                             y: endPoint.y + marginPath\r\n                         };\r\n                         break;\r\n                     case 'right':\r\n                         pt2 = {\r\n                             x: endPoint.x - marginPath,\r\n                             y: endPoint.y\r\n                         };\r\n                         break;\r\n                     case 'bottom':\r\n                         pt2 = {\r\n                             x: endPoint.x,\r\n                             y: endPoint.y - marginPath\r\n                         };\r\n                         break;\r\n                     default:\r\n                         break;\r\n                 }\r\n\r\n                 _points.splice(0, 0, pt1);\r\n                 _points.push(pt2);\r\n             }\r\n\r\n             function optimizeLinePoints(apt, rects) {\r\n                 var i, j, k, orientFrom, orientTo, centerX, centerY, apt2, cut;\r\n\r\n                 apt2 = [];\r\n                 cut = 0;\r\n                 for (i = 0; i < apt.length; i++) {\r\n                     if (i >= cut) {\r\n                         for (k = apt.length - 1; k > i; k--) {\r\n                             if (isPtVisible(apt[i], apt[k], rects)) {\r\n                                 cut = k;\r\n                                 break;\r\n                             }\r\n                         }\r\n                         apt2.push(apt[i]);\r\n                     }\r\n                 }\r\n\r\n                 for (j = 0; j < apt2.length - 1; j++) {\r\n                     if (apt2[j].x !== apt2[j + 1].x &&\r\n                         apt2[j].y !== apt2[j + 1].y) {\r\n                         // orientation from point\r\n                         if (j === 0) {\r\n                             orientFrom = orgOrientation;\r\n                         } else {\r\n                             orientFrom = getOrientation2(apt2[j], apt2[j - 1]);\r\n                         }\r\n\r\n                         // orientation to point\r\n                         if (j === apt2.length - 2) {\r\n                             orientTo = dstOrientation;\r\n                         } else {\r\n                             orientTo = getOrientation2(apt2[j + 1], apt2[j + 2]);\r\n                         }\r\n\r\n                         if ((orientFrom === 'left' || orientFrom === 'right') &&\r\n                             (orientTo === 'left' || orientTo === 'right')) {\r\n                             centerX = Math.min(apt2[j].x,\r\n                                 apt2[j + 1].x) + Math.abs(apt2[j].x - apt2[j + 1].x) / 2;\r\n                             apt2.splice(j + 1, 0, {\r\n                                 x: centerX,\r\n                                 y: apt2[j].y\r\n                             });\r\n                             apt2.splice(j + 2, 0, {\r\n                                 x: centerX,\r\n                                 y: apt2[j + 2].y\r\n                             });\r\n                             if (apt2.length - 1 > j + 3) {\r\n                                 apt2.splice(j + 3, 1);\r\n                             }\r\n                             return apt2;\r\n                         }\r\n\r\n                         if ((orientFrom === 'top' || orientFrom === 'bottom') &&\r\n                             (orientTo === 'top' || orientTo === 'bottom')) {\r\n                             centerY = Math.min(apt2[j].y,\r\n                                 apt2[j + 1].y) + Math.abs(apt2[j].y - apt2[j + 1].y) / 2;\r\n                             apt2.splice(j + 1, 0, {\r\n                                 x: apt2[j].x,\r\n                                 y: centerY\r\n                             });\r\n                             apt2.splice(j + 2, 0, {\r\n                                 x: apt2[j + 2].x,\r\n                                 y: centerY\r\n                             });\r\n                             if (apt2.length - 1 > j + 3) {\r\n                                 apt2.splice(j + 3, 1);\r\n                             }\r\n                             return apt2;\r\n                         }\r\n\r\n                         if ((orientFrom === 'left' || orientFrom === 'right') &&\r\n                             (orientTo === 'top' || orientTo === 'bottom')) {\r\n                             apt2.splice(j + 1, 0, {\r\n                                 x: apt2[j + 1].x,\r\n                                 y: apt2[j].y\r\n                             });\r\n                             return apt2;\r\n                         }\r\n\r\n                         if ((orientFrom === 'top' || orientFrom === 'bottom') &&\r\n                             (orientTo === 'left' || orientTo === 'right')) {\r\n                             apt2.splice(j + 1, 0, {\r\n                                 x: apt2[j].x,\r\n                                 y: apt2[j + 1].y\r\n                             });\r\n                             return apt2;\r\n                         }\r\n                     }\r\n                 }\r\n                 return apt2;\r\n             }\r\n\r\n             or.getConnectionLine = function (org, dst, pinOrg, pinDst, orthoMargin) {\r\n                 var startPoint, endPoint, currentPoint, flag, n, neighbour, apt,\r\n                     n1Visible, n2Visible,\r\n                     _points = [],\r\n                     virtualPinsOrg = false,\r\n                     virtualPinsDst = false,\r\n                     orgPins = null,\r\n                     dstPins = null,\r\n                     rcOrg = getRectWithMargin(org, orthoMargin),\r\n                     rcDst = getRectWithMargin(dst, orthoMargin),\r\n                     ptOrg = rcOrg.centerPoint(),\r\n                     ptDst = rcDst.centerPoint();\r\n\r\n                 // If the origin node has no pin, we do as if it has 4 pins\r\n                 // (left, top, right, bottom) and we select the best one\r\n                 if (pinOrg === undefined || pinOrg === null || org.pins === null) {\r\n                     // Those 4 pins will be removed at the end\r\n                     virtualPinsOrg = true; // flag for deleting pins\r\n                     orgPins = org.pins;\r\n                     org.pins = [\r\n                         [0, 50],\r\n                         [50, 0],\r\n                         [100, 50],\r\n                         [50, 100]\r\n                     ];\r\n\r\n                     // Select the best pin for our link\r\n                     if (Math.abs(ptOrg.x - ptDst.x) < Math.abs(ptOrg.y - ptDst.y)) {\r\n                         if (ptDst.y > ptOrg.y) {\r\n                             pinOrg = 3;\r\n                         } else {\r\n                             pinOrg = 1;\r\n                         }\r\n                     } else {\r\n                         if (ptDst.x > ptOrg.x) {\r\n                             pinOrg = 2;\r\n                         } else {\r\n                             pinOrg = 0;\r\n                         }\r\n                     }\r\n                 }\r\n\r\n                 // If the destination node has no pin, we do as if it has 4 pins \r\n                 // (left, top, right, bottom) and we select the best one\r\n                 if (pinDst === undefined || pinDst === null || dst.pins === null) {\r\n                     // Those 4 pins will be removed at the end\r\n                     virtualPinsDst = true; // flag for deleting pins\r\n                     dstPins = dst.pins;\r\n                     dst.pins = [\r\n                         [0, 50],\r\n                         [50, 0],\r\n                         [100, 50],\r\n                         [50, 100]\r\n                     ];\r\n\r\n                     // Select the best pin for our link\r\n                     if (Math.abs(ptOrg.x - ptDst.x) < Math.abs(ptOrg.y - ptDst.y)) {\r\n                         if (ptOrg.y < ptDst.y) {\r\n                             pinDst = 1;\r\n                         } else {\r\n                             pinDst = 3;\r\n                         }\r\n                     } else {\r\n                         if (ptOrg.x < ptDst.x) {\r\n                             pinDst = 0;\r\n                         } else {\r\n                             pinDst = 2;\r\n                         }\r\n                     }\r\n                 }\r\n\r\n                 startPoint = getPinPosition(org, pinOrg);\r\n                 orgOrientation = getOrientation(org, startPoint);\r\n                 startPoint = getOffsetPoint(startPoint, rcOrg, orgOrientation);\r\n\r\n                 endPoint = getPinPosition(dst, pinDst);\r\n                 dstOrientation = getOrientation(dst, endPoint);\r\n                 endPoint = getOffsetPoint(endPoint, rcDst, dstOrientation);\r\n\r\n                 _points.push(startPoint);\r\n                 currentPoint = startPoint;\r\n\r\n                 if (!rcDst.containsPoint(currentPoint) &&\r\n                     !rcOrg.containsPoint(endPoint)) {\r\n                     while (true) {\r\n                         if (isPtVisible(currentPoint, endPoint, [rcOrg, rcDst])) {\r\n                             _points.push(endPoint);\r\n                             currentPoint = endPoint;\r\n                             break;\r\n                         }\r\n\r\n                         neighbour = getNearestVisibleNeighborDst(\r\n                             currentPoint, endPoint, rcOrg, rcDst);\r\n                         if (neighbour.x !== undefined) {\r\n                             _points.push(neighbour);\r\n                             _points.push(endPoint);\r\n                             currentPoint = endPoint;\r\n                             break;\r\n                         }\r\n\r\n                         if (currentPoint === startPoint) {\r\n                             n = getNearestNeighborOrg(endPoint, rcOrg, rcDst, flag);\r\n                             _points.push(n);\r\n                             currentPoint = n;\r\n\r\n                             if (!isRectVisible(currentPoint, rcDst, [rcOrg])) {\r\n                                 getOppositeCorners(orgOrientation, rcOrg);\r\n                                 if (flag) {\r\n                                     _points.push(n1);\r\n                                     currentPoint = n1;\r\n                                 } else {\r\n                                     _points.push(n2);\r\n                                     currentPoint = n2;\r\n                                 }\r\n                                 if (!isRectVisible(currentPoint, rcDst, [rcOrg])) {\r\n                                     if (flag) {\r\n                                         _points.push(n2);\r\n                                         currentPoint = n2;\r\n                                     } else {\r\n                                         _points.push(n1);\r\n                                         currentPoint = n1;\r\n                                     }\r\n                                 }\r\n                             }\r\n                         } else // from here on we jump to the dst node\r\n                         {\r\n                             getNeighborCorners(dstOrientation, rcDst);\r\n                             s1 = n1;\r\n                             s2 = n2;\r\n                             getOppositeCorners(dstOrientation, rcDst);\r\n\r\n                             n1Visible = isPtVisible(currentPoint, n1, [rcOrg, rcDst]);\r\n                             n2Visible = isPtVisible(currentPoint, n2, [rcOrg, rcDst]);\r\n\r\n                             if (n1Visible && n2Visible) {\r\n                                 if (rcOrg.containsPoint(n1)) {\r\n                                     _points.push(n2);\r\n                                     if (rcOrg.containsPoint(s2)) {\r\n                                         _points.push(n1);\r\n                                         _points.push(s1);\r\n                                     } else {\r\n                                         _points.push(s2);\r\n                                     }\r\n\r\n                                     _points.push(endPoint);\r\n                                     currentPoint = endPoint;\r\n                                     break;\r\n                                 }\r\n\r\n                                 if (rcOrg.containsPoint(n2)) {\r\n                                     _points.push(n1);\r\n                                     if (rcOrg.containsPoint(s1)) {\r\n                                         _points.push(n2);\r\n                                         _points.push(s2);\r\n                                     } else {\r\n                                         _points.push(s1);\r\n                                     }\r\n\r\n                                     _points.push(endPoint);\r\n                                     currentPoint = endPoint;\r\n                                     break;\r\n                                 }\r\n\r\n                                 if (Helpers.getPointsDistance(n1, endPoint) <=\r\n                                     Helpers.getPointsDistance(n2, endPoint)) {\r\n                                     _points.push(n1);\r\n                                     if (rcOrg.containsPoint(s1)) {\r\n                                         _points.push(n2);\r\n                                         _points.push(s2);\r\n                                     } else {\r\n                                         _points.push(s1);\r\n                                     }\r\n                                     _points.push(endPoint);\r\n                                     currentPoint = endPoint;\r\n                                     break;\r\n                                 } else {\r\n                                     _points.push(n2);\r\n                                     if (rcOrg.containsPoint(s2)) {\r\n                                         _points.push(n1);\r\n                                         _points.push(s1);\r\n                                     } else {\r\n                                         _points.push(s2);\r\n                                     }\r\n                                     _points.push(endPoint);\r\n                                     currentPoint = endPoint;\r\n                                     break;\r\n                                 }\r\n                             } else if (n1Visible) {\r\n                                 _points.push(n1);\r\n                                 if (rcOrg.containsPoint(s1)) {\r\n                                     _points.push(n2);\r\n                                     _points.push(s2);\r\n                                 } else {\r\n                                     _points.push(s1);\r\n                                 }\r\n                                 _points.push(endPoint);\r\n                                 currentPoint = endPoint;\r\n                                 break;\r\n                             } else {\r\n                                 _points.push(n2);\r\n                                 if (rcOrg.containsPoint(s2)) {\r\n                                     _points.push(n1);\r\n                                     _points.push(s1);\r\n                                 } else {\r\n                                     _points.push(s2);\r\n                                 }\r\n                                 _points.push(endPoint);\r\n                                 currentPoint = endPoint;\r\n                                 break;\r\n                             }\r\n                         }\r\n                     }\r\n                 } else {\r\n                     _points.push(endPoint);\r\n                 }\r\n\r\n                 _points = optimizeLinePoints(_points, [rcOrg, rcDst]);\r\n                 checkPathEnd(startPoint, endPoint, _points, orthoMargin);\r\n\r\n                 if (virtualPinsDst) {\r\n                     dst.pins = dstPins;\r\n                 }\r\n                 if (virtualPinsOrg) {\r\n                     org.pins = orgPins;\r\n                 }\r\n\r\n                 apt = [];\r\n                 normalizePoints(apt, _points);\r\n                 return apt;\r\n             };\r\n         }\r\n\r\n         //----------------------------------------------------------------\r\n         // PolylineHelper class. A class for finding a point on a polyline\r\n         //----------------------------------------------------------------\r\n\r\n         function PolylineHelper(_points) {\r\n             var plh, i, pt, priorSegment, length, tangent,\r\n                 list, Segment, getSegmentLength, getLength;\r\n\r\n             plh = this;\r\n             tangent = null;\r\n             list = [];\r\n\r\n             // Each segment is part of a polyline. The offset is the length\r\n             // from the beginning.\r\n             Segment = function (offset, point) {\r\n                 var seg = this;\r\n                 seg.offset = offset;\r\n                 seg.point = point;\r\n             };\r\n\r\n             getSegmentLength = function (pt1, pt2) {\r\n                 return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\r\n             };\r\n\r\n             getLength = function () {\r\n                 if (list.length < 2) {\r\n                     return 0;\r\n                 }\r\n                 var segment = list[list.length - 1];\r\n                 return segment.offset;\r\n             };\r\n\r\n             for (i = 0; i < _points.length; i++) {\r\n                 pt = _points[i];\r\n                 if (list.length === 0) {\r\n                     list.push(new Segment(0, pt));\r\n                 } else {\r\n                     // Determine accumulated offset of Point\r\n                     priorSegment = list[list.length - 1];\r\n                     length = getSegmentLength(pt, priorSegment.point);\r\n                     list.push(new Segment(priorSegment.offset + length, pt));\r\n                 }\r\n             }\r\n\r\n             plh.getPointAtFractionLength = function (progress) {\r\n                 var point, offset, index1, index2, testIndex, seg1, seg2, pt1, pt2,\r\n                     offset1, offset2, dx, dy, d;\r\n\r\n                 if (progress < 0 || progress > 1 || getLength() === 0) {\r\n                     return null;\r\n                 }\r\n\r\n                 offset = progress * getLength();\r\n\r\n                 // Binary search\r\n                 index1 = 0;\r\n                 index2 = list.length - 1;\r\n\r\n                 while (index2 - index1 > 1) {\r\n                     testIndex = Math.floor((index2 + index1) / 2);\r\n                     if (offset < list[testIndex].offset) {\r\n                         index2 = testIndex;\r\n                     } else {\r\n                         index1 = testIndex;\r\n                     }\r\n                 }\r\n\r\n                 seg1 = list[index1];\r\n                 seg2 = list[index2];\r\n                 pt1 = seg1.point;\r\n                 pt2 = seg2.point;\r\n                 offset1 = seg1.offset;\r\n                 offset2 = seg2.offset;\r\n\r\n                 point = {\r\n                     x: ((offset2 - offset) * pt1.x + (offset - offset1) * pt2.x) / (offset2 - offset1),\r\n                     y: ((offset2 - offset) * pt1.y + (offset - offset1) * pt2.y) / (offset2 - offset1)\r\n                 };\r\n\r\n                 dx = pt2.x - pt1.x;\r\n                 dy = pt2.y - pt1.y;\r\n                 d = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n                 tangent = {\r\n                     x: dx / d,\r\n                     y: dy / d\r\n                 };\r\n                 return point;\r\n             };\r\n\r\n             plh.getTangent = function () {\r\n                 return tangent;\r\n             };\r\n         }\r\n\r\n\r\n         //----------------------------------------------------------------------------\r\n         // Quadtree class. A class for managing a quadtree structure\r\n         // It allows improving speed performance of diagram display and item selection\r\n         //----------------------------------------------------------------------------\r\n\r\n         var Quadtree = {};\r\n\r\n         Quadtree._init = function (x, y, w, h) {\r\n             var quadrant;\r\n\r\n             quadrant = function (x, y, w, h) {\r\n                 var _items, _topLeft, _topRight, _bottomLeft, _bottomRight;\r\n\r\n                 _items = [];\r\n                 _topLeft = null;\r\n                 _topRight = null;\r\n                 _bottomLeft = null;\r\n                 _bottomRight = null;\r\n\r\n                 return {\r\n                     x: x, // left \r\n                     y: y, // right \r\n                     w: w, // width\r\n                     h: h, // height\r\n\r\n                     // Returns the array of items in this quadrant that intersect the given bounds.\r\n                     _getIntersectingItems: function (_array, _bounds) {\r\n                         var topLeft, topRight, bottomLeft, bottomRight, i;\r\n\r\n                         if (_bounds === undefined || _bounds === null || _bounds.width === 0 || _bounds.height === 0)\r\n                             return;\r\n\r\n                         topLeft = new MyRect(x, y, w / 2, h / 2);\r\n                         topRight = new MyRect(x + w / 2, y, w / 2, h / 2);\r\n                         bottomLeft = new MyRect(x, y + h / 2, w / 2, h / 2);\r\n                         bottomRight = new MyRect(x + w / 2, y + h / 2, w / 2, h / 2);\r\n\r\n                         // See if any child quadrants intersects with the rectangle\r\n                         if (topLeft.intersectsWith(_bounds) && _topLeft !== null) {\r\n                             _topLeft._getIntersectingItems(_array, _bounds);\r\n                         }\r\n\r\n                         if (topRight.intersectsWith(_bounds) && _topRight !== null) {\r\n                             _topRight._getIntersectingItems(_array, _bounds);\r\n                         }\r\n\r\n                         if (bottomLeft.intersectsWith(_bounds) && _bottomLeft !== null) {\r\n                             _bottomLeft._getIntersectingItems(_array, _bounds);\r\n                         }\r\n\r\n                         if (bottomRight.intersectsWith(_bounds) && _bottomRight !== null) {\r\n                             _bottomRight._getIntersectingItems(_array, _bounds);\r\n                         }\r\n\r\n                         for (i = 0; i < _items.length; i++) {\r\n                             if (_items[i].bounds.intersectsWith(_bounds)) {\r\n                                 _array.push(_items[i]);\r\n                             }\r\n                         }\r\n                     },\r\n\r\n                     // Adds a new item to the quadrant.\r\n                     // If the quadrant already has subquadrants, the item gets pushed down one level.\r\n                     // If the item does not fit into the subquadrants, it gets saved in the\r\n                     // \"_items\" array.   \r\n                     _insert: function (itm, _bounds) {\r\n                         var topLeft, topRight, bottomLeft, bottomRight, _child, i;\r\n\r\n                         topLeft = new MyRect(x, y, w / 2, h / 2);\r\n                         topRight = new MyRect(x + w / 2, y, w / 2, h / 2);\r\n                         bottomLeft = new MyRect(x, y + h / 2, w / 2, h / 2);\r\n                         bottomRight = new MyRect(x + w / 2, y + h / 2, w / 2, h / 2);\r\n\r\n                         _child = null;\r\n\r\n                         if (topLeft.containsRect(_bounds)) {\r\n                             if (_topLeft === null) {\r\n                                 _topLeft = new quadrant(topLeft.left, topLeft.top, topLeft.width, topLeft.height);\r\n                             }\r\n                             _child = _topLeft;\r\n                         } else if (topRight.containsRect(_bounds)) {\r\n                             if (_topRight === null) {\r\n                                 _topRight = new quadrant(topRight.left, topRight.top, topRight.width, topRight.height);\r\n                             }\r\n                             _child = _topRight;\r\n                         } else if (bottomLeft.containsRect(_bounds)) {\r\n                             if (_bottomLeft === null) {\r\n                                 _bottomLeft = new quadrant(bottomLeft.left, bottomLeft.top, bottomLeft.width, bottomLeft.height);\r\n                             }\r\n                             _child = _bottomLeft;\r\n                         } else if (bottomRight.containsRect(_bounds)) {\r\n                             if (_bottomRight === null) {\r\n                                 _bottomRight = new quadrant(bottomRight.left, bottomRight.top, bottomRight.width, bottomRight.height);\r\n                             }\r\n                             _child = _bottomRight;\r\n                         }\r\n\r\n                         if (_child !== null) {\r\n                             return _child._insert(itm, _bounds);\r\n                         } else {\r\n                             _items.push(itm);\r\n                             itm.quadrant = this;\r\n                         }\r\n                     },\r\n\r\n                     _remove: function (itm) {\r\n                         var idx, i;\r\n\r\n                         idx = -1;\r\n                         if (_items !== null) {\r\n                             for (i = 0; i < _items.length; i++) {\r\n                                 if (_items[i] === itm) {\r\n                                     idx = i;\r\n                                     break;\r\n                                 }\r\n                             }\r\n                             _items.splice(idx, 1);\r\n                         }\r\n                     },\r\n\r\n                     // Clears the quadrant and all its subquadrants.\r\n                     _clear: function () {\r\n                         if (_topLeft !== null) {\r\n                             _topLeft._clear();\r\n                         }\r\n                         if (_topRight !== null) {\r\n                             _topRight._clear();\r\n                         }\r\n                         if (_bottomLeft !== null) {\r\n                             _bottomLeft._clear();\r\n                         }\r\n                         if (_bottomRight !== null) {\r\n                             _bottomRight._clear();\r\n                         }\r\n                         _items.length = 0;\r\n                     },\r\n                 };\r\n             };\r\n\r\n             return {\r\n                 _root: (function () {\r\n                     return quadrant(x, y, w, h);\r\n                 }()),\r\n\r\n                 _insert: function (itm, bounds) {\r\n                     this._root._insert(itm, bounds);\r\n                 },\r\n\r\n                 _remove: function (itm) {\r\n                     if (itm.quadrant !== null) {\r\n                         itm.quadrant._remove(itm);\r\n                     }\r\n                 },\r\n\r\n                 _getItems: function (bounds) {\r\n                     var result = [];\r\n                     this._root._getIntersectingItems(result, bounds);\r\n                     return result;\r\n                 },\r\n\r\n                 _clear: function () {\r\n                     this._root._clear();\r\n                 }\r\n             };\r\n         };\r\n\r\n         //----------------------------------------------------------------\r\n         /** @description Creates a new Node item.\r\n         @class Node class.\r\n         @constructor Returns a Node object.*/\r\n         //----------------------------------------------------------------\r\n\r\n         Node = function (x, y, w, h, text) {\r\n             var _isSelected = false,\r\n                 tsk = null,\r\n                 _links = []; // collection of links coming to the node or leaving it.\r\n\r\n             /** @description The item's type. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. */\r\n             this.kindOfItem = 'Node';\r\n\r\n             /** @description The zorder of the node. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. */\r\n             this.index = -1;\r\n\r\n             this.flow = null;\r\n             this.bounds = null;\r\n             this.quadrant = null;\r\n\r\n             /** @description The x coordinate of the node location. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. You\r\n             should use instead the methods setLeft and getLeft. */\r\n             this.x = x;\r\n\r\n             /** @description The y coordinate of the node location. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. You\r\n             should use instead the methods setTop and getTop. */\r\n             this.y = y;\r\n\r\n             /** @description The width of the node. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. You\r\n             should use instead the methods setWidth and getWidth. */\r\n             this.w = w;\r\n\r\n             /** @description The height of the node. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. You\r\n             should use instead the methods setHeight and getHeight. */\r\n             this.h = h;\r\n\r\n             /** @description Sets or returns the text associated with the node.\r\n             If the item is a node, the text is displayed inside the node.\r\n             It is a multiline display. The text is wrapped automatically inside the node.\r\n             Linefeed and carriage return characters are allowed. */\r\n             this.text = (text !== undefined) ? text : null;\r\n\r\n             /** @description The color used to draw the node */\r\n             this.strokeStyle = '#000';\r\n\r\n             /** @description The color used to fill the node */\r\n             this.fillStyle = '#fff';\r\n\r\n             /** @description The color used to create a gradient with the\r\n             fillStyle color */\r\n             this.gradientFillStyle = '#fff';\r\n\r\n             /** @description The color used to dispaly the text of the node  */\r\n             this.textFillStyle = '#000';\r\n\r\n             /** @description The thickness of the lines used to draw the node\r\n             @default 1 */\r\n             this.lineWidth = 1.0;\r\n\r\n             /** @description ellipse, rectangle, polygon, other */\r\n             this.shapeFamily = 'ellipse';\r\n\r\n             /** @description The set of points defining the node shape if\r\n             if the shapeFamily property is 'polygon'.\r\n             @default null */\r\n             this.polygon = null;\r\n\r\n             /** @description The method used to draw the node shape\r\n             if the shapeFamily property is 'other'\r\n             @default null */\r\n             this.drawShape = null;\r\n\r\n             /** @description The method used to fill the node shape.\r\n             @default null */\r\n             this.fillShape = null;\r\n\r\n             /** @description Sets or gets the list of node pins\r\n             @default null */\r\n             this.pins = null;\r\n\r\n             /** @description Determines whether the item is selectable by\r\n             clicking on it with the mouse or unselectable (readonly or inactive)\r\n             @default true */\r\n             this.isSelectable = true;\r\n\r\n             /** @description Determines whether the node can be horizontally\r\n             resized or not.\r\n             @default true */\r\n             this.isXSizeable = true;\r\n\r\n             /** @description Determines whether the node can be vertically\r\n             resized or not.\r\n             @default true */\r\n             this.isYSizeable = true;\r\n\r\n             /** @description Determines whether the node can be horizontally\r\n             moved or not\r\n             @default true */\r\n             this.isXMoveable = true;\r\n\r\n             /** @description Determines whether the node can be vertically moved or not\r\n             @default true */\r\n             this.isYMoveable = true;\r\n\r\n             /** @description Determines whether the node can be vertically moved or not\r\n             @default true */\r\n             this.isOutLinkable = true;\r\n\r\n             /** @description Determines whether the node accept incoming links\r\n             @default true */\r\n             this.isInLinkable = true;\r\n\r\n             /** @description Determines if a context handle is displayed when the \r\n             node is selected\r\n             @default false */\r\n             this.isContextHandle = false;\r\n\r\n             /** @description Determines whether a shadow is displayed for the node\r\n             @default false */\r\n             this.isShadowed = false;\r\n\r\n             /** @description The image displayed in the node */\r\n             this.image = null;\r\n\r\n             /** @description Returns/sets the margins of the text in the node. */\r\n             this.textMargin = {\r\n                 left: 0,\r\n                 top: 0,\r\n                 right: 0,\r\n                 bottom: 0\r\n             };\r\n\r\n             /** @description Returns/sets the margins of the image in the node. */\r\n             this.imageMargin = {\r\n                 left: 0,\r\n                 top: 0,\r\n                 right: 0,\r\n                 bottom: 0\r\n             };\r\n\r\n             /** @description Used to specify the position of the text in the node.\r\n             leftTop leftMiddle leftBottom rightTop rightMiddle\r\n             rightBottom centerTop centerMiddle centerBottom\r\n             @default centerMiddle */\r\n             this.textPosition = 'centerMiddle';\r\n\r\n             /** @description Used to specify the position of the image in the node.\r\n             leftTop leftMiddle leftBottom rightTop rightMiddle\r\n             rightBottom centerTop centerMiddle centerBottom\r\n             @default centerMiddle */\r\n             this.imagePosition = 'centerMiddle';\r\n\r\n             /** @description The font used to display the text of the node */\r\n             this.font = '12px Arial';\r\n\r\n             /** @description The height of a line of the text of the node */\r\n             this.textLineHeight = null;\r\n\r\n\r\n             /* Node methods---------------------------------------------------------*/\r\n\r\n             /** @description Determines if the node is selected or not */\r\n             this.getIsSelected = function () {\r\n                 return _isSelected;\r\n             };\r\n\r\n             /** @description Selects or unselects the node */\r\n             this.setIsSelected = function (sel) {\r\n                 if (sel !== _isSelected) {\r\n                     _isSelected = sel;\r\n                     selectItem(this, selectAllFlag);\r\n                 }\r\n             };\r\n\r\n             /** @description Returns the list of links attached to this node.\r\n                If a link is reflexive, it is counted two times. So if a node\r\n                has one reflexive link, this list will contain this reflexive\r\n                two times.\r\n             */\r\n             this.getLinks = function () {\r\n                 return _links;\r\n             };\r\n\r\n             /** @description Gets the x coordinate of the node location */\r\n             this.getLeft = function () {\r\n                 return this.x;\r\n             };\r\n\r\n             /** @description Sets the x coordinate of the node location */\r\n             this.setLeft = function (x) {\r\n                 var rc = getNodeRect(this);\r\n                 rc.left = x;\r\n                 setNodeRect(this, rc);\r\n             };\r\n\r\n             /** @description Gets the y coordinate of the node location */\r\n             this.getTop = function () {\r\n                 return this.y;\r\n             };\r\n\r\n             /** @description Sets the y coordinate of the node location */\r\n             this.setTop = function (y) {\r\n                 var rc = getNodeRect(this);\r\n                 rc.top = y;\r\n                 setNodeRect(this, rc);\r\n             };\r\n\r\n             /** @description Gets the width of the node */\r\n             this.getWidth = function () {\r\n                 return this.w;\r\n             };\r\n\r\n             /** @description Sets the width of the node  */\r\n             this.setWidth = function (w) {\r\n                 var rc = getNodeRect(this);\r\n                 rc.width = w;\r\n                 setNodeRect(this, rc);\r\n             };\r\n\r\n             /** @description Gets the height of the node */\r\n             this.getHeight = function () {\r\n                 return this.h;\r\n             };\r\n\r\n             /** @description Sets the height of the node */\r\n             this.setHeight = function (h) {\r\n                 var rc = getNodeRect(this);\r\n                 rc.height = h;\r\n                 setNodeRect(this, rc);\r\n             };\r\n\r\n             /** @description Cause the node to be updated. */\r\n             this.refresh = function () {\r\n                 invalidateNode(this);\r\n                 updateDrawing();\r\n             };\r\n\r\n             /** @description Clone the node */\r\n             this.clone = function () {\r\n                 var _node = new Node(this.x, this.y, this.w, this.h, this.text);\r\n                 copyNodeProperties(_node, this);\r\n                 return _node;\r\n             };\r\n         };\r\n\r\n         //----------------------------------------------------------------\r\n         /** @description Creates a new Link item.\r\n         @class Link class\r\n         @constructor Returns a Link object.*/\r\n         //----------------------------------------------------------------\r\n\r\n         Link = function (org, dst, text, pinOrg, pinDst) {\r\n             var _isSelected = false,\r\n                 tsk = null;\r\n\r\n             /** @description The item's type. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. */\r\n             this.kindOfItem = 'Link';\r\n\r\n             /** @description The zorder of the node. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. */\r\n             this.index = -1;\r\n\r\n             this.flow = null;\r\n             this.bounds = null;\r\n             this.quadrant = null;\r\n\r\n             /** @description The origin node of the link. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. \r\n             You should use instead the getOrg and setOrg methods. */\r\n             this.org = org;\r\n\r\n             /** @description The destination node of the link. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. \r\n             You should use instead the getDst and setDst methods. */\r\n             this.dst = dst;\r\n\r\n             /** @description The index of the origin pin of the link. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. \r\n             You should use instead the getPinOrg and setPinOrg methods. */\r\n             this.pinOrg = (pinOrg === undefined) ? null : pinOrg;\r\n\r\n             /** @description The index of the destination pin of the link. Don't use this\r\n             property which is only provided for the AddFlow infrastructure. \r\n             You should use instead the getPinDst and setPinDst methods. */\r\n             this.pinDst = (pinDst === undefined) ? null : pinDst;\r\n\r\n             /** @description The font used to display the text of the link */\r\n             this.font = '12px Arial';\r\n\r\n             /** @description Sets or returns the text associated with the link. */\r\n             this.text = (text !== undefined) ? text : null;\r\n\r\n             /** @description The color used to draw the link */\r\n             this.strokeStyle = '#000';\r\n\r\n             /** @description The color used to fill the link */\r\n             this.fillStyle = '#fff';\r\n\r\n             /** @description The color used to dispaly the text of the link */\r\n             this.textFillStyle = '#000';\r\n\r\n             /** @description The thickness of the lines used to draw the node\r\n             @default 1 */\r\n             this.lineWidth = 1.0;\r\n\r\n             /** @description Determines whether the link is stretchable or not.\r\n              When a link is not stretchable, the user cannot interactively stretch it\r\n              with the mouse.\r\n              @default true */\r\n             this.isStretchable = true;\r\n\r\n             /** @description Determines whether the item is selectable by\r\n             clicking on it with the mouse or unselectable (readonly or inactive)\r\n             @default true */\r\n             this.isSelectable = true;\r\n\r\n             /** @description Determines if a context handle is displayed when the \r\n             link is selected\r\n             @default false */\r\n             this.isContextHandle = false;\r\n\r\n             /** @description Determines whether a shadow is displayed for the link\r\n             @default false */\r\n             this.isShadowed = false;\r\n\r\n             /** @description Determines whether the first link point can be changed.\r\n             Don't use this property which is only provided for the AddFlow \r\n             infrastructure. You should use instead the methods getIsOrgPointAdjustable \r\n             and setIsOrgPointAdjustable\r\n             @default false */\r\n             this.isOrgPointAdjustable = false;\r\n\r\n             /** @description Determines whether the last link point can be changed.\r\n             Don't use this property which is only provided for the AddFlow \r\n             infrastructure. You should use instead the methods getIsDstPointAdjustable \r\n             and setIsDstPointAdjustable\r\n             @default false */\r\n             this.isDstPointAdjustable = false;\r\n\r\n             /** @description Determines the size of the rounded corner at the\r\n             intersection point of 2 segments. This property will have not\r\n             any effect if the style property of the link is bezier.\r\n             @default 0  */\r\n             this.roundedCornerSize = 0;\r\n\r\n             /** @description Determines whether the text of the link is aligned with\r\n             the link.\r\n             @default false */\r\n             this.isOrientedText = false;\r\n\r\n             /** @description Determines whether the background of the text of the link\r\n             is opaque.\r\n             @default false */\r\n             this.isOpaque = false;\r\n\r\n             /** @description The font used to display the text of the node */\r\n             this.font = '12px Arial';\r\n\r\n             /** @description Returns/sets the shape of the link\r\n             destination arrow head */\r\n             this.arrowDst = _arrow;\r\n\r\n             /** @description Returns/sets the shape of the link\r\n             origin arrow head */\r\n             this.arrowOrg = null;\r\n\r\n             /** @description Returns/sets the line style\r\n             (polyline, bezier, spline, database, orthogonal) Don't use this\r\n             property which is only provided for the AddFlow infrastructure. \r\n             You should use instead the methods getLineStyle and setLineStyle\r\n             @default 'polyline' */\r\n             this.lineStyle = 'polyline';\r\n\r\n             /** The margin used to display orthogonal links */\r\n             this.orthoMargin = 30;\r\n\r\n             /** @description Don't use this\r\n             property which is only provided for the AddFlow infrastructure. */\r\n             this.firstSegmentHorizontal = false;\r\n\r\n             /** @description The collection of link points.\r\n             Don't use this property which is only provided for the\r\n             AddFlow infrastructure. To manipulate the collection of link points,\r\n             you should use instead the methods addPoint, removePoint, clearPoints,\r\n             countPoints, getPoint and setPoint.\r\n             @see Lassalle.Flow-Link#addPoint\r\n             */\r\n             this.points = [];\r\n\r\n\r\n             /* Link methods---------------------------------------------------------*/\r\n\r\n             /** @description Determines if the link is selected or not */\r\n             this.getIsSelected = function () {\r\n                 return _isSelected;\r\n             };\r\n\r\n             /** @description Selects or unselects the link */\r\n             this.setIsSelected = function (sel) {\r\n                 if (sel !== _isSelected) {\r\n                     _isSelected = sel;\r\n                     selectItem(this, selectAllFlag);\r\n                 }\r\n             };\r\n\r\n             /** @description Returns the origin node of the link */\r\n             this.getOrg = function () {\r\n                 return this.org;\r\n             };\r\n\r\n             /** @description Sets a new origin node for the link */\r\n             this.setOrg = function (org) {\r\n                 setLinkOrg(this, org);\r\n             };\r\n\r\n             /** @description Returns the destination node of the link */\r\n             this.getDst = function () {\r\n                 return this.dst;\r\n             };\r\n\r\n             /** @description Sets a new destination node for the link */\r\n             this.setDst = function (dst) {\r\n                 setLinkDst(this, dst);\r\n             };\r\n\r\n             /** @description Returns the pin index of origin node of the link */\r\n             this.getPinOrg = function () {\r\n                 return this.pinOrg;\r\n             };\r\n\r\n             /** @description Sets the pin index of the origin node for the link */\r\n             this.setPinOrg = function (pinOrg) {\r\n                 setLinkPinOrg(this, pinOrg);\r\n             };\r\n\r\n             /** @description Returns the pin index of destination node of the link */\r\n             this.getPinDst = function () {\r\n                 return this.pinDst;\r\n             };\r\n\r\n             /** @description Sets the pin index of the destination node for the link */\r\n             this.setPinDst = function (pinDst) {\r\n                 setLinkPinDst(this, pinDst);\r\n             };\r\n\r\n             /** @description Cause the link to be updated. */\r\n             this.refresh = function () {\r\n                 invalidateLink(this);\r\n                 updateDrawing();\r\n             };\r\n\r\n             /** @description Clone the link */\r\n             this.clone = function () {\r\n                 var _link =\r\n                     new Link(this.org, this.dst, this.text, this.pinOrg, this.pinDst);\r\n                 copyLinkProperties(_link, this);\r\n                 return _link;\r\n             };\r\n\r\n             /** @description Get the link lineStyle\r\n             (polyline, bezier, spline, database, orthogonal) */\r\n             this.getLineStyle = function () {\r\n                 return this.lineStyle;\r\n             };\r\n\r\n             /** @description Set the link lineStyle\r\n             (polyline, bezier, spline, database, orthogonal) */\r\n             this.setLineStyle = function (lineStyle) {\r\n                 setLinkLineStyle(this, lineStyle);\r\n             };\r\n\r\n             /** @description Get the link isOrgPointAdjustable property value */\r\n             this.getIsOrgPointAdjustable = function () {\r\n                 return this.isOrgPointAdjustable;\r\n             };\r\n\r\n             /** @description Set the link isOrgPointAdjustable property value */\r\n             this.setIsOrgPointAdjustable = function (adjustable) {\r\n                 setLinkIsOrgPointAdjustable(this, adjustable);\r\n             };\r\n\r\n             /** @description Get the link isDstPointAdjustable property value */\r\n             this.getIsDstPointAdjustable = function () {\r\n                 return this.isDstPointAdjustable;\r\n             };\r\n\r\n             /** @description Set the link isDstPointAdjustable property value */\r\n             this.setIsDstPointAdjustable = function (adjustable) {\r\n                 setLinkIsDstPointAdjustable(this, adjustable);\r\n             };\r\n\r\n             /** @description Add a point to the collection of points of a link.\r\n             This method will work only if the link lineStyle allows adding points to the\r\n             link. For instance, it will not work if the link has a bezier lineStyle. */\r\n             this.addPoint = function (x, y) {\r\n                 addLinkPoint(this, x, y);\r\n             };\r\n\r\n             /** @description Removes the point at the specified index from the collection\r\n             of points of the link.\r\n             This method will work only if the link lineStyle allows removing points to the\r\n             link. For instance, it will not work if the link has a bezier lineStyle. */\r\n             this.removePoint = function (index) {\r\n                 removeLinkPoint(this, index);\r\n             };\r\n\r\n             /** @description Clears the collection of points of the link, removing all\r\n             points except the first and the last since a link points collection is never\r\n             empty and contains at least 2 points.\r\n             This method will work only if the link lineStyle allows removing points to the\r\n             link. For instance, it will not work if the link has a bezier lineStyle. */\r\n             this.clearPoints = function () {\r\n                 clearLinkPoints(this);\r\n             };\r\n\r\n             /** @description Gets the total number of points in the collection of points\r\n             of a link. */\r\n             this.countPoints = function () {\r\n                 return this.points.length;\r\n             };\r\n\r\n             /** @description Returns the point at the specified index.*/\r\n             this.getPoint = function (index) {\r\n                 return getLinkPoint(this, index);\r\n             };\r\n\r\n             /** @description Sets a point at the specified index. */\r\n             this.setPoint = function (x, y, index) {\r\n                 setLinkPoint(this, x, y, index);\r\n             };\r\n         };\r\n\r\n         //----------------------------------------------------------------\r\n         /** @description The generic class used to manage the undo/redo of \r\n         AddFlow actions. All class that you will create to manage actions\r\n         should derive from this class.\r\n         @class Task class\r\n         @ignore */\r\n         //----------------------------------------------------------------\r\n         Task = function () {\r\n             this._currentItem = null;\r\n             this.group = -1;\r\n\r\n             /** AF_del AF_dst AF_linkAdd AF_linkRemove AF_linkStretch\r\n             AF_moveSelectedNodes AF_nodeAdd  AF_nodeMoveAndSize AF_nodeRemove\r\n             AF_nodeResize AF_none AF_org AF_points AF_resizeSelectedNodes\r\n             AF_rotateSelectedNodes AF_zOrder */\r\n             this.groupCode = 'AF_none';\r\n\r\n             /** AF_del AF_dst AF_linkAdd AF_linkRemove AF_linkStretch\r\n             AF_moveSelectedNodes AF_nodeAdd  AF_nodeMoveAndSize AF_nodeRemove\r\n             AF_nodeResize AF_none AF_org AF_points AF_resizeSelectedNodes\r\n             AF_rotateSelectedNodes AF_zOrder */\r\n             this.code = 'AF_none';\r\n         };\r\n\r\n\r\n         // This class is used to manage the undo/redo of a node\r\n         // move or resize action. It derives from the Task class.\r\n         NodeLayoutTask = function (flow, itm, oldrc) {\r\n             Task.call(this);\r\n\r\n             var div, hScrollOffset, vScrollOffset, tsk;\r\n\r\n             div = flow.canvas.parentNode;\r\n             hScrollOffset = 0;\r\n             vScrollOffset = 0;\r\n             tsk = this;\r\n             tsk.code = 'AF_nodeMoveAndSize';\r\n             tsk._currentItem = itm;\r\n\r\n             if (div !== null && div !== undefined) {\r\n                 hScrollOffset = div.scrollLeft;\r\n                 vScrollOffset = div.scrollTop;\r\n             }\r\n\r\n             tsk.redo = function () {\r\n                 tsk.undo();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 var rc, hScrollOffset2, vScrollOffset2;\r\n\r\n                 hScrollOffset2 = 0;\r\n                 vScrollOffset2 = 0;\r\n                 if (div !== null && div !== undefined) {\r\n                     hScrollOffset2 = div.scrollLeft;\r\n                     vScrollOffset2 = div.scrollTop;\r\n                 }\r\n\r\n                 rc = getNodeRect(tsk._currentItem);\r\n                 setNodeRect(tsk._currentItem, oldrc);\r\n\r\n                 // Draw node and, if it is selected, adjust the position of its handles\r\n                 invalidateNode(tsk._currentItem);\r\n\r\n                 // Adjust the position of each link of the node\r\n                 adjustNodeLinks(tsk._currentItem);\r\n\r\n                 flow.refresh();\r\n\r\n                 oldrc = rc;\r\n\r\n                 if (div !== null && div !== undefined) {\r\n                     div.scrollLeft = hScrollOffset;\r\n                     div.scrollTop = vScrollOffset;\r\n                     hScrollOffset = hScrollOffset2;\r\n                     vScrollOffset = vScrollOffset2;\r\n                 }\r\n             };\r\n         };\r\n\r\n         // This class is used to manage the undo/redo of a node\r\n         // creation action. It derives from the Task class.\r\n         AddNodeTask = function (flow, _node) {\r\n             var tsk, index;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             tsk._currentItem = _node;\r\n             tsk.code = 'AF_nodeAdd';\r\n\r\n             tsk.redo = function () {\r\n                 _items.push(_node);\r\n                 _node.index = _items.length - 1;\r\n                 flow.refresh();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 if (_node.getIsSelected()) {\r\n                     _node.setIsSelected(false);\r\n                 }\r\n                 invalidateNode(_node);\r\n                 index = _node.index;\r\n                 removeItemByIndex(index);\r\n                 updateDiagramSize();\r\n                 flow.refresh();\r\n             };\r\n         };\r\n\r\n         // This class is used to manage the undo/redo of a node\r\n         // remove action. It derives from the Task class.\r\n         RemoveNodeTask = function (flow, _node) {\r\n             var tsk, index;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             tsk._currentItem = _node;\r\n             tsk.code = 'AF_nodeRemove';\r\n\r\n             tsk.redo = function () {\r\n                 invalidateNode(_node);\r\n                 index = _node.index;\r\n                 removeItemByIndex(index);\r\n                 updateDiagramSize();\r\n                 flow.refresh();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 _items.push(_node);\r\n                 _node.index = _items.length - 1;\r\n                 invalidateNode(_node);\r\n                 flow.refresh();\r\n             };\r\n         };\r\n\r\n         // This class is used to manage the undo/redo of a link\r\n         // creation action. It derives from the Task class.\r\n         AddLinkTask = function (flow, _link) {\r\n             var tsk, index;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             tsk._currentItem = _link;\r\n             tsk.code = 'AF_linkAdd';\r\n\r\n             tsk.redo = function () {\r\n                 var org, dst;\r\n\r\n                 _items.push(_link);\r\n                 _link.index = _items.length - 1;\r\n                 invalidateLink(_link);\r\n                 updateDiagramSizeWithRect(getLinkRect(_link));\r\n                 org = _link.org;\r\n                 dst = _link.dst;\r\n                 getNodeLinks(org).push(_link);\r\n                 getNodeLinks(dst).push(_link);\r\n                 flow.refresh();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 if (_link.getIsSelected()) {\r\n                     _link.setIsSelected(false);\r\n                 }\r\n                 // Delete the link\r\n                 index = _link.index;\r\n                 removeItemByIndex(index);\r\n                 _link.setOrg(null);\r\n                 _link.setDst(null);\r\n                 flow.refresh();\r\n             };\r\n         };\r\n\r\n         // This class is used to manage the undo/redo of a link\r\n         // remove action. It derives from the Task class.\r\n         RemoveLinkTask = function (flow, _link) {\r\n             var tsk, index;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             tsk._currentItem = _link;\r\n             tsk.code = 'AF_linkRemove';\r\n\r\n             tsk.redo = function () {\r\n                 if (_link.getIsSelected()) {\r\n                     _link.setIsSelected(false);\r\n                 }\r\n                 // Delete the link\r\n                 index = _link.index;\r\n                 removeItemByIndex(index);\r\n                 _link.setOrg(null);\r\n                 _link.setDst(null);\r\n                 flow.refresh();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 var org, dst;\r\n\r\n                 _items.push(_link);\r\n                 _link.index = _items.length - 1;\r\n                 invalidateLink(_link);\r\n                 updateDiagramSizeWithRect(getLinkRect(_link));\r\n                 org = _link.org;\r\n                 dst = _link.dst;\r\n                 org.getLinks().push(_link);\r\n                 dst.getLinks().push(_link);\r\n                 flow.refresh();\r\n             };\r\n         };\r\n\r\n         // This class is used to manage the undo/redo of a link\r\n         // stretching action. It derives from the Task class.\r\n         StretchLinkTask = function (flow, _link) {\r\n             Task.call(this);\r\n\r\n             var tsk, oldPoints, oldIsOrgPointAdjustable, oldIsDstPointAdjustable;\r\n\r\n             tsk = this;\r\n             oldPoints = _link.points.slice();\r\n             oldIsOrgPointAdjustable = _link.isOrgPointAdjustable;\r\n             oldIsDstPointAdjustable = _link.isDstPointAdjustable;\r\n\r\n             tsk._currentItem = _link;\r\n             tsk.code = 'AF_linkStretch';\r\n\r\n             tsk.redo = function () {\r\n                 tsk.undo();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 var inc, rc, _points, isOrgPointAdjustable, isDstPointAdjustable;\r\n\r\n                 inc = _link.lineWidth + flow.handleSize;\r\n                 rc = getLinkRect(_link);\r\n                 rc = rc.inflate(inc, inc);\r\n\r\n                 // Points\r\n                 _points = _link.points.slice();\r\n                 _link.points.splice(0, _link.points.length);\r\n                 _link.points = _link.points.concat(oldPoints);\r\n                 oldPoints = _points;\r\n\r\n                 // isOrgPointAdjustable and isDst(PointAdjustable properties\r\n                 isOrgPointAdjustable = _link.isOrgPointAdjustable;\r\n                 isDstPointAdjustable = _link.isDstPointAdjustable;\r\n                 _link.setIsOrgPointAdjustable(oldIsOrgPointAdjustable);\r\n                 _link.setIsDstPointAdjustable(oldIsDstPointAdjustable);\r\n                 oldIsOrgPointAdjustable = isOrgPointAdjustable;\r\n                 oldIsDstPointAdjustable = isDstPointAdjustable;\r\n\r\n                 invalidate(rc);\r\n                 invalidateLink(_link);\r\n\r\n                 flow.refresh();\r\n             };\r\n         };\r\n\r\n         // This class is used to manage the undo/redo of a link\r\n         // origin change action. It derives from the Task class.\r\n         SetLinkOrgTask = function (flow, _link, oldOrg) {\r\n             var tsk, org;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             tsk._currentItem = _link;\r\n             tsk.code = 'AF_org';\r\n\r\n             tsk.redo = function () {\r\n                 tsk.undo();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 org = tsk._currentItem.org;\r\n                 tsk._currentItem.setOrg(oldOrg);\r\n                 oldOrg = org;\r\n                 flow.refresh();\r\n             };\r\n         };\r\n\r\n\r\n         // This class is used to manage the undo/redo of a link\r\n         // destination change action. It derives from the Task class.\r\n         SetLinkDstTask = function (flow, _link, oldDst) {\r\n             var tsk, dst;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             tsk._currentItem = _link;\r\n             tsk.code = 'AF_dst';\r\n\r\n             tsk.redo = function () {\r\n                 tsk.undo();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 dst = tsk._currentItem.dst;\r\n                 tsk._currentItem.setDst(oldDst);\r\n                 oldDst = dst;\r\n                 flow.refresh();\r\n             };\r\n         };\r\n\r\n         // This class is used to manage the undo/redo of a link\r\n         // pin origin change action. It derives from the Task class.\r\n         SetLinkPinOrgTask = function (flow, _link, oldPinOrg) {\r\n             var tsk, pinOrg, oldPoints;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             tsk._currentItem = _link;\r\n             tsk.code = 'AF_pinOrg';\r\n             oldPoints = _link.points.slice();\r\n\r\n             tsk.redo = function () {\r\n                 tsk.undo();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 pinOrg = tsk._currentItem.pinOrg;\r\n                 tsk._currentItem.setPinDst(oldPinOrg);\r\n                 oldPinOrg = pinOrg;\r\n\r\n                 // Points\r\n                 var _points = _link.points.slice();\r\n                 _link.points.splice(0, _link.points.length);\r\n                 _link.points = _link.points.concat(oldPoints);\r\n                 oldPoints = _points;\r\n\r\n                 flow.refresh();\r\n             };\r\n         }\r\n\r\n         // This class is used to manage the undo/redo of a link\r\n         // pin destination change action. It derives from the Task class.\r\n         SetLinkPinDstTask = function (flow, _link, oldPinDst) {\r\n             var tsk, pinDst, oldPoints;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             tsk._currentItem = _link;\r\n             tsk.code = 'AF_pinDst';\r\n             oldPoints = _link.points.slice();\r\n\r\n             tsk.redo = function () {\r\n                 tsk.undo();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 pinDst = tsk._currentItem.pinDst;\r\n                 tsk._currentItem.setPinDst(oldPinDst);\r\n                 oldPinDst = pinDst;\r\n\r\n                 // Points\r\n                 var _points = _link.points.slice();\r\n                 _link.points.splice(0, _link.points.length);\r\n                 _link.points = _link.points.concat(oldPoints);\r\n                 oldPoints = _points;\r\n\r\n                 flow.refresh();\r\n             };\r\n         }\r\n\r\n         // This class is used to manage the undo/redo of an item zorder\r\n         // change action. It derives from the Task class.\r\n         ZOrderTask = function (flow) {\r\n             var tsk, olditems;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             olditems = _items.slice();\r\n             tsk.code = 'AF_zOrder';\r\n\r\n             tsk.redo = function () {\r\n                 tsk.undo();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 var i, curitems;\r\n\r\n                 curitems = _items.slice();\r\n                 _items = olditems.slice();\r\n                 olditems = curitems;\r\n                 flow.refresh();\r\n\r\n                 // Update indices\r\n                 for (i = 0; i < _items.length; i++) {\r\n                     _items[i].index = i;\r\n                 }\r\n             };\r\n         };\r\n\r\n         // This class is used to manage the undo/redo of link lineStyle\r\n         // change action. It derives from the Task class.\r\n         LineStyleTask = function (flow, _link, oldLineStyle) {\r\n             var tsk, oldPoints;\r\n\r\n             Task.call(this);\r\n\r\n             tsk = this;\r\n             oldPoints = _link.points.slice();\r\n\r\n             tsk._currentItem = _link;\r\n             tsk.code = 'AF_lineStyle';\r\n\r\n             tsk.redo = function () {\r\n                 tsk.undo();\r\n             };\r\n\r\n             tsk.undo = function () {\r\n                 var inc, rc, _points, lineStyle;\r\n\r\n                 inc = tsk._currentItem.lineWidth + flow.handleSize;\r\n                 rc = getLinkRect(tsk._currentItem);\r\n                 rc = rc.inflate(inc, inc);\r\n\r\n                 lineStyle = tsk._currentItem.lineStyle;\r\n                 _points = tsk._currentItem.points.slice();\r\n\r\n                 tsk._currentItem.lineStyle = oldLineStyle;\r\n\r\n                 tsk._currentItem.points.splice(0, tsk._currentItem.points.length);\r\n                 tsk._currentItem.points = _link.points.concat(oldPoints);\r\n\r\n                 oldLineStyle = lineStyle;\r\n                 oldPoints = _points;\r\n\r\n                 invalidate(rc);\r\n                 tsk._currentItem.refresh();\r\n             };\r\n         };\r\n\r\n         //----------------------------------------------------------------\r\n         /** @description The object managing the list of tasks and allowing undo/redo.\r\n         @class TaskManager class.\r\n         @constructor Returns a TaskManager object.*/\r\n         //----------------------------------------------------------------\r\n\r\n         var TaskManager = function () {\r\n             var tasks = [],\r\n                 index = -1,\r\n                 currentGroup = -1,\r\n                 groupCode = 'AF_none',\r\n                 inActionGroupExternal = false,\r\n                 inActionGroupInternal = false,\r\n                 undoRedoing = false,\r\n                 tm = this;\r\n\r\n             /** @description Determines whether undo/redo is allowed.\r\n             @default true\r\n             */\r\n             this.canUndoRedo = true;\r\n\r\n             /** @description Returns/sets the number of undo commands that can\r\n             be performed.\r\n             UndoLimit limits the size of the Undo buffer. Therefore, you can use\r\n             this property to save memory.\r\n             Setting UndoLimit to zero means that the size of the Undo buffer\r\n             is unlimited.\r\n             @default 0\r\n             */\r\n             this.undoLimit = 0;\r\n\r\n             /** @description Determines whether the next actions are recorded in the\r\n             task manager.\r\n             @default true\r\n             */\r\n             this.skipUndo = false;\r\n\r\n             /** @description Returns the code of the next undoable action. */\r\n             this.undoCode = function () {\r\n                 return tm._canUndo() ? _getCode(tasks[index]) : 'AF_none';\r\n             };\r\n\r\n             /** @description Returns the code of the next redoable action. */\r\n             this.redoCode = function () {\r\n                 return tm._canRedo() ? _getCode(tasks[index + 1]) : 'AF_none';\r\n             };\r\n\r\n             /** @description Returns the item involved in the next undoable action. */\r\n             this.undoItem = function () {\r\n                 return tm._canUndo() ? tasks[index]._currentItem : null;\r\n             };\r\n\r\n             /** @description Returns the item involved in the next redoable action. */\r\n             this.redoItem = function () {\r\n                 return tm._canredo() ? tasks[index + 1]._currentItem : null;\r\n             };\r\n\r\n             /** @description Indicates if there is an action that can be undone.\r\n             Typically, this method allows to enable or disable the 'Undo'\r\n             menu item of your application. */\r\n             this.canUndo = function () {\r\n                 return tm._canUndo();\r\n             };\r\n\r\n             /** @description Indicates if there is an action that can be redone.\r\n             Typically, this method allows to enable or disable the 'Redo'\r\n             menu item of your application. */\r\n             this.canRedo = function () {\r\n                 return tm._canRedo();\r\n             };\r\n\r\n             /** @description Undo the last action performed in flow. */\r\n             this.undo = function () {\r\n                 _undo();\r\n             };\r\n\r\n             /** @description Redo, if possible, the last action. */\r\n             this.redo = function () {\r\n                 _redo();\r\n             };\r\n\r\n             /** @description Start a group of actions that can be undone in one time.\r\n             'code' is a string which must not starts with 'AF_' because this\r\n             prefix is reserved for AddFlow internal use. It allows to identify a group\r\n             of action. It is returned by the undoCode and redoCode properties.\r\n             For instance, if, in your application, the user can open a dialog box\r\n             allowing to change the image of the node, its color and its Text property,\r\n             you will probably allow that user to undo these 3 basic actions in one time.\r\n             To do that, add a call to beginAction before invoking the dialog box and a\r\n             call to endAction just after the dialog box termination. */\r\n             this.beginAction = function (code) {\r\n                 _beginAction(code);\r\n             };\r\n\r\n             /** @description Terminate a group of actions that can be\r\n             undone in one time. */\r\n             this.endAction = function () {\r\n                 _endAction();\r\n             };\r\n\r\n             /** @description Clears the undo/redo buffer. */\r\n             this.clear = function () {\r\n                 _clear();\r\n             };\r\n\r\n             /** @description Add the following actions in the last group of actions.\r\n             This 'add' mode will terminate when calling EndAction. */\r\n             this.addToLastAction = function () {\r\n                 _addToLastAction();\r\n             };\r\n\r\n             /** Submit a task (or action) that can be undone and redone.\r\n             'task' is a task to include in the undo list */\r\n             this.submitTask = function (task) {\r\n                 tm._submitTask(task);\r\n             };\r\n\r\n             /** @description Remove the last task that has been added in the\r\n             undo/redo buffer. */\r\n             this.removeLastTask = function () {\r\n                 _removeLastTask();\r\n             };\r\n\r\n             this.taskCount = function () {\r\n                 return index + 1;\r\n             };\r\n\r\n             this.undoAllowed = function () {\r\n                 return tm.canUndoRedo && !tm.skipUndo && !undoRedoing;\r\n             };\r\n\r\n             this._canUndo = function () {\r\n                 return tm.canUndoRedo ? (index >= 0) : false;\r\n             };\r\n\r\n             this._canRedo = function () {\r\n                 return tm.canUndoRedo ? (index < tasks.length - 1) : false;\r\n             };\r\n\r\n             this._beginActionInternal = function (code) {\r\n                 if (!inActionGroupExternal) {\r\n                     inActionGroupInternal = true;\r\n                     currentGroup++;\r\n                     groupCode = code;\r\n                 }\r\n             };\r\n\r\n             this._endActionInternal = function () {\r\n                 if (!inActionGroupExternal) {\r\n                     inActionGroupInternal = false;\r\n                     groupCode = 'AF_none';\r\n                 }\r\n             };\r\n\r\n             this.isCurrentActionGroup = function () {\r\n                 return inActionGroupInternal || inActionGroupExternal;\r\n             };\r\n\r\n             this._submitTask = function (task) {\r\n                 var g;\r\n\r\n                 if (task === null) {\r\n                     return;\r\n                 }\r\n\r\n                 // Remove all the tasks following the added task,\r\n                 // add the task in the undo/redo list and increment the task index\r\n                 index++;\r\n                 tasks.splice(index, tasks.length - 1 - index, task);\r\n\r\n                 // Increment the group number if the task is not already in a group.\r\n                 if (!tm.isCurrentActionGroup()) {\r\n                     currentGroup++;\r\n                 }\r\n\r\n                 task.group = currentGroup;\r\n                 task.groupCode = groupCode;\r\n\r\n                 // Case of limited undo/redo buffer\r\n                 if (tm.undoLimit > 0) {\r\n                     // If this limit is reached, remove the first task\r\n                     if (index >= tm.undoLimit) {\r\n                         g = tasks[0].group;\r\n                         if (g !== currentGroup) {\r\n                             tasks.spice(0, 1);\r\n                             index--;\r\n\r\n                             // If the removed task is part of a group, remove the group.\r\n                             while (index > 0) {\r\n                                 if (tasks[0].group === g) {\r\n                                     tasks.spice(0, 1);\r\n                                     index--;\r\n                                 } else {\r\n                                     break;\r\n                                 }\r\n                             }\r\n                         }\r\n                     }\r\n                 }\r\n             };\r\n\r\n             function _removeLastTask() {\r\n                 _undo();\r\n                 while (index + 1 < tasks.length) {\r\n                     tasks.splice(tasks.length - 1, 1);\r\n                 }\r\n             }\r\n\r\n             function _undo() {\r\n                 var task, task2;\r\n\r\n                 if (!tm.canUndoRedo) {\r\n                     return;\r\n                 }\r\n                 if (tm._canUndo()) {\r\n                     undoRedoing = true;\r\n\r\n                     _beginUpdate();\r\n\r\n                     // Undo the current entry\r\n                     task = tasks[index];\r\n                     index--;\r\n                     task.undo();\r\n                     for (;;) {\r\n                         if (tm._canUndo()) {\r\n                             task2 = tasks[index];\r\n                             if (task2.group === task.group) {\r\n                                 index--;\r\n                                 task2.undo();\r\n                             } else {\r\n                                 break;\r\n                             }\r\n                         } else {\r\n                             break;\r\n                         }\r\n                     }\r\n                     _endUpdate();\r\n                     undoRedoing = false;\r\n                 }\r\n             }\r\n\r\n             function _redo() {\r\n                 var task, task2;\r\n\r\n                 if (!tm.canUndoRedo) {\r\n                     return;\r\n                 }\r\n                 if (tm._canRedo()) {\r\n                     undoRedoing = true;\r\n\r\n                     _beginUpdate();\r\n\r\n                     // Advance to the next entry and execute it.\r\n                     index++;\r\n                     task = tasks[index];\r\n                     task.redo();\r\n                     for (;;) {\r\n                         if (tm._canRedo()) {\r\n                             index++;\r\n                             task2 = tasks[index];\r\n                             if (task2.group === task.group) {\r\n                                 task2.redo();\r\n                             } else {\r\n                                 index--;\r\n                                 break;\r\n                             }\r\n                         } else {\r\n                             break;\r\n                         }\r\n                     }\r\n                     _endUpdate();\r\n                     undoRedoing = false;\r\n                 }\r\n             }\r\n\r\n             function _beginAction(code) {\r\n                 // First we verified that the action code does not starts with 'AF_'\r\n                 // This prefix is reserved for AddFlow internal use.\r\n                 if (code.length >= 3) {\r\n                     if (code.substr(0, 3) === 'AF_') {\r\n                         return;\r\n                     }\r\n                 }\r\n                 _beginActionExternal(code);\r\n             }\r\n\r\n             function _endAction() {\r\n                 _endActionExternal();\r\n             }\r\n\r\n             function _addToLastAction() {\r\n                 inActionGroupExternal = true;\r\n             }\r\n\r\n             function _beginActionExternal(code) {\r\n                 var result = false;\r\n                 if (!inActionGroupExternal) {\r\n                     inActionGroupExternal = true;\r\n                     currentGroup++;\r\n                     groupCode = code;\r\n                     result = true;\r\n                 }\r\n                 return result;\r\n             }\r\n\r\n             function _endActionExternal() {\r\n                 if (inActionGroupExternal) {\r\n                     inActionGroupExternal = false;\r\n                     groupCode = 'AF_none';\r\n                 }\r\n             }\r\n\r\n             function _getCode(itm) {\r\n                 return itm.groupCode !== 'AF_none' ? itm.groupCode : itm.code;\r\n             }\r\n\r\n             function _clear() {\r\n                 tasks = [];\r\n                 index = -1;\r\n                 currentGroup = -1;\r\n                 inActionGroupExternal = false;\r\n                 inActionGroupInternal = false;\r\n             }\r\n         };\r\n\r\n\r\n         /* AddFlow variables---------------------------------------------------------*/\r\n\r\n         that = this;\r\n         _taskManager = new TaskManager();\r\n         _items = [];\r\n         _selectedItems = [];\r\n         hittedItem = null;\r\n         _arrow = [\r\n             [0, 0],\r\n             [-10, -4],\r\n             [-10, 4]\r\n         ];\r\n         StretchTypeEnum = {\r\n             none: 0,\r\n             add: 1,\r\n             del: 2,\r\n             first: 3,\r\n             last: 4,\r\n             change: 5\r\n         };\r\n         ResizeHandleEnum = {\r\n             leftUp: 0,\r\n             up: 1,\r\n             rightUp: 2,\r\n             left: 3,\r\n             right: 4,\r\n             leftDown: 5,\r\n             down: 6,\r\n             rightDown: 7\r\n         };\r\n         itemsetEnum = {\r\n             items: 0,\r\n             nodes: 1,\r\n             links: 2,\r\n             selectableItems: 3,\r\n             selectableNodes: 4,\r\n             selectableLinks: 5\r\n         };\r\n         moveStartDist = 8;\r\n         minNodeSize = 8;\r\n         millisec = 100; // The intervals (in millisecond) used for the autoscrolling\r\n         xScrollUnit = 20;\r\n         yScrollUnit = 20;\r\n         ptStart = [0, 0];\r\n         invRect = null;\r\n         selRect = null;\r\n         tmpRect = null;\r\n         graphRect = new MyRect(0, 0, 0, 0);\r\n         _isMouseDown = false;\r\n         startMove = false;\r\n         _handle = 0;\r\n         linkDistance = 0;\r\n         outOrg = false; // used when creating a link to know if it is reflexive\r\n         pinAreas = []; // array of rectangular pin areas\r\n         pinAreaCentral = null;\r\n         pinnedItem = null;\r\n         origin = null;\r\n         pinOrigin = null;\r\n         pinDestination = null;\r\n         stretchedLink = null;\r\n         initialWidth = canvas.width;\r\n         initialHeight = canvas.height;\r\n         offsetDatabase = 35;\r\n         selectAllFlag = false;\r\n         xoffset = 0;\r\n         yoffset = 0;\r\n         _isSelChanged = false;\r\n         okToStartMove = false;\r\n         okToStartNode = false;\r\n         okToStartLink = false;\r\n         okToStartResize = false;\r\n         okToStartStretch = false;\r\n         okToStartSelect = false;\r\n         okToStartZoom = false;\r\n         okToStartPan = false;\r\n         _repaint = 0;\r\n         _isQuadtree = true;\r\n\r\n         // Variables indicating the current user action\r\n         _isCreatingNode = false;\r\n         _isCreatingLink = false;\r\n         _isStretchingLink = false;\r\n         _isResizingNode = false;\r\n         _isMovingNode = false;\r\n         _isSelecting = false;\r\n         _isZooming = false;\r\n         _isPanning = false;\r\n\r\n         // Variables dedicated to autoscrolling\r\n         xScrollDir = 'none';\r\n         yScrollDir = 'none';\r\n         timerStarted = false;\r\n         timer = null;\r\n         orthoRouter = new OrthoRouter(); // A class for creating orthogonal links\r\n\r\n         /* AddFlow properties-----------------------------------------------------*/\r\n\r\n         /** @description The canvas where this diagram will paint to. */\r\n         this.canvas = canvas;\r\n\r\n         /** @description An object that contains the default property values for nodes.\r\n         When a node is created, it receives these property values. */\r\n         this.nodeModel = new Node(0, 0, 0, 0, '');\r\n\r\n         /** @description An object that contains the default property values for links.\r\n         When a link is created, it receives these property values. */\r\n         this.linkModel = new Link(null, null, '');\r\n\r\n         /** @description Determines whether the size of the diagram panel is fixed or \r\n         if it depends on the size of the diagram.\r\n         @default false\r\n         @type boolean */\r\n         this.isFixedSize = false;\r\n\r\n         /** @description Determines whether interactive creation of nodes is allowed.\r\n         @default true\r\n         @type boolean */\r\n         this.canDrawNode = true;\r\n\r\n         /** @description Determines whether interactive creation of links is allowed.\r\n         @default true\r\n         @type boolean */\r\n         this.canDrawLink = true;\r\n\r\n         /** @description Determines whether you can drag nodes interactively.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canMoveNode = true;\r\n\r\n         /** @description Determines whether you can resize nodes interactively.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canSizeNode = true;\r\n\r\n         /** @description Determines whether you can 'stretch' links (i.e add or \r\n         remove segments) interactively.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canStretchLink = true;\r\n\r\n         /** @description Determines whether you can create several links between \r\n         two nodes or not.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canMultiLink = true;\r\n\r\n         /** @description Determines whether you can create reflexive links. A link is \r\n         reflexive if its destination and origin nodes are the same.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canReflexLink = true;\r\n\r\n         /** @description Determines whether the user can interactively change the \r\n         origin node of a link.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canChangeOrg = true;\r\n\r\n         /** @description Determines whether the user can interactively change the \r\n         destination node of a link.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canChangeDst = true;\r\n\r\n         /** @description Determines whether multiselection mode of nodes and links \r\n         is allowed or not.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canMultiSelect = true;\r\n\r\n         /** @description Determines whether drag scrolling is allowed or not.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canDragScroll = true;\r\n\r\n         /** @description Indicates whether the selection of items with the mouse is\r\n         made only when the mouseUp event is fired or at each mouseMove event\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canSelectOnMouseMove = true;\r\n\r\n         /** @description Determines whether the selectionChanged event is fired or not.\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canSendSelectionChangedEvent = true;\r\n\r\n         /** @description Determines whether context handles are displayed for selected\r\n         items\r\n         @default true\r\n         @type boolean\r\n         */\r\n         this.canShowContextHandle = true;\r\n\r\n         /** @description Returns/sets the selection rectangle action: select, zoom ...\r\n         none. Create nodes with the mouse \r\n         selection. Select the items partially inside the rectangle\r\n         selection2. Select the items completely inside the rectangle\r\n         zoom. Zoom the rectangle while ensuring a 1:1 aspect ratio\r\n         @type string\r\n         @default 'none'\r\n         */\r\n         this.mouseSelection = 'none';\r\n\r\n         /** @description Used to specify the type of the area pointed by the mouse.\r\n         outSide resizeHandle stretchHandle pin link node\r\n         */\r\n         this.hitArea = 'outSide';\r\n\r\n         /** @description The object managing the list of tasks and allowing undo/redo. */\r\n         this.taskManager = _taskManager;\r\n\r\n         /** @description Returns/sets the X offset of the shadow used to display items\r\n         @default 5\r\n         */\r\n         this.shadowOffsetX = 5;\r\n\r\n         /** @description Returns/sets the Y offset of the shadow used to display items\r\n         @default 5\r\n         */\r\n         this.shadowOffsetY = 5;\r\n\r\n         /** @description Returns/sets the amount of blur on the shadow used to display \r\n         items, in pixels.\r\n         @default 2\r\n         */\r\n         this.shadowBlur = 2;\r\n\r\n         /** @description Returns/sets the color of the shadow used to display items.\r\n         @default rgba(128, 128, 192, 0.5)\r\n         @type Color\r\n         */\r\n         this.shadowColor = 'rgba(128, 128, 192, 0.5)';\r\n\r\n         /** @description Returns/sets the width of the area where the user has to click \r\n         to select a link.\r\n         @default 6\r\n         */\r\n         this.linkSelectionAreaWidth = 6;\r\n\r\n         /** @description Returns/sets a value that determines if the user can remove a \r\n         link point by dragging the handle to a position where it has a very obtuse angle \r\n         to its surrounding link points.\r\n         @default 6\r\n         */\r\n         this.removePointDistance = 6;\r\n\r\n         /** @description The zooming factor \r\n         @default 1\r\n         */\r\n         this.zoom = 1;\r\n\r\n         /** @description Returns/sets the horizontal grid size. \r\n         @default 16\r\n         @type integer\r\n         */\r\n         this.gridSizeX = 16;\r\n\r\n         /** @description Returns/sets the vertical grid size. \r\n         @default 16\r\n         @type integer\r\n         */\r\n         this.gridSizeY = 16;\r\n\r\n         /** @description Determines whether nodes are aligned on the grid \r\n         @default false\r\n         @type boolean\r\n         */\r\n         this.gridSnap = false;\r\n\r\n         /** @description Determines whether the grid is displayed or not.\r\n         @default false\r\n         @type boolean\r\n         */\r\n         this.gridDraw = false;\r\n\r\n         /** @description Returns/sets the grid color.\r\n         @default rgb(192, 192, 192)\r\n         @type Color\r\n         */\r\n         this.gridStrokeStyle = 'rgb(192, 192, 192)';\r\n\r\n         /** @description Returns/sets the canvas background color.\r\n         @default #fff\r\n         @type Color\r\n         */\r\n         this.fillStyle = '#fff';\r\n\r\n         /** @description A method allowing making custom drawing on the AddFlow canvas.\r\n          @default null\r\n          @type function\r\n         */\r\n         this.ownerDraw = null;\r\n\r\n         /** @description Returns/sets the selection rectangle filling color.\r\n         @default 'rgba(192, 192, 192, 0.5)'\r\n         @type Color\r\n         */\r\n         this.selRectFillStyle = 'rgba(224, 224, 224, 0.3)';\r\n\r\n         /** @description Returns/sets the selection rectangle color.\r\n         @default 'gray'\r\n         @type Color\r\n         */\r\n         this.selRectStrokeStyle = 'gray';\r\n\r\n         /** @description Returns/sets the selection rectangle width.\r\n         @default 1\r\n         @type integer\r\n         */\r\n         this.selRectLineWidth = 1;\r\n\r\n         /** @description Returns/sets the drawing color of the lines used \r\n         for selected bezier links\r\n         @default 'navy'\r\n         @type Color\r\n         */\r\n         this.bezierSelectionLinesStrokeStyle = 'navy'; // rgb(0,0,80)\r\n\r\n         /** @description Returns/sets the size of the handles used to select items. \r\n         @default 6\r\n         */\r\n         this.handleSize = 6;\r\n\r\n         /** @description Returns/sets the first color defining the gradient\r\n         style used for handles \r\n         @default 'white'\r\n         @type Color\r\n         */\r\n         this.handleGradientColor1 = 'white';\r\n\r\n         /** @description Returns/sets the second color defining the gradient\r\n         style used for the selection handles of nodes and links.\r\n         @default 'lightgray'\r\n         @type Color\r\n         */\r\n         this.handleGradientColor2 = 'lightgray';\r\n\r\n         /** @description Returns/sets the color used to draw a selection handle\r\n         of a node or a link.\r\n         @default 'black'\r\n         @type Color\r\n         */\r\n         this.handleStrokeStyle = 'black';\r\n\r\n         /** @description Returns/sets the size of a context handle. It is the\r\n         horizontal size. The vertical sise is equal to the horizontal size \r\n         multiplied by 2 and divided by 5.\r\n         @default 20\r\n         */\r\n         this.contextHandleSize = 20;\r\n\r\n         /** @description Returns/sets the drawing color of the context handles\r\n         @default 'navy'\r\n         @type Color\r\n         */\r\n         this.contextHandleStrokeStyle = 'navy';\r\n\r\n         /** @description Returns/sets the first color defining the gradient\r\n        style used for context handles \r\n        @default 'white'\r\n        @type Color\r\n        */\r\n         this.contextHandleGradientColor1 = 'white';\r\n\r\n         /** @description Returns/sets the second color defining the gradient\r\n         style used for context handles \r\n         @default 'lightblue'\r\n         @type Color\r\n         */\r\n         this.contextHandleGradientColor2 = 'lightblue';\r\n\r\n         /** @description Returns/sets the size of the pins used to create links. \r\n         @default 8\r\n         */\r\n         this.pinSize = 8;\r\n\r\n         /** @description Returns/sets the first color defining the gradient\r\n         style used for pins.\r\n         @default 'white'\r\n         @type Color\r\n         */\r\n         this.pinGradientColor1 = 'white';\r\n\r\n         /** @description Returns/sets the second color defining the gradient\r\n         style used for pins. \r\n         @default 'navy'\r\n         @type Color\r\n         */\r\n         this.pinGradientColor2 = 'navy';\r\n\r\n         /** @description Returns/sets the color used to draw pins\r\n         @default 'white'\r\n         @type Color\r\n         */\r\n         this.pinStrokeStyle = 'white';\r\n\r\n         /** @description Returns/sets the first color defining the gradient\r\n         style used for central pins.\r\n         @default 'white'\r\n         @type Color\r\n         */\r\n         this.centralPinGradientColor1 = 'white';\r\n\r\n         /** @description Returns/sets the second color defining the gradient\r\n         style used for central pins.\r\n         @default 'white'\r\n         @type Color\r\n         */\r\n         this.centralPinGradientColor2 = 'white';\r\n\r\n         /** @description Returns/sets the color used to draw central pin\r\n         @default 'black'\r\n         @type Color\r\n         */\r\n         this.centralPinStrokeColor = 'black';\r\n\r\n         /** @description Resturns/sets the x offset to add the x mouse coordinate.\r\n         This may be useful in some development environments.\r\n         @default 0\r\n         */\r\n         this.xCustomOffset = 0;\r\n\r\n         /** @description Resturns/sets the y offset to add the y mouse coordinate.\r\n         This may be useful in some development environments.\r\n         @default 0\r\n         */\r\n         this.yCustomOffset = 0;\r\n\r\n\r\n         /* AddFlow Methods-----------------------------------------------------------*/\r\n\r\n         /** @description Cause the canvas to be updated.\r\n         @function */\r\n         this.refresh = function () {\r\n             invalidate(null);\r\n             updateScrollInfo(); // needed and added in v1.2.0.2\r\n             updateDrawing();\r\n         };\r\n\r\n         /** @description Determines whether a Quadtree structure is used to improve speed\r\n         @param isQuadtree A flag determining if a quadtree structure is used\r\n         @function */\r\n         this.useQuadtree = function (isQuadtree) {\r\n             if (_isQuadtree !== isQuadtree) {\r\n                 _isQuadtree = isQuadtree;\r\n                 if (_isQuadtree) {\r\n                     _buildQuadtree();\r\n                 }\r\n             }\r\n         }\r\n\r\n         /** @description Get the list of all items (nodes and links)\r\n         @function */\r\n         this.getItems = function () {\r\n             return _items;\r\n         };\r\n\r\n         /**  @description Get the list of the selected items. \r\n          */\r\n         this.getSelectedItems = function () {\r\n             return _selectedItems;\r\n         };\r\n\r\n         /** @description Get the item pointed by the mouse.\r\n         @function */\r\n         this.getHitItem = function () {\r\n             return hittedItem;\r\n         };\r\n\r\n         /** @description Create a node.\r\n         @param x The horizontal position of the node to create. \r\n         @param y The vertical position of the node to create. \r\n         @param w The width of the node to create.\r\n         @param h The height of the node to create. \r\n         @param [text] A string to be displayed in the node to create.\r\n         @function */\r\n         this.addNode = function (x, y, w, h, text) {\r\n             return _addNode(x, y, w, h, text);\r\n         };\r\n\r\n         /** @description Create a link.\r\n         @param org The origin node of the link to create. \r\n         @param dst The destination node of the link to create.  \r\n         @param [text] A string to be displayed in the node to create.\r\n         @param [pinOrg] The pin of the origin node of the link to create.\r\n         @param [pinDst] The pin of the destination node of the link to create.\r\n         @function */\r\n         this.addLink = function (org, dst, text, pinOrg, pinDst) {\r\n             return _addLink(org, dst, text, pinOrg, pinDst);\r\n         };\r\n\r\n         /** @description Remove a node.\r\n         @param node A reference to the node to be removed. \r\n         @function */\r\n         this.removeNode = function (node) {\r\n             _removeNode(node);\r\n         };\r\n\r\n         /** @description Remove a link.\r\n         @param _link A reference to the link to be removed. \r\n         @function */\r\n         this.removeLink = function (_link) {\r\n             _removeLink(_link);\r\n         };\r\n\r\n         /** @description Delete the selected items.\r\n         @function */\r\n         this.deleteSel = function () {\r\n             _deleteSel();\r\n         };\r\n\r\n         /** @description Clear the diagram by removing all items.\r\n         @function */\r\n         this.clear = function () {\r\n             _clear();\r\n         };\r\n\r\n         /** @description Select all the items.\r\n         @function */\r\n         this.selectAll = function () {\r\n             _selectAll();\r\n         };\r\n\r\n         /** @description Unselect all the selected items.\r\n         @function */\r\n         this.unselectAll = function () {\r\n             _unselectAll();\r\n         };\r\n\r\n         /** @description The beginUpdate method prevents the control to calculate the  \r\n         size of the diagram until the endUpdate method is called, thus allowing \r\n         better performance.\r\n         @function */\r\n         this.beginUpdate = function () {\r\n             _beginUpdate();\r\n         };\r\n\r\n         /**  The beginUpdate method prevents the control to calculate \r\n         the size of the diagram until the endUpdate method is called, thus allowing   \r\n         better performance.\r\n         @function */\r\n         this.endUpdate = function () {\r\n             _endUpdate();\r\n         };\r\n\r\n         /** @description Set the rectangular portion of AddFlow that needs \r\n         to be repainted. \r\n         @function\r\n         @param x The horizontal position of the rectangular region to repaint. \r\n         @param y The vertical position of the rectangular region to repaint. \r\n         @param w The width of the rectangular region to repaint.\r\n         @param h The height of the rectangular region to repaint. */\r\n         this.invalidateRect = function (x, y, w, h) {\r\n             invalidate(new MyRect(x, y, w, h));\r\n         };\r\n\r\n         /** @description Indicates if the user is currently moving nodes\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isMovingNode = function () {\r\n             return _isMovingNode;\r\n         };\r\n\r\n         /** @description Indicates if the user is currently creating a node.\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isCreatingNode = function () {\r\n             return _isCreatingNode;\r\n         };\r\n\r\n         /** @description Indicates if the user is currently creating a link.\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isCreatingLink = function () {\r\n             return _isCreatingLink;\r\n         };\r\n\r\n         /** @description Indicates if the user is currently stretching a link.\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isStretchingLink = function () {\r\n             return _isStretchingLink;\r\n         };\r\n\r\n         /** @description Indicates if the user is currently resizing a node.\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isResizingNode = function () {\r\n             return _isResizingNode;\r\n         };\r\n\r\n         /** @description Indicates if the user is currently selecting items\r\n         by drawing a rectangle with the mouse.\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isSelecting = function () {\r\n             return _isSelecting;\r\n         };\r\n\r\n         /** @description Indicates if the user is currently zooming the diagram\r\n         by drawing a rectangle with the mouse.\r\n         @function\r\n         @type boolean\r\n         */\r\n         this.isZooming = function () {\r\n             return _isZooming;\r\n         };\r\n\r\n         /** @description Indicates if the user is currently panning the diagram.\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isPanning = function () {\r\n             return _isPanning;\r\n         };\r\n\r\n         /** @description Allow to set a flag indicating that the selection has\r\n         changed or not.\r\n         @type boolean\r\n         @function\r\n         @param flag true if you want to indicate that the diagram\r\n         selection has changed else false.\r\n         */\r\n         this.setSelChangedFlag = function (flag) {\r\n             _isSelChanged = flag;\r\n         };\r\n\r\n         /** @description Indicates if selection in the AddFlow diagram has changed.\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isSelChanged = function () {\r\n             return _isSelChanged;\r\n         };\r\n\r\n         /**  @description Indicates if the item is a Node object\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isNode = function (item) {\r\n             return _isNode(item);\r\n         };\r\n\r\n         /**  @description Indicates if the item is a Link object\r\n         @type boolean\r\n         @function\r\n         */\r\n         this.isLink = function (item) {\r\n             return _isLink(item);\r\n         };\r\n\r\n         /** @description Send the selected items at the back of the zorder list\r\n         @function */\r\n         this.sendToBack = function () {\r\n             _sendToBack();\r\n         };\r\n\r\n         /** @description Bring the selected items at the front of the zorder list\r\n         @function */\r\n         this.bringToFront = function () {\r\n             _bringToFront();\r\n         };\r\n\r\n         /** @description Zoom and scroll a view to fit a specified rectangular \r\n         portion of the diagram.\r\n         @function \r\n         @param x The horizontal position of the rectangular region to zoom. \r\n         @param y The vertical position of the rectangular region to zoom. \r\n         @param w The width of the rectangular region to zoom.\r\n         @param h The height of the rectangular region to zoom. */\r\n         this.zoomRectangle = function (x, y, w, h) {\r\n             _zoomRectangle(new MyRect(x, y, w, h));\r\n         };\r\n\r\n         /** @description return the horizontal size of the diagram\r\n         @function */\r\n         this.getXExtent = function () {\r\n             return graphRect.width;\r\n         };\r\n\r\n         /** @description return the vertical size of the diagram\r\n         @function */\r\n         this.getYExtent = function () {\r\n             return graphRect.height;\r\n         };\r\n\r\n\r\n         // Initialization sequence.\r\n         initialize(this.canvas);\r\n\r\n\r\n         /* AddFlow Helpers--------------------------------------------------------*/\r\n\r\n         // Initialization sequence.\r\n         function initialize(canvas) {\r\n             // AddFlow Handlers \r\n             // http://www.informit.com/articles/article.aspx?p=1903884&seqNum=6\r\n             canvas.addEventListener(\"ready\", readyHandler, false);\r\n             canvas.addEventListener(\"mousedown\", mouseDownHandler, false);\r\n             canvas.addEventListener(\"mousemove\", mouseMoveHandler, false);\r\n             canvas.addEventListener(\"mouseup\", mouseUpHandler, false);\r\n             canvas.addEventListener('touchstart', touchStartHandler, false);\r\n             canvas.addEventListener('touchmove', touchMoveHandler, false);\r\n             canvas.addEventListener('touchend', touchEndHandler, false);\r\n\r\n             if (_isQuadtree) {\r\n                 _buildQuadtree();\r\n             }\r\n         }\r\n\r\n         // context event\r\n         function fireContextEvent(itm) {\r\n             var event;\r\n\r\n             event = document.createEvent(\"Event\");\r\n             event.initEvent(\"context\", true, true);\r\n             event.item = itm,\r\n                 document.dispatchEvent(event);\r\n         }\r\n\r\n         // selectionChange event\r\n         function fireSelectionChangeEvent(itm) {\r\n             var event;\r\n\r\n             event = document.createEvent(\"Event\");\r\n             event.initEvent(\"selectionChange\", true, true);\r\n             event.item = itm,\r\n                 document.dispatchEvent(event);\r\n         }\r\n\r\n         // Build the quadtree structure used to improve performance\r\n         function _buildQuadtree() {\r\n             var i, itm;\r\n\r\n             _quadtree = Quadtree._init(0, 0, graphRect.width, graphRect.height);\r\n             _quadtree._clear();\r\n\r\n             for (i = 0; i < _items.length; i++) {\r\n                 itm = _items[i];\r\n                 if (that.isNode(itm)) {\r\n                     itm.bounds = getNodeRect(itm);\r\n                 } else {\r\n                     itm.bounds = getLinkRect(itm);\r\n                 }\r\n                 _quadtree._insert(itm, itm.bounds);\r\n             }\r\n         }\r\n\r\n         // Is the item a node ?\r\n         function _isNode(itm) {\r\n             return (itm instanceof Node);\r\n         }\r\n\r\n         // Is the item a link ?\r\n         function _isLink(itm) {\r\n             return (itm instanceof Link);\r\n         }\r\n\r\n         function _addNode(x, y, w, h, text) {\r\n             var rc;\r\n\r\n             var _node = new Node(x, y, w, h, text);\r\n             _items.push(_node);\r\n             _node.index = that.getItems().length - 1;\r\n             _node.flow = that;\r\n             if (that.nodeModel !== undefined && that.nodeModel !== null) {\r\n                 copyNodeProperties(_node, that.nodeModel);\r\n             }\r\n\r\n             if (_repaint === 0) {\r\n                 rc = getNodeRect(_node);\r\n                 updateDiagramSizeWithRect(rc);\r\n                 _node.bounds = rc;\r\n                 if (_isQuadtree) {\r\n                     _quadtree._insert(_node, _node.bounds);\r\n                 }\r\n                 _node.refresh();\r\n             }\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new AddNodeTask(that, _node));\r\n             }\r\n\r\n             return _node;\r\n         }\r\n\r\n         function _removeNode(_node) {\r\n             var currentGroup, _links, j;\r\n             if (_node === undefined || _node === null) {\r\n                 return;\r\n             }\r\n\r\n             // Group all removing actions\r\n             // (deleting a node cause the deleting of its links)\r\n             currentGroup = false;\r\n             if (_taskManager.undoAllowed()) {\r\n                 currentGroup = _taskManager.isCurrentActionGroup();\r\n                 if (!currentGroup) {\r\n                     _taskManager._beginActionInternal('AF_nodeRemove');\r\n                 }\r\n             }\r\n\r\n             // Unselect the node\r\n             if (_node.getIsSelected()) {\r\n                 _node.setIsSelected(false);\r\n             }\r\n\r\n             // Delete all links (in and out) linked to the node to delete\r\n             _links = _node.getLinks();\r\n             for (j = _links.length - 1; j >= 0; j--) {\r\n                 _removeLink(_links[j]);\r\n             }\r\n\r\n             // Add the action in the Undo/Redo list of actions\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new RemoveNodeTask(that, _node));\r\n             }\r\n\r\n             if (_isQuadtree) {\r\n                 _quadtree._remove(_node);\r\n             }\r\n\r\n             // Delete the node\r\n             removeItemByIndex(_node.index);\r\n             that.refresh();\r\n\r\n             // End action\r\n             if (_taskManager.undoAllowed()) {\r\n                 if (!currentGroup) {\r\n                     _taskManager._endActionInternal();\r\n                 }\r\n             }\r\n         }\r\n\r\n         function _addLink(org, dst, text, pinOrg, pinDst) {\r\n             var _link;\r\n\r\n             if (org === undefined || dst === undefined) {\r\n                 return null;\r\n             }\r\n             if (org === null || dst === null) {\r\n                 return null;\r\n             }\r\n             _link = new Link(org, dst, text, pinOrg, pinDst);\r\n             _items.push(_link);\r\n             org.getLinks().push(_link);\r\n             dst.getLinks().push(_link);\r\n             _link.flow = that;\r\n             if (that.linkModel !== undefined && that.linkModel !== null) {\r\n                 copyLinkProperties(_link, that.linkModel);\r\n             }\r\n             initLinkPoints(_link);\r\n             _link.index = that.getItems().length - 1;\r\n\r\n             if (_repaint === 0) {\r\n                 var rc = getLinkRect(_link);\r\n                 updateDiagramSizeWithRect(rc);\r\n                 _link.bounds = rc;\r\n                 if (_isQuadtree) {\r\n                     _quadtree._insert(_link, _link.bounds);\r\n                 }\r\n                 _link.refresh();\r\n             }\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new AddLinkTask(that, _link));\r\n             }\r\n             return _link;\r\n         }\r\n\r\n         function _removeLink(_link) {\r\n             var currentGroup;\r\n\r\n             if (_link === undefined || _link === null) {\r\n                 return;\r\n             }\r\n\r\n             // Unselect the link\r\n             if (_link.getIsSelected()) {\r\n                 _link.setIsSelected(false);\r\n             }\r\n\r\n             // Group all removing actions\r\n             // (deleting a node cause the deleting of its links)\r\n             currentGroup = false;\r\n             if (_taskManager.undoAllowed()) {\r\n                 currentGroup = _taskManager.isCurrentActionGroup();\r\n                 if (!currentGroup) {\r\n                     _taskManager._beginActionInternal('AF_linkRemove');\r\n                 }\r\n             }\r\n\r\n             _link.setOrg(null);\r\n             _link.setDst(null);\r\n\r\n             // Add the action in the Undo/Redo list of actions\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new RemoveLinkTask(that, _link));\r\n             }\r\n\r\n             if (_isQuadtree) {\r\n                 _quadtree._remove(_link);\r\n             }\r\n\r\n             // Delete the link\r\n             removeItemByIndex(_link.index);\r\n             that.refresh();\r\n\r\n             // End action\r\n             if (_taskManager.undoAllowed()) {\r\n                 if (!currentGroup) {\r\n                     _taskManager._endActionInternal();\r\n                 }\r\n             }\r\n         }\r\n\r\n         function _clear() {\r\n             var i, n, nodes;\r\n\r\n             if (_items.length === 0) {\r\n                 return;\r\n             }\r\n\r\n             _beginUpdate();\r\n\r\n             // Get the collection of nodes\r\n             nodes = [];\r\n             for (i = 0; i < _items.length; i++) {\r\n                 if (_isNode(_items[i])) {\r\n                     nodes.push(_items[i]);\r\n                 }\r\n             }\r\n\r\n             // We start at the end to avoid a bug with zorder when undoing this action\r\n             for (n = nodes.length - 1; n >= 0; n--) {\r\n                 _removeNode(nodes[n]);\r\n             }\r\n\r\n             _endUpdate();\r\n         }\r\n\r\n         function _deleteSel() {\r\n             var i, itm, currentGroup;\r\n\r\n             if (_selectedItems.length === 0) {\r\n                 return;\r\n             }\r\n\r\n             currentGroup = false;\r\n             if (_taskManager.undoAllowed()) {\r\n                 currentGroup = _taskManager.isCurrentActionGroup();\r\n                 if (!currentGroup) {\r\n                     _taskManager._beginActionInternal('AF_del');\r\n                 }\r\n             }\r\n\r\n             _beginUpdate();\r\n\r\n             // Remove selected links\r\n             for (i = _selectedItems.length - 1; i >= 0; i--) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isLink(itm)) {\r\n                     _removeLink(itm);\r\n                 }\r\n             }\r\n\r\n             // Remove selected nodes\r\n             for (i = _selectedItems.length - 1; i >= 0; i--) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isNode(itm)) {\r\n                     // Not needed here\r\n                     _removeNode(itm);\r\n                 }\r\n             }\r\n\r\n             _endUpdate();\r\n\r\n             // End action\r\n             if (_taskManager.undoAllowed()) {\r\n                 if (!currentGroup) {\r\n                     _taskManager._endActionInternal();\r\n                 }\r\n                 _taskManager._endActionInternal();\r\n             }\r\n         }\r\n\r\n         function _selectAll() {\r\n             var i, itm;\r\n\r\n             _beginUpdate();\r\n             for (i = 0; i < _items.length; i++) {\r\n                 itm = _items[i];\r\n                 if (!itm.getIsSelected()) {\r\n                     itm.setIsSelected(true);\r\n                 }\r\n             }\r\n             _endUpdate();\r\n         }\r\n\r\n         function _unselectAll() {\r\n             var i, itm;\r\n\r\n             selectAllFlag = true;\r\n             for (i = _selectedItems.length - 1; i >= 0; i--) {\r\n                 itm = _selectedItems[i];\r\n                 if (itm.getIsSelected()) {\r\n                     itm.setIsSelected(false);\r\n                 }\r\n             }\r\n             _selectedItems = [];\r\n             selectAllFlag = false;\r\n             that.refresh();\r\n         }\r\n\r\n         function removeItemByIndex(idx) {\r\n             var i;\r\n\r\n             if (idx >= 0 && idx < _items.length) {\r\n                 if (that.isNode(_items[idx])) {\r\n                     invalidateNode(_items[idx]);\r\n                 } else if (that.isLink(_items[idx])) {\r\n                     invalidateLink(_items[idx]);\r\n                 }\r\n\r\n                 // Remove item from the list\r\n                 _items.splice(idx, 1);\r\n\r\n                 // Adjust indices\r\n                 for (i = idx; i < _items.length; i++) {\r\n                     _items[i].index = i;\r\n                 }\r\n             }\r\n         }\r\n\r\n         function _sendToBack() {\r\n             var i, k, idx, itm;\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new ZOrderTask(that));\r\n             }\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 idx = itm.index;\r\n\r\n                 // Remove item from the list\r\n                 _items.splice(idx, 1);\r\n\r\n                 // Insert it at the new position\r\n                 _items.splice(0, 0, itm);\r\n\r\n                 for (k = 0; k < _selectedItems.length; k++) {\r\n                     if (k !== i && _selectedItems[k].index < idx + 1) {\r\n                         _selectedItems[k].index++;\r\n                     }\r\n                 }\r\n             }\r\n\r\n             // Update indices\r\n             for (i = 0; i < _items.length; i++) {\r\n                 _items[i].index = i;\r\n             }\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 itm.refresh();\r\n             }\r\n         }\r\n\r\n         function _bringToFront() {\r\n             var i, k, idx, itm;\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new ZOrderTask(that));\r\n             }\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 idx = itm.index;\r\n\r\n                 // Remove item from the list\r\n                 _items.splice(idx, 1);\r\n\r\n                 // Insert it at the new position\r\n                 _items.push(itm);\r\n\r\n                 for (k = 0; k < _selectedItems.length; k++) {\r\n                     if (k !== i && _selectedItems[k].index > idx - 1) {\r\n                         _selectedItems[k].index--;\r\n                     }\r\n                 }\r\n             }\r\n\r\n             // Update indices\r\n             for (i = 0; i < _items.length; i++) {\r\n                 _items[i].index = i;\r\n             }\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 itm.refresh();\r\n             }\r\n         }\r\n\r\n\r\n         // Helpers for nodes and links------------------------------------------------\r\n\r\n         function getNodeContextHandle(_node) {\r\n             var rc, x, y, dx, dy;\r\n\r\n             rc = getNodeRect(_node);\r\n             dx = that.contextHandleSize;\r\n             dy = that.contextHandleSize * 2 / 5\r\n             x = rc.left + rc.width - dx;\r\n             y = rc.top + 1 - dx;\r\n             return new MyRect(x, y, dx, dy);\r\n         }\r\n\r\n         function getLinkContextHandle(_link) {\r\n             var x, y, dx, dy, apt;\r\n\r\n             // Get the position of the text\r\n             apt = [];\r\n             if (_link.lineStyle === 'bezier') {\r\n                 Helpers.flattenBezier(_link.points[0], _link.points[1],\r\n                     _link.points[2], _link.points[3], apt);\r\n             } else {\r\n                 apt = _link.points;\r\n             }\r\n             var polylineHelper = new PolylineHelper(apt);\r\n             var pt = polylineHelper.getPointAtFractionLength(0.5);\r\n             if (pt !== null) {\r\n                 dx = that.contextHandleSize;\r\n                 dy = that.contextHandleSize * 2 / 5;\r\n                 x = pt.x - dx / 2 - 20;\r\n                 y = pt.y - dy / 2 - 20;\r\n                 return new MyRect(x, y, dx, dy);\r\n             } else {\r\n                 return null;\r\n             }\r\n         }\r\n\r\n         function getNodeHandles(_node, _handles) {\r\n             var pt, inc, size, rc;\r\n\r\n             inc = 1 * that.handleSize;\r\n             size = that.handleSize;\r\n             rc = getNodeRect(_node);\r\n             rc = rc.inflate(inc, inc);\r\n\r\n             pt = {\r\n                 x: rc.left,\r\n                 y: rc.top\r\n             };\r\n             _handles.push(new MyRect(pt.x - size / 2, pt.y - size / 2, size, size));\r\n\r\n             pt = {\r\n                 x: rc.left + rc.width / 2,\r\n                 y: rc.top\r\n             };\r\n             _handles.push(new MyRect(pt.x - size / 2, pt.y - size / 2, size, size));\r\n\r\n             pt = {\r\n                 x: rc.left + rc.width,\r\n                 y: rc.top\r\n             };\r\n             _handles.push(new MyRect(pt.x - size / 2, pt.y - size / 2, size, size));\r\n\r\n             pt = {\r\n                 x: rc.left,\r\n                 y: rc.top + rc.height / 2\r\n             };\r\n             _handles.push(new MyRect(pt.x - size / 2, pt.y - size / 2, size, size));\r\n\r\n             pt = {\r\n                 x: rc.left + rc.width,\r\n                 y: rc.top + rc.height / 2\r\n             };\r\n             _handles.push(new MyRect(pt.x - size / 2, pt.y - size / 2, size, size));\r\n\r\n             pt = {\r\n                 x: rc.left,\r\n                 y: rc.top + rc.height\r\n             };\r\n             _handles.push(new MyRect(pt.x - size / 2, pt.y - size / 2, size, size));\r\n\r\n             pt = {\r\n                 x: rc.left + rc.width / 2,\r\n                 y: rc.top + rc.height\r\n             };\r\n             _handles.push(new MyRect(pt.x - size / 2, pt.y - size / 2, size, size));\r\n\r\n             pt = {\r\n                 x: rc.left + rc.width,\r\n                 y: rc.top + rc.height\r\n             };\r\n             _handles.push(new MyRect(pt.x - size / 2, pt.y - size / 2, size, size));\r\n         }\r\n\r\n         function getNodeRect(node) {\r\n             return new MyRect(node.x, node.y, node.w, node.h);\r\n         }\r\n\r\n         function invalidateNode(_node) {\r\n             invalidate(getNodeRectWithHandles(_node));\r\n         }\r\n\r\n         function setNodeRect(_node, rect) {\r\n             var currentGroup, rc;\r\n\r\n             currentGroup = false;\r\n             if (_taskManager.undoAllowed()) {\r\n                 currentGroup = _taskManager.isCurrentActionGroup();\r\n                 if (!currentGroup) {\r\n                     _taskManager._beginActionInternal('AF_nodeMoveAndSize');\r\n                 }\r\n             }\r\n             if (_taskManager.undoAllowed()) {\r\n                 rc = getNodeRect(_node);\r\n                 _taskManager._submitTask(new NodeLayoutTask(that, _node, rc));\r\n             }\r\n\r\n             invalidateNode(_node);\r\n             _node.x = rect.left;\r\n             _node.y = rect.top;\r\n             _node.w = rect.width;\r\n             _node.h = rect.height;\r\n             adjustNodeLinks(_node);\r\n             _node.refresh();\r\n\r\n             // End action\r\n             if (_taskManager.undoAllowed()) {\r\n                 if (!currentGroup) {\r\n                     _taskManager._endActionInternal();\r\n                 }\r\n             }\r\n         }\r\n\r\n         function isEllipse(node) {\r\n             return (node.shapeFamily === 'ellipse');\r\n         }\r\n\r\n         function isRectangle(node) {\r\n             return (node.shapeFamily === 'rectangle');\r\n         }\r\n\r\n         function isPolygon(node) {\r\n             return (node.shapeFamily === 'polygon');\r\n         }\r\n\r\n         function getNodePolygonPoints(node, polypoints) {\r\n             var boundingRect, x, y, cx, cy, rc, x2, y2, i;\r\n\r\n             if (node.polygon !== undefined && node.polygon !== null) {\r\n                 boundingRect = Helpers.getBoundingRect(node.polygon);\r\n                 if (boundingRect === null) {\r\n                     return;\r\n                 }\r\n                 x = boundingRect.left;\r\n                 y = boundingRect.top;\r\n                 cx = boundingRect.width;\r\n                 cy = boundingRect.height;\r\n                 if (cx === 0 || cy === 0) {\r\n                     return;\r\n                 }\r\n                 for (i = 0; i < node.polygon.length; i++) {\r\n                     rc = getNodeRect(node);\r\n                     x2 = rc.left + (rc.width / cx) * (node.polygon[i][0] - x);\r\n                     y2 = rc.top + (rc.height / cy) * (node.polygon[i][1] - y);\r\n                     polypoints.push({\r\n                         x: x2,\r\n                         y: y2\r\n                     });\r\n                 }\r\n             }\r\n         }\r\n\r\n         function getNodeLinks(node) {\r\n             return node.getLinks();\r\n         }\r\n\r\n         // Adjust the position of each link of the node \r\n         function adjustNodeLinks(node) {\r\n             var j, _links, _link;\r\n\r\n             _links = getNodeLinks(node);\r\n             for (j = 0; j < _links.length; j++) {\r\n                 _link = _links[j];\r\n                 if (_isQuadtree) {\r\n                     _quadtree._remove(_link);\r\n                 }\r\n                 adjustLink(_link);\r\n                 _link.bounds = getLinkRect(_link);\r\n                 if (_isQuadtree) {\r\n                     _quadtree._insert(_link, _link.bounds);\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Check if there is a link from node1 to node2 \r\n         function isOriginOf(_node1, _node2) {\r\n             var i, _link, _links, result;\r\n\r\n             result = false;\r\n             _links = getNodeLinks(_node1);\r\n             for (i = 0; i < _links.length; i++) {\r\n                 _link = _links[i];\r\n                 // We check both nodes because the link may be reflexive.\r\n                 if (_link.dst === _node2 && _link.org === _node1) {\r\n                     result = true;\r\n                     break;\r\n                 }\r\n             }\r\n             return result;\r\n         }\r\n\r\n         // Check if there is a link from node2 to node1 \r\n         function isDestinationOf(_node1, _node2) {\r\n             var i, _link, result, _links;\r\n\r\n             result = false;\r\n             _links = getNodeLinks(_node1);\r\n             for (i = 0; i < _links.length; i++) {\r\n                 _link = _links[i];\r\n                 // We check both nodes because the link may be reflexive.\r\n                 if (_link.org === _node2 && _link.dst === _node1) {\r\n                     result = true;\r\n                     break;\r\n                 }\r\n             }\r\n             return result;\r\n         }\r\n\r\n         function invalidateLink(_link) {\r\n             invalidate(getLinkRectWithHandles(_link));\r\n         }\r\n\r\n         function getLinkHandles(_link, _handles) {\r\n             var create, nbHandles, firstEnabled, lastEnabled, otherEnabled, enabled,\r\n                 j, k, pt, rc;\r\n\r\n             create = isLinkNewPointsAllowed(_link);\r\n             nbHandles = create ? 2 * _link.points.length - 1 : _link.points.length;\r\n             firstEnabled = (that.canChangeOrg || _link.org.pins !== null);\r\n             lastEnabled = (that.canChangeDst || _link.dst.pins !== null);\r\n             otherEnabled = that.canStretchLink && _link.isStretchable;\r\n             for (j = 0; j < nbHandles; j++) {\r\n                 enabled = false;\r\n                 if (j === 0) {\r\n                     enabled = firstEnabled;\r\n                 } else if (j === nbHandles - 1) {\r\n                     enabled = lastEnabled;\r\n                 } else {\r\n                     enabled = otherEnabled;\r\n                 }\r\n\r\n                 if (create) {\r\n                     if (j % 2 === 0) {\r\n                         pt = _link.points[j / 2];\r\n                     } else {\r\n                         k = Math.round(j / 2) - 1;\r\n                         pt = Helpers.middlePoint(_link.points[k], _link.points[k + 1]);\r\n                     }\r\n                 } else {\r\n                     pt = _link.points[j];\r\n                 }\r\n                 rc = new MyRect(pt.x - that.handleSize / 2, pt.y - that.handleSize / 2,\r\n                     that.handleSize, that.handleSize);\r\n                 _handles.push(rc);\r\n             }\r\n         }\r\n\r\n         function isLinkReflexive(_link) {\r\n             return (_link.org === _link.dst);\r\n         }\r\n\r\n         function isLinkNewPointsAllowed(_link) {\r\n             return (_link.getLineStyle() === 'polyline' || _link.getLineStyle() === 'spline');\r\n         }\r\n\r\n         function adjustLink(_link) {\r\n             invalidateLink(_link);\r\n             if (_link.getLineStyle() === 'database') {\r\n                 fixDatabaseLinkPoints(_link);\r\n             } else if (_link.getLineStyle() === 'orthogonal') {\r\n                 fixOrthogonalLinkPoints(_link);\r\n             }\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n             invalidateLink(_link);\r\n         }\r\n\r\n         function setLinkLineStyle(_link, lineStyle) {\r\n             if (_link.lineStyle === lineStyle) {\r\n                 return;\r\n             }\r\n             if (_link === that.linkModel) {\r\n                 _link.lineStyle = lineStyle;\r\n                 return;\r\n             }\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(\r\n                     new LineStyleTask(that, _link, _link.lineStyle));\r\n             }\r\n\r\n             _link.lineStyle = lineStyle;\r\n\r\n             if ((_link.lineStyle === 'bezier' && _link.points.length !== 4) ||\r\n                 _link.lineStyle === 'database' || _link.lineStyle === 'orthogonal') {\r\n                 initLinkPoints(_link);\r\n             }\r\n\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n\r\n             _link.refresh();\r\n         }\r\n\r\n         function setLinkDst(_link, dst) {\r\n             var _links, oldDst, j;\r\n\r\n             if (_link === that.linkModel) {\r\n                 _link.dst = dst;\r\n                 return;\r\n             }\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new SetLinkDstTask(that, _link, _link.dst));\r\n             }\r\n\r\n             invalidateLink(_link);\r\n             oldDst = _link.dst;\r\n             if (oldDst !== null) {\r\n                 _links = oldDst.getLinks();\r\n                 for (j = 0; j < _links.length; j++) {\r\n                     if (_links[j] === _link) {\r\n                         break;\r\n                     }\r\n                 }\r\n                 _links.splice(j, 1);\r\n             }\r\n             if (dst !== null) {\r\n                 _links = dst.getLinks();\r\n                 _links.push(_link);\r\n                 _link.dst = dst;\r\n\r\n                 if (_link.getLineStyle() === 'database') {\r\n                     fixDatabaseLinkPoints(_link);\r\n                 } else if (_link.getLineStyle() === 'orthogonal') {\r\n                     fixOrthogonalLinkPoints(_link);\r\n                 }\r\n                 if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                     calcLinkStartPoint(_link);\r\n                 }\r\n                 if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                     calcLinkEndPoint(_link);\r\n                 }\r\n\r\n                 _link.refresh();\r\n             }\r\n         }\r\n\r\n         function setLinkOrg(_link, org) {\r\n             var _links, oldOrg, j;\r\n\r\n             if (_link === that.linkModel) {\r\n                 _link.org = org;\r\n                 return;\r\n             }\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new SetLinkOrgTask(that, _link, _link.org));\r\n             }\r\n\r\n             invalidateLink(_link);\r\n             oldOrg = _link.org;\r\n             if (oldOrg !== null) {\r\n                 _links = oldOrg.getLinks();\r\n                 for (j = 0; j < _links.length; j++) {\r\n                     if (_links[j] === _link) {\r\n                         break;\r\n                     }\r\n                 }\r\n                 _links.splice(j, 1);\r\n             }\r\n             if (org !== null) {\r\n                 _links = org.getLinks();\r\n                 _links.push(_link);\r\n                 _link.org = org;\r\n\r\n                 if (_link.getLineStyle() === 'database') {\r\n                     fixDatabaseLinkPoints(_link);\r\n                 } else if (_link.getLineStyle() === 'orthogonal') {\r\n                     fixOrthogonalLinkPoints(_link);\r\n                 }\r\n                 if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                     calcLinkStartPoint(_link);\r\n                 }\r\n                 if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                     calcLinkEndPoint(_link);\r\n                 }\r\n\r\n                 _link.refresh();\r\n             }\r\n         }\r\n\r\n         function setLinkPinDst(_link, value) {\r\n             var oldValue;\r\n\r\n             oldValue = _link.pinDst;\r\n             _link.pinDst = value;\r\n             if (_link.points !== null && _link.points.length > 0) {\r\n                 if (_link.org.pins != null && (_link.pinDst >= 0 && _link.pinDst < _link.dst.pins.length)) {\r\n                     if (_taskManager.undoAllowed()) {\r\n                         _taskManager.submitTask(new SetLinkPinDstTask(that, _link, oldValue));\r\n                     }\r\n                     _link.points[_link.points.length - 1] = getPinPosition(_link.dst, _link.pinDst);\r\n                     _link.refresh();\r\n                 }\r\n             }\r\n         }\r\n\r\n         function setLinkPinOrg(_link, value) {\r\n             var oldValue;\r\n\r\n             oldValue = _link.pinOrg;\r\n             _link.pinOrg = value;\r\n             if (_link.points !== null && _link.points.length > 0) {\r\n                 if (_link.org.pins != null && (_link.pinOrg >= 0 && _link.pinOrg < _link.org.pins.length)) {\r\n                     if (_taskManager.undoAllowed()) {\r\n                         _taskManager.submitTask(new SetLinkPinOrgTask(that, _link, oldValue));\r\n                     }\r\n                     _link.points[0] = getPinPosition(_link.org, _link.pinOrg);\r\n                     _link.refresh();\r\n                 }\r\n             }\r\n         }\r\n\r\n         function setLinkIsOrgPointAdjustable(_link, adjustable) {\r\n             if (_link.isOrgPointAdjustable === adjustable) {\r\n                 return;\r\n             }\r\n             if (_link === that.linkModel) {\r\n                 _link.isOrgPointAdjustable = adjustable;\r\n                 return;\r\n             }\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new StretchLinkTask(that, _link));\r\n             }\r\n\r\n             _link.isOrgPointAdjustable = adjustable;\r\n\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n\r\n             _link.refresh();\r\n         }\r\n\r\n         function setLinkIsDstPointAdjustable(_link, adjustable) {\r\n             if (_link.isDstPointAdjustable === adjustable) {\r\n                 return;\r\n             }\r\n             if (_link === that.linkModel) {\r\n                 _link.isDstPointAdjustable = adjustable;\r\n                 return;\r\n             }\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new StretchLinkTask(that, _link));\r\n             }\r\n\r\n             _link.isDstPointAdjustable = adjustable;\r\n\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n\r\n             _link.refresh();\r\n         }\r\n\r\n         function addLinkPoint(_link, x, y) {\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new StretchLinkTask(that, _link));\r\n             }\r\n             invalidateLink(_link);\r\n             _link.points.splice(_link.points.length - 1, 0, {\r\n                 x: x,\r\n                 y: y\r\n             });\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n             _link.refresh();\r\n         }\r\n\r\n         function removeLinkPoint(_link, index) {\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new StretchLinkTask(that, _link));\r\n             }\r\n             invalidateLink(_link);\r\n             _link.points.splice(index, 1);\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n             _link.refresh();\r\n         }\r\n\r\n         function clearLinkPoints(_link) {\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new StretchLinkTask(that, _link));\r\n             }\r\n             invalidateLink(_link);\r\n             initLinkPoints(_link);\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n             _link.refresh();\r\n         }\r\n\r\n         function getLinkPoint(_link, _index) {\r\n             if (_link.points === null || _index < 0 || _index > _link.points.length - 1) {\r\n                 return null;\r\n             }\r\n             return {\r\n                 x: _link.points[_index].x,\r\n                 y: _link.points[_index].y\r\n             };\r\n         }\r\n\r\n         function setLinkPoint(_link, x, y, _index) {\r\n             if ((_link.points === null || _index < 0 || _index > _link.points.length - 1) ||\r\n                 (_index === 0 && _link.org.pins === null &&\r\n                     !_link.isOrgPointAdjustable) ||\r\n                 (_index === _link.points.length - 1 && _link.dst.pins === null &&\r\n                     !_link.isDstPointAdjustable)) {\r\n                 return;\r\n             }\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(new StretchLinkTask(that, _link));\r\n             }\r\n\r\n             invalidateLink(_link);\r\n\r\n             changePoint(_link, _index, {\r\n                 x: x,\r\n                 y: y\r\n             });\r\n\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n             _link.refresh();\r\n         }\r\n\r\n         function changePoint(_link, idx, pt) {\r\n             if (_link.points === null) {\r\n                 return;\r\n             }\r\n             _link.points[idx] = pt;\r\n         }\r\n\r\n         function getLinkRect(_link) {\r\n             var rc, rcText, i, polylineHelper, pt, ctx, tm, w, h, apt;\r\n\r\n             apt = [];\r\n             if (_link.getLineStyle() === 'bezier') {\r\n                 Helpers.flattenBezier(_link.points[0], _link.points[1],\r\n                     _link.points[2], _link.points[3], apt);\r\n                 rc = new MyRect(apt[0].x, apt[0].y, 0, 0);\r\n                 for (i = 0; i < apt.length - 1; i++) {\r\n                     rc.boundingRect(Helpers.getRectByTwoPoints(apt[i], apt[i + 1]));\r\n                 }\r\n\r\n                 if (_link.getIsSelected()) {\r\n                     // If the link is a bezier curve and is selected, we include the \r\n                     // link points because it is the location of the handles.\r\n                     // The link rect must contain all its points\r\n                     for (i = 0; i < _link.points.length - 1; i++) {\r\n                         rc.boundingRect(Helpers.getRectByTwoPoints(_link.points[i],\r\n                             _link.points[i + 1]));\r\n                     }\r\n                 }\r\n             } else {\r\n                 apt = _link.points;\r\n\r\n                 // The link rect must contain all its points\r\n                 rc = new MyRect(apt[0].x, apt[0].y, 0, 0);\r\n                 for (i = 0; i < apt.length - 1; i++) {\r\n                     rc.boundingRect(Helpers.getRectByTwoPoints(apt[i], apt[i + 1]));\r\n                 }\r\n             }\r\n\r\n             // Include the text\r\n             if (_link.text !== null && _link.text.length > 0) {\r\n                 polylineHelper = new PolylineHelper(apt);\r\n                 pt = polylineHelper.getPointAtFractionLength(0.5);\r\n                 if (pt !== null) {\r\n                     ctx = _link.flow.canvas.getContext('2d');\r\n\r\n                     ctx.font = _link.font;\r\n                     tm = ctx.measureText(_link.text);\r\n                     w = tm.width;\r\n                     h = parseInt(_link.font, 10) * 1.2;\r\n                     if (h === undefined) {\r\n                         h = 16;\r\n                     }\r\n                     rcText = new MyRect(pt.x - w / 2, pt.y - h / 2, w, h);\r\n                     rcText.inflate(h / 2, h / 2); // Increase the size of the rect to be sure\r\n                     rc.boundingRect(rcText);\r\n                 }\r\n             }\r\n\r\n             rc = rc.inflate(_link.flow.linkSelectionAreaWidth,\r\n                 _link.flow.linkSelectionAreaWidth);\r\n             return rc;\r\n         }\r\n\r\n         function initLinkPoints(_link) {\r\n             // clean the collection of points\r\n             _link.points.splice(0, _link.points.length);\r\n\r\n             if (_link.getLineStyle() === 'orthogonal') {\r\n                 initLinkPointsOrthogonal(_link);\r\n             } else if (_link.getLineStyle() === 'database') {\r\n                 initLinkPointsDatabase(_link);\r\n             } else if (_link.getLineStyle() === 'bezier') {\r\n                 initLinkPointsBezier(_link);\r\n             } else {\r\n                 initLinkPointsPolyline(_link);\r\n             }\r\n         }\r\n\r\n         function initLinkPointsOrthogonal(_link) {\r\n             _link.points = orthoRouter.getConnectionLine(_link.org, _link.dst,\r\n                 _link.pinOrg, _link.pinDst, _link.orthoMargin);\r\n             _link.firstSegmentHorizontal = _link.points[0].y === _link.points[1].y;\r\n         }\r\n\r\n         function initLinkPointsDatabase(_link) {\r\n             var k, rc1, rc2;\r\n\r\n             for (k = 0; k < 4; k++) {\r\n                 _link.points.push({\r\n                     x: 0,\r\n                     y: 0\r\n                 });\r\n             }\r\n\r\n             // Calculate points position\r\n             rc1 = getNodeRect(_link.org);\r\n             rc2 = getNodeRect(_link.dst);\r\n             if (rc1.left + rc1.width / 2 < rc2.left + rc2.width / 2) {\r\n                 if (!isOriginPin(_link)) {\r\n                     _link.points[0] = {\r\n                         x: rc1.left + rc1.width,\r\n                         y: rc1.top + rc1.height / 2\r\n                     };\r\n                 } else {\r\n                     _link.points[0] = getLinkOrgPinPoint(_link);\r\n                 }\r\n                 if (!isDestinationPin(_link)) {\r\n                     _link.points[3] = {\r\n                         x: rc2.left,\r\n                         y: rc2.top + rc2.height / 2\r\n                     };\r\n                 } else {\r\n                     _link.points[3] = getLinkDstPinPoint(_link);\r\n                 }\r\n                 _link.points[1] = {\r\n                     x: Math.max(_link.points[0].x + offsetDatabase, 0),\r\n                     y: _link.points[0].y\r\n                 };\r\n                 _link.points[2] = {\r\n                     x: Math.max(_link.points[3].x - offsetDatabase, 0),\r\n                     y: _link.points[3].y\r\n                 };\r\n             } else {\r\n                 if (!isOriginPin(_link)) {\r\n                     _link.points[0] = {\r\n                         x: rc1.left,\r\n                         y: rc1.top + rc1.height / 2\r\n                     };\r\n                 } else {\r\n                     _link.points[0] = getLinkOrgPinPoint(_link);\r\n                 }\r\n                 if (!isDestinationPin(_link)) {\r\n                     _link.points[3] = {\r\n                         x: rc2.left + rc2.width,\r\n                         y: rc2.top + rc2.height / 2\r\n                     };\r\n                 } else {\r\n                     _link.points[3] = getLinkDstPinPoint(_link);\r\n                 }\r\n                 _link.points[1] = {\r\n                     x: Math.max(_link.points[0].x - offsetDatabase, 0),\r\n                     y: _link.points[0].y\r\n                 };\r\n                 _link.points[2] = {\r\n                     x: Math.max(_link.points[3].x + offsetDatabase, 0),\r\n                     y: _link.points[3].y\r\n                 };\r\n             }\r\n         }\r\n\r\n         function initLinkPointsBezier(_link) {\r\n             var pt0, pt3, dx, dy, d, pt1, pt2, rc;\r\n\r\n             _link.points.push({\r\n                 x: 0,\r\n                 y: 0\r\n             });\r\n             _link.points.push({\r\n                 x: 0,\r\n                 y: 0\r\n             });\r\n\r\n             // Calculate points position\r\n             if (!isLinkReflexive(_link)) {\r\n                 if (!isOriginPin(_link)) {\r\n                     calcLinkStartPoint(_link);\r\n                 } else {\r\n                     _link.points[0] = getLinkOrgPinPoint(_link);\r\n                 }\r\n\r\n                 if (!isDestinationPin(_link)) {\r\n                     calcLinkEndPoint(_link);\r\n                 } else {\r\n                     _link.points[_link.points.length - 1] = getLinkDstPinPoint(_link);\r\n                 }\r\n\r\n                 pt0 = _link.points[0];\r\n                 pt3 = _link.points[1];\r\n                 dx = pt3.x - pt0.x;\r\n                 dy = pt3.y - pt0.y;\r\n                 d = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n                 pt1 = {\r\n                     x: pt0.x + dx / 2 - d / 5,\r\n                     y: pt0.y + dy / 2 - d / 5\r\n                 };\r\n                 pt2 = {\r\n                     x: pt0.x + dx / 2 + d / 5,\r\n                     y: pt0.y + dy / 2 + d / 5\r\n                 };\r\n                 _link.points.splice(0, _link.points.length);\r\n                 _link.points.push(pt0);\r\n                 _link.points.push(pt1);\r\n                 _link.points.push(pt2);\r\n                 _link.points.push(pt3);\r\n                 if (!isOriginPin(_link)) {\r\n                     calcLinkStartPoint(_link);\r\n                 }\r\n                 if (!isDestinationPin(_link)) {\r\n                     calcLinkEndPoint(_link);\r\n                 }\r\n             } else {\r\n                 // reflexive _link: we add two points in order to have 4 points\r\n                 _link.points.push({\r\n                     x: 0,\r\n                     y: 0\r\n                 });\r\n                 _link.points.push({\r\n                     x: 0,\r\n                     y: 0\r\n                 });\r\n\r\n                 rc = getNodeRect(_link.org);\r\n                 _link.points[0] = rc.centerPoint();\r\n                 _link.points[1] = {\r\n                     x: rc.left + rc.width + rc.width / 2,\r\n                     y: _link.points[1].y\r\n                 };\r\n                 _link.points[2] = {\r\n                     x: rc.left + rc.width / 2,\r\n                     y: _link.points[2].y\r\n                 };\r\n                 // Manage so that the reflexive link is allways visible even if the\r\n                 // node is placed near the top of the diagram.\r\n                 if (rc.top - rc.height >= 0) {\r\n                     _link.points[1] = {\r\n                         x: _link.points[1].x,\r\n                         y: rc.top - rc.height / 2\r\n                     };\r\n                     _link.points[2] = {\r\n                         x: _link.points[2].x,\r\n                         y: rc.top - rc.height\r\n                     };\r\n                 } else {\r\n                     _link.points[1] = {\r\n                         x: _link.points[1].x,\r\n                         y: rc.top + rc.height + rc.height / 2\r\n                     };\r\n                     _link.points[2] = {\r\n                         x: _link.points[2].x,\r\n                         y: rc.top + rc.height + rc.height\r\n                     };\r\n                 }\r\n                 _link.points[3] = _link.points[0];\r\n\r\n                 if (!isOriginPin(_link)) {\r\n                     calcLinkStartPoint(_link);\r\n                 } else {\r\n                     _link.points[0] = getLinkOrgPinPoint(_link);\r\n                 }\r\n\r\n                 if (!isDestinationPin(_link)) {\r\n                     calcLinkEndPoint(_link);\r\n                 } else {\r\n                     _link.points[_link.points.length - 1] = getLinkDstPinPoint(_link);\r\n                 }\r\n             }\r\n         }\r\n\r\n         function initLinkPointsPolyline(_link) {\r\n             var rc;\r\n\r\n             _link.points.push({\r\n                 x: 0,\r\n                 y: 0\r\n             });\r\n             _link.points.push({\r\n                 x: 0,\r\n                 y: 0\r\n             });\r\n\r\n             // Calculate points position\r\n             if (!isLinkReflexive(_link)) {\r\n                 if (!isOriginPin(_link)) {\r\n                     calcLinkStartPoint(_link);\r\n                 } else {\r\n                     _link.points[0] = getLinkOrgPinPoint(_link);\r\n                 }\r\n\r\n                 if (!isDestinationPin(_link)) {\r\n                     calcLinkEndPoint(_link);\r\n                 } else {\r\n                     _link.points[_link.points.length - 1] = getLinkDstPinPoint(_link);\r\n                 }\r\n             } else {\r\n                 // reflexive link: we add two points in order to have 4 points\r\n                 _link.points.push({\r\n                     x: 0,\r\n                     y: 0\r\n                 });\r\n                 _link.points.push({\r\n                     x: 0,\r\n                     y: 0\r\n                 });\r\n\r\n                 rc = getNodeRect(_link.org);\r\n                 _link.points[0] = rc.centerPoint();\r\n                 _link.points[1] = {\r\n                     x: rc.left + rc.width + rc.width / 2,\r\n                     y: _link.points[1].y\r\n                 };\r\n                 _link.points[2] = {\r\n                     x: rc.left + rc.width / 2,\r\n                     y: _link.points[2].y\r\n                 };\r\n                 // Manage so that the reflexive link is allways visible even if the\r\n                 // node is placed near the top of the diagram.\r\n                 if (rc.top - rc.height >= 0) {\r\n                     _link.points[1] = {\r\n                         x: _link.points[1].x,\r\n                         y: rc.top - rc.height / 2\r\n                     };\r\n                     _link.points[2] = {\r\n                         x: _link.points[2].x,\r\n                         y: rc.top - rc.height\r\n                     };\r\n                 } else {\r\n                     _link.points[1] = {\r\n                         x: _link.points[1].x,\r\n                         y: rc.top + rc.height + rc.height / 2\r\n                     };\r\n                     _link.points[2] = {\r\n                         x: _link.points[2].x,\r\n                         y: rc.top + rc.height + rc.height\r\n                     };\r\n                 }\r\n                 _link.points[3] = _link.points[0];\r\n                 calcLinkStartPoint(_link);\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n         }\r\n\r\n         function fixDatabaseLinkPoints(_link) {\r\n             var pt1, pt2;\r\n\r\n             pt1 = (_link.org.pins === null && !_link.isOrgPointAdjustable) ?\r\n                 getNodeRect(_link.org).centerPoint() :\r\n                 _link.points[0];\r\n             pt2 = (_link.dst.pins === null && !_link.isDstPointAdjustable) ?\r\n                 getNodeRect(_link.dst).centerPoint() :\r\n                 _link.points[3];\r\n             _link.points[1] = {\r\n                 x: _link.points[0].x + offsetDatabase,\r\n                 y: pt1.y\r\n             };\r\n             _link.points[2] = {\r\n                 x: _link.points[3].x - offsetDatabase,\r\n                 y: pt2.y\r\n             };\r\n         }\r\n\r\n         function fixOrthogonalLinkPoints(_link) {\r\n             var n, pt1, pt2;\r\n\r\n             n = _link.points.length;\r\n\r\n             if (_link.org.pins !== null && _link.pinOrg !== undefined) {\r\n                 _link.points[0] = getPinPosition(_link.org, _link.pinOrg);\r\n             }\r\n             if (_link.dst.pins !== null && _link.pinDst !== undefined) {\r\n                 _link.points[n - 1] = getPinPosition(_link.dst, _link.pinDst);\r\n             }\r\n             pt1 = (_link.org.pins === null && !_link.isOrgPointAdjustable) ?\r\n                 getNodeRect(_link.org).centerPoint() :\r\n                 _link.points[0];\r\n             pt2 = (_link.dst.pins === null && !_link.isDstPointAdjustable) ?\r\n                 getNodeRect(_link.dst).centerPoint() :\r\n                 _link.points[n - 1];\r\n\r\n             if (_link.firstSegmentHorizontal) {\r\n                 _link.points[1] = {\r\n                     x: _link.points[1].x,\r\n                     y: pt1.y\r\n                 };\r\n                 if (n % 2 === 0) {\r\n                     _link.points[n - 2] = {\r\n                         x: _link.points[n - 2].x,\r\n                         y: pt2.y\r\n                     };\r\n                 } else {\r\n                     _link.points[n - 2] = {\r\n                         x: pt2.x,\r\n                         y: _link.points[n - 2].y\r\n                     };\r\n                 }\r\n             } else {\r\n                 _link.points[1] = {\r\n                     x: pt1.x,\r\n                     y: _link.points[1].y\r\n                 };\r\n                 if (n % 2 === 0) {\r\n                     _link.points[n - 2] = {\r\n                         x: pt2.x,\r\n                         y: _link.points[n - 2].y\r\n                     };\r\n                 } else {\r\n                     _link.points[n - 2] = {\r\n                         x: _link.points[n - 2].x,\r\n                         y: pt2.y\r\n                     };\r\n                 }\r\n             }\r\n         }\r\n\r\n         // When the link does not end to a pin, it is necessary to calculate \r\n         // the end point\r\n         function calcLinkEndPoint(_link) {\r\n             var rcOrg, rcDst, pt1, pt2, pt, n, polypoints;\r\n\r\n             rcOrg = getNodeRect(_link.org);\r\n             rcDst = getNodeRect(_link.dst);\r\n\r\n             // Get central points of each node\r\n             pt1 = rcOrg.centerPoint();\r\n             pt2 = rcDst.centerPoint();\r\n             n = _link.points.length;\r\n\r\n             // Special case\r\n             if (rcDst.width === 0 || rcDst.height === 0) {\r\n                 _link.points[n - 1] = pt2;\r\n                 return;\r\n             }\r\n\r\n             // Calculate origin point of the link\r\n             if (n === 2) {\r\n                 if (isOriginPin(_link)) {\r\n                     pt = getLinkOrgPinPoint(_link);\r\n                 } else {\r\n                     pt = pt1;\r\n                 }\r\n             } else {\r\n                 pt = _link.points[n - 2];\r\n             }\r\n\r\n             if (isEllipse(_link.dst)) {\r\n                 _link.points[n - 1] = Helpers.getEllipseNearestPt(rcDst, pt, pt2, 0);\r\n             } else if (isPolygon(_link.dst) && _link.dst.polygon !== null) {\r\n                 polypoints = [];\r\n                 getNodePolygonPoints(_link.dst, polypoints);\r\n                 _link.points[n - 1] = Helpers.getPolyNearestPt(polypoints, pt, pt2);\r\n             } else {\r\n                 // all other shapes are considered as rectangular shapes\r\n                 polypoints = [];\r\n                 Helpers.getRectanglePoints(rcDst, polypoints);\r\n                 _link.points[n - 1] = Helpers.getPolyNearestPt(polypoints, pt, pt2);\r\n             }\r\n         }\r\n\r\n         // When the link does not start from a pin, it is necessary to calculate \r\n         // the origin point\r\n         function calcLinkStartPoint(_link) {\r\n             var rcOrg, rcDst, pt1, pt2, pt, n, polypoints;\r\n\r\n             rcOrg = getNodeRect(_link.org);\r\n             rcDst = getNodeRect(_link.dst);\r\n\r\n             // Get central points of each node\r\n             pt1 = rcOrg.centerPoint();\r\n             pt2 = rcDst.centerPoint();\r\n\r\n             // Special case\r\n             if (rcOrg.width === 0 || rcOrg.height === 0) {\r\n                 _link.points[0] = pt1;\r\n                 return;\r\n             }\r\n\r\n             // Calculate origin point of the link\r\n             if (_link.points.length === 2) {\r\n                 if (isDestinationPin(_link)) {\r\n                     pt = getLinkDstPinPoint(_link);\r\n                 } else {\r\n                     pt = pt2;\r\n                 }\r\n             } else {\r\n                 pt = _link.points[1];\r\n             }\r\n\r\n             if (isEllipse(_link.org)) {\r\n                 _link.points[0] = Helpers.getEllipseNearestPt(rcOrg, pt, pt1, 0);\r\n             } else if (isPolygon(_link.org) && _link.org.polygon !== null) {\r\n                 polypoints = [];\r\n                 getNodePolygonPoints(_link.org, polypoints);\r\n                 _link.points[0] = Helpers.getPolyNearestPt(polypoints, pt, pt1);\r\n             } else {\r\n                 // all other shapes are considered as rectangular shapes\r\n                 polypoints = [];\r\n                 Helpers.getRectanglePoints(rcOrg, polypoints);\r\n                 _link.points[0] = Helpers.getPolyNearestPt(polypoints, pt, pt1);\r\n             }\r\n         }\r\n\r\n         function updateLinkPoints(_link, pt, _handle) {\r\n             var n = _link.points.length;\r\n             if (_link.firstSegmentHorizontal) { // First segment horizontal\r\n                 if (n > 3) {\r\n                     if (_handle === 0) {\r\n                         _link.points[0] = pt;\r\n                         _link.points[1] = {\r\n                             x: _link.points[1].x,\r\n                             y: pt.y\r\n                         };\r\n                     } else if (_handle === 1) {\r\n                         _link.points[1] = {\r\n                             x: pt.x,\r\n                             y: _link.points[1].y\r\n                         };\r\n                         _link.points[2] = {\r\n                             x: pt.x,\r\n                             y: _link.points[2].y\r\n                         };\r\n                     } else if (_handle === n - 1) {\r\n                         if (n % 2 === 0) {\r\n                             _link.points[n - 1] = pt;\r\n                             _link.points[n - 2] = {\r\n                                 x: _link.points[n - 2].x,\r\n                                 y: pt.y\r\n                             };\r\n                         } else {\r\n                             _link.points[n - 2] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[n - 2].y\r\n                             };\r\n                         }\r\n                     } else if (_handle === n - 2) {\r\n                         if (n % 2 === 0) {\r\n                             _link.points[n - 3] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[n - 3].y\r\n                             };\r\n                             _link.points[n - 2] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[n - 2].y\r\n                             };\r\n                         } else {\r\n                             _link.points[n - 3] = {\r\n                                 x: _link.points[n - 3].x,\r\n                                 y: pt.y\r\n                             };\r\n                             _link.points[n - 2] = {\r\n                                 x: _link.points[n - 2].x,\r\n                                 y: pt.y\r\n                             };\r\n                         }\r\n                     } else {\r\n                         _link.points[_handle] = pt;\r\n                         if (_handle % 2 === 0) {\r\n                             _link.points[_handle - 1] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[_handle - 1].y\r\n                             };\r\n                             _link.points[_handle + 1] = {\r\n                                 x: _link.points[_handle + 1].x,\r\n                                 y: pt.y\r\n                             };\r\n                         } else {\r\n                             _link.points[_handle - 1] = {\r\n                                 x: _link.points[_handle - 1].x,\r\n                                 y: pt.y\r\n                             };\r\n                             _link.points[_handle + 1] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[_handle + 1].y\r\n                             };\r\n                         }\r\n                     }\r\n                 }\r\n             } else { // First segment vertical\r\n                 if (n > 3) {\r\n                     if (_handle === 0) {\r\n                         _link.points[0] = pt;\r\n                         _link.points[1] = {\r\n                             x: pt.x,\r\n                             y: _link.points[1].y\r\n                         };\r\n                     } else if (_handle === 1) {\r\n                         _link.points[1] = {\r\n                             x: _link.points[1].x,\r\n                             y: pt.y\r\n                         };\r\n                         _link.points[2] = {\r\n                             x: _link.points[2].x,\r\n                             y: pt.y\r\n                         };\r\n                     } else if (_handle === n - 1) {\r\n                         if (n % 2 === 0) {\r\n                             _link.points[n - 2] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[n - 2].y\r\n                             };\r\n                         } else {\r\n                             _link.points[n - 2] = {\r\n                                 x: _link.points[n - 2].x,\r\n                                 y: pt.y\r\n                             };\r\n                         }\r\n                     } else if (_handle === n - 2) {\r\n                         if (n % 2 === 0) {\r\n                             _link.points[n - 3] = {\r\n                                 x: _link.points[n - 3].x,\r\n                                 y: pt.y\r\n                             };\r\n                             _link.points[n - 2] = {\r\n                                 x: _link.points[n - 2].x,\r\n                                 y: pt.y\r\n                             };\r\n                         } else {\r\n                             _link.points[n - 3] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[n - 3].y\r\n                             };\r\n                             _link.points[n - 2] = {\r\n                                 x: _link.points[n - 2].x,\r\n                                 y: pt.y\r\n                             };\r\n                         }\r\n                     } else {\r\n                         _link.points[_handle] = pt;\r\n                         if (_handle % 2 === 0) {\r\n                             _link.points[_handle - 1] = {\r\n                                 x: _link.points[_handle - 1].x,\r\n                                 y: pt.y\r\n                             };\r\n                             _link.points[_handle + 1] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[_handle + 1].y\r\n                             };\r\n                         } else {\r\n                             _link.points[_handle - 1] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[_handle - 1].y\r\n                             };\r\n                             _link.points[_handle + 1] = {\r\n                                 x: _link.points[_handle + 1].x,\r\n                                 y: pt.y\r\n                             };\r\n                         }\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Add a medium point between two points of a link.\r\n         function insertLinkPoint(_link, pt, pos) {\r\n             _link.points.splice(pos + 1, 0, pt);\r\n         }\r\n\r\n         // Used when stretching a link\r\n         function saveLinkPoints(_link) {\r\n             var i;\r\n\r\n             _link.points2 = [_link.points.length];\r\n             for (i = 0; i < _link.points.length; i++) {\r\n                 _link.points2[i] = _link.points[i];\r\n             }\r\n         }\r\n\r\n         // Get the position of the origin pin of the link\r\n         function getLinkOrgPinPoint(_link) {\r\n             var rc, x, y;\r\n\r\n             rc = getNodeRect(_link.org);\r\n             x = rc.left + (rc.width / 100) * _link.org.pins[_link.pinOrg][0];\r\n             y = rc.top + (rc.height / 100) * _link.org.pins[_link.pinOrg][1];\r\n             return {\r\n                 x: x,\r\n                 y: y\r\n             };\r\n         }\r\n\r\n         // Get the position of the destination pin of the link\r\n         function getLinkDstPinPoint(_link) {\r\n             var rc, x, y;\r\n\r\n             rc = getNodeRect(_link.dst);\r\n             x = rc.left + (rc.width / 100) * _link.dst.pins[_link.pinDst][0];\r\n             y = rc.top + (rc.height / 100) * _link.dst.pins[_link.pinDst][1];\r\n             return {\r\n                 x: x,\r\n                 y: y\r\n             };\r\n         }\r\n\r\n         // Does the link ends to a pin ? \r\n         function isDestinationPin(_link) {\r\n             return _link.pinDst !== null && _link.dst.pins !== null &&\r\n                 (_link.pinDst >= 0 && _link.pinDst < _link.dst.pins.length);\r\n         }\r\n\r\n         // Does the link start from apin ?\r\n         function isOriginPin(_link) {\r\n             return _link.pinOrg !== null && _link.org.pins !== null &&\r\n                 (_link.pinOrg >= 0 && _link.pinOrg < _link.org.pins.length);\r\n         }\r\n\r\n         // Copy the properties of a node model to a node\r\n         function copyNodeProperties(_node, model) {\r\n             if (model.strokeStyle !== undefined) {\r\n                 _node.strokeStyle = model.strokeStyle;\r\n             }\r\n             if (model.fillStyle !== undefined) {\r\n                 _node.fillStyle = model.fillStyle;\r\n             }\r\n             if (model.gradientFillStyle !== undefined) {\r\n                 _node.gradientFillStyle = model.gradientFillStyle;\r\n             }\r\n             if (model.textFillStyle !== undefined) {\r\n                 _node.textFillStyle = model.textFillStyle;\r\n             }\r\n             if (model.lineWidth !== undefined) {\r\n                 _node.lineWidth = model.lineWidth;\r\n             }\r\n             if (model.shapeFamily !== undefined) {\r\n                 _node.shapeFamily = model.shapeFamily;\r\n             }\r\n             if (model.polygon !== undefined) {\r\n                 _node.polygon = model.polygon;\r\n             }\r\n             if (model.drawShape !== undefined) {\r\n                 _node.drawShape = model.drawShape;\r\n             }\r\n             if (model.fillShape !== undefined) {\r\n                 _node.fillShape = model.fillShape;\r\n             }\r\n             if (model.pins !== undefined) {\r\n                 _node.pins = model.pins;\r\n             }\r\n             if (model.isContextHandle !== undefined) {\r\n                 _node.isContextHandle = model.isContextHandle;\r\n             }\r\n             if (model.isXSizeable !== undefined) {\r\n                 _node.isXSizeable = model.isXSizeable;\r\n             }\r\n             if (model.isYSizeable !== undefined) {\r\n                 _node.isYSizeable = model.isYSizeable;\r\n             }\r\n             if (model.isXMoveable !== undefined) {\r\n                 _node.isXMoveable = model.isXMoveable;\r\n             }\r\n             if (model.isYMoveable !== undefined) {\r\n                 _node.isYMoveable = model.isYMoveable;\r\n             }\r\n             if (model.isOutLinkable !== undefined) {\r\n                 _node.isOutLinkable = model.isOutLinkable;\r\n             }\r\n             if (model.isInLinkable !== undefined) {\r\n                 _node.isInLinkable = model.isInLinkable;\r\n             }\r\n             if (model.isSelectable !== undefined) {\r\n                 _node.isSelectable = model.isSelectable;\r\n             }\r\n             if (model.isShadowed !== undefined) {\r\n                 _node.isShadowed = model.isShadowed;\r\n             }\r\n             if (model.image !== undefined) {\r\n                 _node.image = model.image;\r\n             }\r\n             if (model.textMargin !== undefined) {\r\n                 _node.textMargin = model.textMargin;\r\n             }\r\n             if (model.imageMargin !== undefined) {\r\n                 _node.imageMargin = model.imageMargin;\r\n             }\r\n             if (model.textPosition !== undefined) {\r\n                 _node.textPosition = model.textPosition;\r\n             }\r\n             if (model.imagePosition !== undefined) {\r\n                 _node.imagePosition = model.imagePosition;\r\n             }\r\n             if (model.font !== undefined) {\r\n                 _node.font = model.font;\r\n             }\r\n             if (model.textLineHeight !== undefined) {\r\n                 _node.textLineHeight = model.textLineHeight;\r\n             }\r\n         }\r\n\r\n         // Copy the properties of a link model to a link\r\n         function copyLinkProperties(_link, model) {\r\n             if (model.strokeStyle !== undefined) {\r\n                 _link.strokeStyle = model.strokeStyle;\r\n             }\r\n             if (model.fillStyle !== undefined) {\r\n                 _link.fillStyle = model.fillStyle;\r\n             }\r\n             if (model.textFillStyle !== undefined) {\r\n                 _link.textFillStyle = model.textFillStyle;\r\n             }\r\n             if (model.lineWidth !== undefined) {\r\n                 _link.lineWidth = model.lineWidth;\r\n             }\r\n             if (model.isStretchable !== undefined) {\r\n                 _link.isStretchable = model.isStretchable;\r\n             }\r\n             if (model.isSelectable !== undefined) {\r\n                 _link.isSelectable = model.isSelectable;\r\n             }\r\n             if (model.isContextHandle !== undefined) {\r\n                 _link.isContextHandle = model.isContextHandle;\r\n             }\r\n             if (model.isShadowed !== undefined) {\r\n                 _link.isShadowed = model.isShadowed;\r\n             }\r\n             if (model.font !== undefined) {\r\n                 _link.font = model.font;\r\n             }\r\n             if (model.roundedCornerSize !== undefined) {\r\n                 _link.roundedCornerSize = model.roundedCornerSize;\r\n             }\r\n             if (model.isOrientedText !== undefined) {\r\n                 _link.isOrientedText = model.isOrientedText;\r\n             }\r\n             if (model.isOpaque !== undefined) {\r\n                 _link.isOpaque = model.isOpaque;\r\n             }\r\n             if (model.arrowDst !== undefined) {\r\n                 _link.arrowDst = model.arrowDst;\r\n             }\r\n             if (model.arrowOrg !== undefined) {\r\n                 _link.arrowOrg = model.arrowOrg;\r\n             }\r\n             if (model.lineStyle !== undefined) {\r\n                 _link.lineStyle = model.lineStyle;\r\n             }\r\n             if (model.orthoMargin !== undefined) {\r\n                 _link.orthoMargin = model.orthoMargin;\r\n             }\r\n             if (model.points !== undefined) {\r\n                 _link.points = model.points.slice();\r\n             }\r\n         }\r\n\r\n         // Selection of an item (node or link)\r\n         function selectItem(itm, optimized) {\r\n             var i;\r\n\r\n             _isSelChanged = true;\r\n             if (optimized) {\r\n                 if (that.isNode(itm)) {\r\n                     invalidateNode(itm);\r\n                 } else if (that.isLink(itm)) {\r\n                     invalidateLink(itm);\r\n                 }\r\n                 return;\r\n             }\r\n             if (itm.getIsSelected()) {\r\n                 // If the item is selected, add it at the end of the selection list\r\n                 _selectedItems.push(itm);\r\n             } else {\r\n                 // If the item is not selected, remove it from the list of selected items\r\n                 for (i = _selectedItems.length - 1; i >= 0; i--) {\r\n                     if (itm === _selectedItems[i]) {\r\n                         break;\r\n                     }\r\n                 }\r\n                 _selectedItems.splice(i, 1);\r\n             }\r\n\r\n             if (that.canSendSelectionChangedEvent) {\r\n                 // Send the selectionChanged event\r\n                 fireSelectionChangeEvent(itm);\r\n             }\r\n             itm.refresh();\r\n         }\r\n\r\n\r\n         // Painting helpers--------------------------------------------------------------\r\n\r\n         // Update the canvas drawing\r\n         function updateDrawing() {\r\n             if (_repaint === 0) {\r\n                 var ctx = that.canvas.getContext('2d');\r\n                 paintInvalidatedRect(ctx);\r\n                 resetInvalidatedRect();\r\n             }\r\n         }\r\n\r\n         // Set the rectangular portion of AddFlow that needs to be repainted\r\n         function invalidate(rect) {\r\n             if (rect === null) {\r\n                 rect = new MyRect(0, 0, that.canvas.width / that.zoom, that.canvas.height / that.zoom);\r\n             }\r\n             if (invRect === null) {\r\n                 invRect = rect;\r\n             } else {\r\n                 invRect.boundingRect(rect);\r\n             }\r\n         }\r\n\r\n         // Reset the rectangular portion of AddFlow that needs to be repainted\r\n         function resetInvalidatedRect() {\r\n             invRect = null;\r\n         }\r\n\r\n         function paintInvalidatedRect(ctx) {\r\n             ctx.save();\r\n             ctx.scale(that.zoom, that.zoom);\r\n             setClipRegion(ctx, invRect);\r\n             drawBackground(ctx, invRect);\r\n             if (that.ownerDraw !== null && invRect !== null) {\r\n                 that.ownerDraw(ctx);\r\n             }\r\n             drawItems(ctx, invRect);\r\n             drawSelection(ctx, invRect);\r\n             drawPins(ctx, pinnedItem);\r\n             drawOutline(ctx);\r\n             ctx.restore();\r\n         }\r\n\r\n         // Define a rectangular clipping region\r\n         function setClipRegion(ctx, rect) {\r\n             if (rect === null) {\r\n                 return;\r\n             }\r\n             ctx.beginPath();\r\n             ctx.moveTo(rect.left, rect.top);\r\n             ctx.lineTo(rect.left + rect.width, rect.top);\r\n             ctx.lineTo(rect.left + rect.width, rect.top + rect.height);\r\n             ctx.lineTo(rect.left, rect.top + rect.height);\r\n             ctx.closePath();\r\n             ctx.clip();\r\n         }\r\n\r\n         // Paint a rectangular region of the canvas\r\n         function drawBackground(ctx, rect) {\r\n             if (rect === null) {\r\n                 return;\r\n             }\r\n             ctx.fillStyle = that.fillStyle;\r\n             ctx.fillRect(rect.left, rect.top, rect.width, rect.height);\r\n             if (that.gridDraw) {\r\n                 drawGrid(ctx, that.gridSizeX, that.gridSizeY, that.gridStrokeStyle, rect);\r\n             }\r\n         }\r\n\r\n         // Draw the grid used for snapping\r\n         function drawGrid(ctx, xgrid, ygrid, strokeStyle, rect) {\r\n             var xStart, yStart, xEnd, yEnd, x, y;\r\n\r\n             xStart = Math.floor((rect.left / xgrid)) * xgrid;\r\n             yStart = Math.floor((rect.top / ygrid)) * ygrid;\r\n             xEnd = rect.left + rect.width;\r\n             yEnd = rect.top + rect.height;\r\n             ctx.strokeStyle = strokeStyle;\r\n             ctx.lineWidth = 0.5;\r\n             for (x = xStart; x <= xEnd; x += xgrid) {\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(x, rect.top);\r\n                 ctx.lineTo(x, rect.top + rect.height);\r\n                 ctx.stroke();\r\n             }\r\n             for (y = yStart; y <= yEnd; y += ygrid) {\r\n                 ctx.beginPath();\r\n                 ctx.moveTo(rect.left, y);\r\n                 ctx.lineTo(rect.left + rect.width, y);\r\n                 ctx.stroke();\r\n             }\r\n         }\r\n\r\n         // Draw the pins used to create links\r\n         function drawPins(ctx, itm) {\r\n             var k;\r\n\r\n             if (itm === null) {\r\n                 return;\r\n             }\r\n             if (!_isCreatingNode && !_isMovingNode && !_isResizingNode &&\r\n                 !_isZooming && !_isSelecting) {\r\n                 if (itm.pins !== null) {\r\n                     for (k = 0; k < pinAreas.length; k++) {\r\n                         drawPinArea(ctx, pinAreas[k]);\r\n                     }\r\n                 } else {\r\n                     if (pinAreaCentral !== null) {\r\n                         drawCentralPinArea(ctx, pinAreaCentral);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Draw all the items (nodes and links) partially \r\n         // contained in a rectangular region of the canvas\r\n         function drawItems(ctx, rect) {\r\n             var i, itm, inc, rc, itemList;\r\n\r\n             if (rect === null) {\r\n                 return;\r\n             }\r\n\r\n             if (_isQuadtree) {\r\n                 itemList = _quadtree._getItems(rect);\r\n             } else {\r\n                 itemList = _items;\r\n             }\r\n\r\n             for (i = 0; i < itemList.length; i++) {\r\n                 itm = itemList[i];\r\n                 inc = itm.lineWidth + that.handleSize;\r\n                 if (that.isNode(itm)) {\r\n                     rc = getNodeRect(itm);\r\n                 } else {\r\n                     rc = getLinkRect(itm);\r\n                 }\r\n                 rc = rc.inflate(inc, inc);\r\n                 if (rc.intersectsWith(rect)) {\r\n                     if (that.isNode(itm)) {\r\n                         drawNode(ctx, itm);\r\n                     } else {\r\n                         drawLink(ctx, itm);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Draw the selection handles of all the selected items (nodes and links)  \r\n         // partially contained in a rectangular region of the canvas.\r\n         function drawSelection(ctx, rect) {\r\n             var i;\r\n\r\n             if (rect === null) {\r\n                 return;\r\n             }\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 drawItemSelection(ctx, rect, _selectedItems[i]);\r\n             }\r\n         }\r\n\r\n         function drawItemSelection(ctx, rect, itm) {\r\n             var j, _handles, inc, rc;\r\n\r\n             _handles = [];\r\n             inc = itm.lineWidth + that.handleSize;\r\n             if (that.isNode(itm)) {\r\n                 rc = getNodeRect(itm);\r\n             } else {\r\n                 rc = getLinkRect(itm);\r\n             }\r\n             rc = rc.inflate(inc, inc);\r\n             if (rc.intersectsWith(rect)) {\r\n                 if (_isNode(itm)) {\r\n                     getNodeHandles(itm, _handles);\r\n                     for (j = 0; j < _handles.length; j++) {\r\n                         drawResizeHandle(ctx, _handles[j]);\r\n                     }\r\n                     if (that.canShowContextHandle && itm.isContextHandle) {\r\n                         drawNodeContextHandle(ctx, itm);\r\n                     }\r\n                 } else if (_isLink(itm)) {\r\n                     getLinkHandles(itm, _handles);\r\n                     for (j = 0; j < _handles.length; j++) {\r\n                         drawStretchHandle(ctx, _handles[j]);\r\n                     }\r\n                     if (that.canShowContextHandle && itm.isContextHandle) {\r\n                         drawLinkContextHandle(ctx, itm);\r\n                     }\r\n                     if (itm.getLineStyle() === 'bezier') {\r\n                         drawBezierVisual(ctx, itm);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         function drawNodeContextHandle(ctx, _node) {\r\n             var rc;\r\n\r\n             rc = getNodeContextHandle(_node);\r\n             if (rc !== null) {\r\n                 drawContextHandle(ctx, rc.left, rc.top);\r\n             }\r\n         }\r\n\r\n         function drawLinkContextHandle(ctx, _link) {\r\n             var rc;\r\n\r\n             rc = getLinkContextHandle(_link);\r\n             if (rc !== null) {\r\n                 drawContextHandle(ctx, rc.left, rc.top);\r\n             }\r\n         }\r\n\r\n         function drawContextHandle(ctx, x, y) {\r\n             var d, gradObj;\r\n\r\n             d = that.contextHandleSize * 2 / 5 - 2;\r\n             ctx.lineWidth = 1;\r\n             ctx.strokeStyle = that.contextHandleStrokeStyle;\r\n             gradObj = ctx.createLinearGradient(x, y, x + d, y + d);\r\n             gradObj.addColorStop(0, that.contextHandleGradientColor1);\r\n             gradObj.addColorStop(1, that.contextHandleGradientColor2);\r\n             ctx.fillStyle = gradObj;\r\n             Helpers.drawEllipse(ctx, x, y, d, d);\r\n             ctx.stroke();\r\n             ctx.fill();\r\n             x += 1 + d;\r\n             gradObj = ctx.createLinearGradient(x, y, x + d, y + d);\r\n             gradObj.addColorStop(0, that.contextHandleGradientColor1);\r\n             gradObj.addColorStop(1, that.contextHandleGradientColor2);\r\n             ctx.fillStyle = gradObj;\r\n             Helpers.drawEllipse(ctx, x, y, d, d);\r\n             ctx.stroke();\r\n             ctx.fill();\r\n             x += 1 + d;\r\n             gradObj = ctx.createLinearGradient(x, y, x + d, y + d);\r\n             gradObj.addColorStop(0, that.contextHandleGradientColor1);\r\n             gradObj.addColorStop(1, that.contextHandleGradientColor2);\r\n             ctx.fillStyle = gradObj;\r\n             Helpers.drawEllipse(ctx, x, y, d, d);\r\n             ctx.stroke();\r\n             ctx.fill();\r\n         }\r\n\r\n         // Draw a resizing handle (defined by a rectangle) of a node\r\n         function drawResizeHandle(ctx, rect) {\r\n             var gradObj;\r\n\r\n             ctx.lineWidth = 1;\r\n             gradObj = ctx.createLinearGradient(rect.left, rect.top,\r\n                 rect.left + rect.width, rect.top + rect.height);\r\n             gradObj.addColorStop(0, that.handleGradientColor1);\r\n             gradObj.addColorStop(1, that.handleGradientColor2);\r\n             ctx.fillStyle = gradObj;\r\n             ctx.strokeStyle = that.handleStrokeStyle;\r\n             Helpers.drawEllipse(ctx, rect.left, rect.top, rect.width, rect.height);\r\n             ctx.stroke();\r\n             ctx.fill();\r\n         }\r\n\r\n         // Draw a node pin used to create links\r\n         function drawPinArea(ctx, rect) {\r\n             var gradObj;\r\n\r\n             ctx.lineWidth = 1;\r\n             gradObj = ctx.createLinearGradient(rect.left, rect.top,\r\n                 rect.left + rect.width, rect.top + rect.height);\r\n             gradObj.addColorStop(0, that.pinGradientColor1);\r\n             gradObj.addColorStop(1, that.pinGradientColor2);\r\n             ctx.fillStyle = gradObj;\r\n             ctx.strokeStyle = that.pinStrokeStyle;\r\n             Helpers.drawRectangle(ctx, rect.left, rect.top, rect.width, rect.height);\r\n             ctx.stroke();\r\n             ctx.fill();\r\n         }\r\n\r\n         // Draw the central node pin used to create links.\r\n         function drawCentralPinArea(ctx, rect) {\r\n             var gradObj;\r\n\r\n             ctx.lineWidth = 1;\r\n             gradObj = ctx.createLinearGradient(rect.left, rect.top,\r\n                 rect.left + rect.width, rect.top + rect.height);\r\n             gradObj.addColorStop(0, that.centralPinGradientColor1);\r\n             gradObj.addColorStop(1, that.centralPinGradientColor2);\r\n             ctx.fillStyle = gradObj;\r\n             ctx.strokeStyle = that.centralPinStrokeColor;\r\n             Helpers.drawRectangle(ctx, rect.left, rect.top, rect.width, rect.height);\r\n             ctx.stroke();\r\n             ctx.fill();\r\n         }\r\n\r\n         // Draw a stretching handle (defined by a rectangle) of a link.\r\n         function drawStretchHandle(ctx, rect) {\r\n             var gradObj;\r\n\r\n             ctx.lineWidth = 1;\r\n             gradObj = ctx.createLinearGradient(rect.left, rect.top,\r\n                 rect.left + rect.width, rect.top + rect.height);\r\n             gradObj.addColorStop(0, that.handleGradientColor1);\r\n             gradObj.addColorStop(1, that.handleGradientColor2);\r\n             ctx.fillStyle = gradObj;\r\n             ctx.strokeStyle = that.handleStrokeStyle;\r\n             Helpers.drawEllipse(ctx, rect.left, rect.top, rect.width, rect.height);\r\n             ctx.stroke();\r\n             ctx.fill();\r\n         }\r\n\r\n         // This function is used when the user creates a node or a link interactively \r\n         // with the mouse, or when he draws interactively a rectangle to select items\r\n         // or make a zoom.\r\n         function drawOutline(ctx) {\r\n             if (_isCreatingNode) {\r\n                 drawNodeOutline(ctx);\r\n             } else if (_isCreatingLink) {\r\n                 drawLinkOutline(ctx);\r\n             } else if (_isSelecting || _isZooming) {\r\n                 drawSelectOutline(ctx);\r\n             }\r\n         }\r\n\r\n         // This function is used when the user creates a node interactively.\r\n         // A node shape is drawn at each mouse move.\r\n         function drawNodeOutline(ctx) {\r\n             var rc, gradObj, polypoints;\r\n\r\n             rc = new MyRect(ptOrg.x, ptOrg.y, ptPrior.x - ptOrg.x, ptPrior.y - ptOrg.y);\r\n             ctx.lineWidth = that.nodeModel.lineWidth;\r\n             ctx.strokeStyle = that.nodeModel.strokeStyle;\r\n             if (that.nodeModel.gradientFillStyle !== that.nodeModel.fillStyle) {\r\n                 gradObj = ctx.createLinearGradient(rc.left, rc.top,\r\n                     rc.left + rc.width, rc.top + rc.height);\r\n                 gradObj.addColorStop(0, that.nodeModel.fillStyle);\r\n                 gradObj.addColorStop(1, that.nodeModel.gradientFillStyle);\r\n                 ctx.fillStyle = gradObj;\r\n             } else {\r\n                 ctx.fillStyle = that.nodeModel.fillStyle;\r\n             }\r\n             if (isEllipse(that.nodeModel)) {\r\n                 Helpers.drawEllipse(ctx, rc.left, rc.top, rc.width, rc.height);\r\n             } else if (isRectangle(that.nodeModel)) {\r\n                 Helpers.drawRectangle(ctx, rc.left, rc.top, rc.width, rc.height);\r\n             } else if (isPolygon(that.nodeModel)) {\r\n                 if (that.nodeModel.polygon !== undefined && that.nodeModel.polygon !== null) {\r\n                     polypoints = [];\r\n                     that.nodeModel.x = rc.left;\r\n                     that.nodeModel.y = rc.top;\r\n                     that.nodeModel.w = rc.width;\r\n                     that.nodeModel.h = rc.height;\r\n                     getNodePolygonPoints(that.nodeModel, polypoints);\r\n                     Helpers.drawPolygon(ctx, polypoints);\r\n                 } else {\r\n                     Helpers.drawRectangle(ctx, rc.left, rc.top, rc.width, rc.height);\r\n                 }\r\n             } else {\r\n                 that.nodeModel.drawShape(ctx, rc.left, rc.top, rc.width, rc.height);\r\n             }\r\n             ctx.stroke();\r\n             ctx.fill();\r\n         }\r\n\r\n         // This function is used when the user creates a link interactively.\r\n         // A link line is drawn at each mouse move.\r\n         function drawLinkOutline(ctx) {\r\n             ctx.lineWidth = that.linkModel.lineWidth;\r\n             ctx.strokeStyle = that.linkModel.strokeStyle;\r\n             ctx.beginPath();\r\n             ctx.moveTo(ptOrg.x, ptOrg.y);\r\n             ctx.lineTo(ptPrior.x, ptPrior.y);\r\n             ctx.stroke();\r\n         }\r\n\r\n         // This function is used when the user draws interactively a rectangle. \r\n         // to select items or make a zoom.\r\n         // A rectangle is drawn at each mouse move.\r\n         function drawSelectOutline(ctx) {\r\n             ctx.strokeStyle = that.selRectStrokeStyle;\r\n             ctx.fillStyle = that.selRectFillStyle;\r\n             ctx.lineWidth = that.selRectLineWidth;\r\n             ctx.strokeRect(tmpRect.left, tmpRect.top, tmpRect.width, tmpRect.height);\r\n             ctx.fillRect(tmpRect.left, tmpRect.top, tmpRect.width, tmpRect.height);\r\n         }\r\n\r\n         // Draw the two lines used to display a selected bezier link.\r\n         function drawBezierVisual(ctx, _link) {\r\n             ctx.lineWidth = 0.2;\r\n             ctx.strokeStyle = that.bezierSelectionLinesStrokeStyle;\r\n             ctx.moveTo(_link.points[0].x, _link.points[0].y);\r\n             ctx.lineTo(_link.points[1].x, _link.points[1].y);\r\n             ctx.moveTo(_link.points[3].x, _link.points[3].y);\r\n             ctx.lineTo(_link.points[2].x, _link.points[2].y);\r\n             ctx.stroke();\r\n         }\r\n\r\n         // Just set the shadow properties of the canvas.\r\n         function setShadowProperties(ctx, flow) {\r\n             ctx.shadowOffsetX = flow.shadowOffsetX;\r\n             ctx.shadowOffsetY = flow.shadowOffsetY;\r\n             ctx.shadowBlur = flow.shadowBlur;\r\n             ctx.shadowColor = flow.shadowColor;\r\n         }\r\n\r\n         // Node drawing--------------------------------------------------------------\r\n\r\n         // Draw a node. \r\n         // First draw the node shape then the node content (text and image)\r\n         function drawNode(ctx, node) {\r\n             ctx.save();\r\n             drawNodeShape(ctx, node);\r\n             ctx.restore();\r\n             ctx.save();\r\n             drawNodeContent(ctx, node);\r\n             ctx.restore();\r\n         }\r\n\r\n         // Draw the shape of a node\r\n         function drawNodeShape(ctx, node) {\r\n             var gradObj, polypoints;\r\n\r\n             if (node.isShadowed) {\r\n                 setShadowProperties(ctx, that);\r\n             }\r\n             ctx.lineWidth = node.lineWidth;\r\n             ctx.strokeStyle = node.strokeStyle;\r\n\r\n             // Draw node border shape\r\n             if (isEllipse(node)) {\r\n                 Helpers.drawEllipse(ctx, node.x, node.y, node.w, node.h);\r\n             } else if (isRectangle(node)) {\r\n                 Helpers.drawRectangle(ctx, node.x, node.y, node.w, node.h);\r\n             } else if (isPolygon(node)) {\r\n                 if (node.polygon !== undefined && node.polygon !== null) {\r\n                     polypoints = [];\r\n                     getNodePolygonPoints(node, polypoints);\r\n                     Helpers.drawPolygon(ctx, polypoints);\r\n                 } else {\r\n                     Helpers.drawRectangle(ctx, node.x, node.y, node.w, node.h);\r\n                 }\r\n             } else {\r\n                 if (node.drawShape !== undefined && node.drawShape !== null) {\r\n                     node.drawShape(ctx, node.x, node.y, node.w, node.h);\r\n                 } else {\r\n                     Helpers.drawRectangle(ctx, node.x, node.y, node.w, node.h);\r\n                 }\r\n             }\r\n             ctx.stroke();\r\n\r\n             // Fill the node shape\r\n             if (node.gradientFillStyle !== node.fillStyle) {\r\n                 gradObj = ctx.createLinearGradient(node.x, node.y,\r\n                     node.x + node.w, node.y + node.h);\r\n                 gradObj.addColorStop(0, node.fillStyle);\r\n                 gradObj.addColorStop(1, node.gradientFillStyle);\r\n                 ctx.fillStyle = gradObj;\r\n             } else {\r\n                 ctx.fillStyle = node.fillStyle;\r\n             }\r\n             ctx.fill();\r\n\r\n             if (node.fillShape !== undefined && node.fillShape !== null) {\r\n                 node.fillShape(ctx, node.x, node.y, node.w, node.h);\r\n             }\r\n         }\r\n\r\n         // Draw the text and image of a node\r\n         function drawNodeContent(ctx, node) {\r\n             var rcImg, size, x, y, w, h, rc, inc;\r\n\r\n             if ((node.text === null || node.text.length === 0) && node.image === null) {\r\n                 return;\r\n             }\r\n\r\n             // Set Clip region\r\n             inc = node.lineWidth / 2;\r\n             rc = getNodeRect(node);\r\n             rc = rc.inflate(inc, inc);\r\n             setClipRegion(ctx, rc);\r\n\r\n             if (node.image !== undefined && node.image !== null) {\r\n                 /*&& node.image.complete*/\r\n                 x = rc.left + node.imageMargin.left;\r\n                 y = rc.top + node.imageMargin.top;\r\n                 w = Math.max(0, rc.width - node.imageMargin.left - node.imageMargin.right);\r\n                 h = Math.max(0, rc.height - node.imageMargin.top - node.imageMargin.bottom);\r\n                 rcImg = getNodeImageRectangle(node, new MyRect(x, y, w, h), node.image);\r\n                 ctx.drawImage(node.image, rcImg.left, rcImg.top, rcImg.width, rcImg.height);\r\n             }\r\n\r\n             if (node.text !== undefined && node.text !== null && node.text.length > 0) {\r\n                 x = rc.left + node.textMargin.left;\r\n                 y = rc.top + node.textMargin.top;\r\n                 w = Math.max(0, rc.width - node.textMargin.left - node.textMargin.right);\r\n                 h = Math.max(0, rc.height - node.textMargin.top - node.textMargin.bottom);\r\n\r\n                 ctx.fillStyle = node.textFillStyle;\r\n                 ctx.font = node.font;\r\n                 ctx.textBaseline = 'top';\r\n\r\n                 size = {\r\n                     width: 0,\r\n                     height: 0\r\n                 };\r\n                 if (node.textLineHeight !== null) {\r\n                     // Get the size of the text (which may contain several lines)\r\n                     size = Helpers.multiFillText(ctx, node.text, 0, 0,\r\n                         node.textLineHeight, w, false);\r\n                 }\r\n\r\n                 // Determines the position of the text\r\n                 switch (node.textPosition) {\r\n                     case 'leftTop':\r\n                         ctx.textAlign = 'start';\r\n                         break;\r\n                     case 'centerTop':\r\n                         ctx.textAlign = 'center';\r\n                         x += w / 2;\r\n                         break;\r\n                     case 'rightTop':\r\n                         ctx.textAlign = 'end';\r\n                         x += w;\r\n                         break;\r\n                     case 'leftMiddle':\r\n                         ctx.textAlign = 'start';\r\n                         if (node.textLineHeight === null) {\r\n                             ctx.textBaseline = 'middle';\r\n                         }\r\n                         y += h / 2 - size.height / 2;\r\n                         break;\r\n                     case 'centerMiddle':\r\n                         ctx.textAlign = 'center';\r\n                         if (node.textLineHeight === null) {\r\n                             ctx.textBaseline = 'middle';\r\n                         }\r\n                         x += w / 2;\r\n                         y += h / 2 - size.height / 2;\r\n                         break;\r\n                     case 'rightMiddle':\r\n                         ctx.textAlign = 'end';\r\n                         if (node.textLineHeight === null) {\r\n                             ctx.textBaseline = 'middle';\r\n                         }\r\n                         x += w;\r\n                         y += h / 2 - size.height / 2;\r\n                         break;\r\n                     case 'leftBottom':\r\n                         ctx.textAlign = 'start';\r\n                         if (node.textLineHeight === null) {\r\n                             ctx.textBaseline = 'bottom';\r\n                         }\r\n                         y += h - size.height;\r\n                         break;\r\n                     case 'centerBottom':\r\n                         ctx.textAlign = 'center';\r\n                         if (node.textLineHeight === null) {\r\n                             ctx.textBaseline = 'bottom';\r\n                         }\r\n                         x += w / 2;\r\n                         y += h - size.height;\r\n                         break;\r\n                     case 'rightBottom':\r\n                         ctx.textAlign = 'end';\r\n                         if (node.textLineHeight === null) {\r\n                             ctx.textBaseline = 'bottom';\r\n                         }\r\n                         x += w;\r\n                         y += h - size.height;\r\n                         break;\r\n                 }\r\n\r\n                 // Draw the text\r\n                 if (node.textLineHeight !== null) {\r\n                     Helpers.multiFillText(ctx, node.text, x, y, node.textLineHeight, w, true);\r\n                 } else {\r\n                     ctx.fillText(node.text, x, y);\r\n                 }\r\n             }\r\n         }\r\n\r\n         function getNodeImageRectangle(node, rcClip, image) {\r\n             var rcImage = rcClip.doclone();\r\n             rcImage.width = image.width;\r\n             rcImage.height = image.height;\r\n             switch (node.imagePosition) {\r\n                 case 'leftTop':\r\n                     break;\r\n                 case 'leftMiddle':\r\n                     rcImage.top += rcClip.height / 2 - rcImage.height / 2;\r\n                     break;\r\n                 case 'leftBottom':\r\n                     rcImage.top += rcClip.height - rcImage.height;\r\n                     break;\r\n                 case 'rightTop':\r\n                     rcImage.left += rcClip.width - rcImage.width;\r\n                     break;\r\n                 case 'rightMiddle':\r\n                     rcImage.left += rcClip.width - rcImage.width;\r\n                     rcImage.top += rcClip.height / 2 - rcImage.height / 2;\r\n                     break;\r\n                 case 'rightBottom':\r\n                     rcImage.left += rcClip.width - rcImage.width;\r\n                     rcImage.top += rcClip.height - rcImage.height;\r\n                     break;\r\n                 case 'centerTop':\r\n                     rcImage.left += rcClip.width / 2 - rcImage.width / 2;\r\n                     break;\r\n                 case 'centerMiddle':\r\n                     rcImage.left += rcClip.width / 2 - rcImage.width / 2;\r\n                     rcImage.top += rcClip.height / 2 - rcImage.height / 2;\r\n                     break;\r\n                 case 'centerBottom':\r\n                     rcImage.left += rcClip.width / 2 - rcImage.width / 2;\r\n                     rcImage.top += rcClip.height - rcImage.height;\r\n                     break;\r\n             }\r\n             return rcImage;\r\n         }\r\n\r\n         // Link drawing -------------------------------------------------------------\r\n\r\n         // Draw a link: its line, arrows and text.\r\n         function drawLink(ctx, _link) {\r\n             var r, curvePoints, apt, polylineHelper, pt, ptTan, tm, w, h, rcText, angle;\r\n\r\n             ctx.save();\r\n\r\n             if (_link.isShadowed) {\r\n                 setShadowProperties(ctx, _link.flow);\r\n             }\r\n\r\n             ctx.lineWidth = _link.lineWidth;\r\n             ctx.strokeStyle = _link.strokeStyle;\r\n             switch (_link.getLineStyle()) {\r\n                 case 'polyline':\r\n                 case 'database':\r\n                 case 'orthogonal':\r\n                     r = _link.roundedCornerSize;\r\n                     if (r > 0 && _link.points.length > 2) {\r\n                         Helpers.drawPolylineRounded(ctx, _link.points, r);\r\n                     } else {\r\n                         Helpers.drawPolyline(ctx, _link.points);\r\n                     }\r\n                     break;\r\n\r\n                 case 'spline':\r\n                     curvePoints = [];\r\n                     Helpers.getSplinePoints(_link.points, curvePoints);\r\n                     Helpers.drawPolyline(ctx, curvePoints);\r\n                     break;\r\n\r\n                 case 'bezier':\r\n                     Helpers.drawBezier(ctx, _link.points[0], _link.points[1],\r\n                         _link.points[2], _link.points[3]);\r\n                     break;\r\n             }\r\n             ctx.stroke();\r\n\r\n             if (_link.arrowDst !== undefined && _link.arrowDst !== null) {\r\n                 drawDstArrow(ctx, _link);\r\n             }\r\n\r\n             if (_link.arrowOrg !== undefined && _link.arrowOrg !== null) {\r\n                 drawOrgArrow(ctx, _link);\r\n             }\r\n\r\n             ctx.restore();\r\n\r\n             if (_link.text !== undefined && _link.text !== null && _link.text.length > 0) {\r\n                 // Get the position of the text\r\n                 apt = [];\r\n                 if (_link.lineStyle === 'bezier') {\r\n                     Helpers.flattenBezier(_link.points[0], _link.points[1],\r\n                         _link.points[2], _link.points[3], apt);\r\n                 } else {\r\n                     apt = _link.points;\r\n                 }\r\n                 polylineHelper = new PolylineHelper(apt);\r\n                 pt = polylineHelper.getPointAtFractionLength(0.5);\r\n                 if (pt !== null) {\r\n                     ptTan = polylineHelper.getTangent();\r\n                     if (ptTan !== null) {\r\n                         angle = Math.atan2(ptTan.y, ptTan.y) * (180 / Math.PI);\r\n                         if (ptTan.y < 0) {\r\n                             angle += 180;\r\n                         }\r\n                     } else {\r\n                         angle = 0;\r\n                     }\r\n\r\n                     ctx.translate(pt.x, pt.y);\r\n                     if (_link.isOrientedText) {\r\n                         ctx.rotate(-angle);\r\n                     }\r\n\r\n                     // Select text color, font and draw text\r\n                     ctx.font = _link.font;\r\n                     tm = ctx.measureText(_link.text);\r\n                     w = tm.width;\r\n                     h = parseInt(_link.font, 10) * 1.2;\r\n                     if (_link.isOpaque && h !== undefined) {\r\n                         rcText = new MyRect(-w / 2, -h / 2, w, h);\r\n                         rcText.inflate(2, 2);\r\n                         ctx.fillStyle = _link.flow.fillStyle;\r\n                         ctx.fillRect(rcText.left, rcText.top, rcText.width, rcText.height);\r\n                         ctx.fillStyle = _link.textFillStyle;\r\n                         ctx.textBaseline = 'middle';\r\n                         ctx.fillText(_link.text, -w / 2, 0);\r\n                     } else {\r\n                         ctx.fillStyle = _link.textFillStyle;\r\n                         ctx.fillText(_link.text, -w / 2, -2);\r\n                     }\r\n\r\n                     if (_link.isOrientedText) {\r\n                         ctx.rotate(angle);\r\n                     }\r\n                     ctx.translate(-pt.x, -pt.y);\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Draw the destination arrow of a link\r\n         function drawDstArrow(ctx, _link) {\r\n             var pt1, pt2, angle;\r\n\r\n             pt1 = _link.points[_link.points.length - 2];\r\n             pt2 = _link.points[_link.points.length - 1];\r\n             if (_link.getLineStyle() === 'bezier') {\r\n                 pt1 = Helpers.getFirstPointOfLastSegmentOfBezier(_link.points[0],\r\n                     _link.points[1], _link.points[2], _link.points[3]);\r\n             }\r\n\r\n             angle = Math.atan2(pt2.y - pt1.y, pt2.x - pt1.x);\r\n             ctx.fillStyle = _link.fillStyle;\r\n             ctx.strokeStyle = _link.strokeStyle;\r\n             Helpers.drawArrow(ctx,\r\n                 Helpers.translateShape(\r\n                     Helpers.rotateShape(_link.arrowDst, angle), pt2.x, pt2.y));\r\n         }\r\n\r\n         // Draw the origin arrow of a link\r\n         function drawOrgArrow(ctx, _link) {\r\n             var pt1, pt2, angle;\r\n\r\n             pt1 = _link.points[1];\r\n             pt2 = _link.points[0];\r\n             if (_link.getLineStyle() === 'bezier') {\r\n                 pt1 = Helpers.getFirstPointOfLastSegmentOfBezier(_link.points[3],\r\n                     _link.points[2], _link.points[1], _link.points[0]);\r\n             }\r\n\r\n             angle = Math.atan2(pt2.y - pt1.y, pt2.x - pt1.x);\r\n             ctx.fillStyle = _link.fillStyle;\r\n             ctx.strokeStyle = _link.strokeStyle;\r\n             Helpers.drawArrow(ctx,\r\n                 Helpers.translateShape(\r\n                     Helpers.rotateShape(_link.arrowOrg, angle), pt2.x, pt2.y));\r\n         }\r\n\r\n\r\n         // Mouse hit helpers ------------------------------------------------------------\r\n\r\n         // Determine if a point is over a node\r\n         function hitNodeTest(node, pt) {\r\n             var ctx, t1, t2, t3, ptCtr, _points, hit, rc;\r\n\r\n             rc = getNodeRect(node);\r\n             hit = false;\r\n             if (rc.containsPoint(pt)) {\r\n                 if (isRectangle(node)) {\r\n                     hit = true;\r\n                 } else if (isEllipse(node)) {\r\n                     ptCtr = rc.centerPoint();\r\n                     t1 = (rc.height / 2 * (pt.x - ptCtr.x));\r\n                     t2 = (rc.width / 2 * (pt.y - ptCtr.y));\r\n                     t3 = (rc.width / 2 * rc.height / 2);\r\n                     if (t1 * t1 + t2 * t2 <= t3 * t3) {\r\n                         hit = true;\r\n                     }\r\n                 } else if (isPolygon(node)) {\r\n                     ctx = that.canvas.getContext('2d');\r\n                     if (node.polygon !== undefined && node.polygon !== null) {\r\n                         _points = [];\r\n                         getNodePolygonPoints(node, _points);\r\n                         Helpers.drawPolygon(ctx, _points);\r\n                         hit = ctx.isPointInPath(pt.x, pt.y);\r\n                     } else {\r\n                         hit = true;\r\n                     }\r\n                 } else {\r\n                     ctx = that.canvas.getContext('2d');\r\n                     if (node.drawShape !== undefined && node.drawShape !== null) {\r\n                         node.drawShape(ctx, node.x, node.y, node.w, node.h);\r\n                         hit = ctx.isPointInPath(pt.x, pt.y);\r\n                     }\r\n                 }\r\n             }\r\n             return hit;\r\n         }\r\n\r\n         // Determine if a point is over the bounding rectangle of a node\r\n         function hitNodeTest2(node, pt) {\r\n             var k, rc;\r\n\r\n             rc = getNodeRect(node);\r\n             for (k = 0; k < pinAreas.length; k++) {\r\n                 rc.boundingRect(pinAreas[k]);\r\n             }\r\n             return (rc.containsPoint(pt));\r\n         }\r\n\r\n         // Determine if a point is over a link\r\n         function hitLinkTest(_link, pt) {\r\n             var hit, rc, distance, apt;\r\n\r\n             hit = false;\r\n             rc = getLinkRect(_link);\r\n             distance = 0.0;\r\n             if (rc.containsPoint(pt)) {\r\n                 apt = [];\r\n                 if (_link.getLineStyle() === 'bezier') {\r\n                     Helpers.flattenBezier(_link.points[0], _link.points[1],\r\n                         _link.points[2], _link.points[3], apt);\r\n                 } else {\r\n                     apt = _link.points;\r\n                 }\r\n\r\n                 distance = Helpers.getDistanceBetweenPointAndPolyline(apt, apt.length,\r\n                     pt, that.linkSelectionAreaWidth);\r\n                 if (distance <= that.linkSelectionAreaWidth) {\r\n                     linkDistance = distance;\r\n                     hit = true;\r\n                 }\r\n             }\r\n             return hit;\r\n         }\r\n\r\n         // Determine the position of a node pin.\r\n         // The pin is defined by its index.\r\n         function getPinPosition(node, pinIndex) {\r\n             var rc = getNodeRect(node);\r\n             return {\r\n                 x: rc.left + (rc.width / 100) * node.pins[pinIndex][0],\r\n                 y: rc.top + (rc.height / 100) * node.pins[pinIndex][1]\r\n             };\r\n         }\r\n\r\n         // Determine where is the mouse cursor\r\n         function checkArea(pt) {\r\n             var i, itm;\r\n\r\n             if (_isPanning) {\r\n                 return;\r\n             }\r\n\r\n             that.hitArea = 'outSide'; // Default: the mouse over nothing\r\n             _cursor = 'default';\r\n\r\n             // Get the new hitted item\r\n             if (_isStretchingLink) {\r\n                 hittedItem = _getHitItem(pt, itemsetEnum.nodes);\r\n             } else {\r\n                 hittedItem = _getHitItem(pt, itemsetEnum.items);\r\n             }\r\n\r\n             // Repaint the previous hitted item (to remove the pins)\r\n             if (pinnedItem !== null) {\r\n                 if (hittedItem === null) {\r\n                     if (!hitNodeTest2(pinnedItem, pt)) {\r\n                         invalidateNode(pinnedItem);\r\n                         pinnedItem = null;\r\n                         pinAreas.splice(0, pinAreas.length);\r\n                         pinAreaCentral = null;\r\n                         updateDrawing();\r\n                     } else {\r\n                         if (checkPins(pinnedItem, pt)) {\r\n                             return;\r\n                         }\r\n                     }\r\n                 } else if (hittedItem !== pinnedItem) {\r\n                     invalidateNode(pinnedItem);\r\n                     pinnedItem = null;\r\n                     pinAreas.splice(0, pinAreas.length);\r\n                     pinAreaCentral = null;\r\n                     updateDrawing();\r\n                 }\r\n             }\r\n\r\n             if (hittedItem !== null) {\r\n                 if (_isNode(hittedItem)) {\r\n                     // The hitted item is a node\r\n                     that.hitArea = 'node';\r\n                     if (!_isCreatingLink && that.canMoveNode &&\r\n                         (hittedItem.isXMoveable || hittedItem.isYMoveable)) {\r\n                         _cursor = 'move';\r\n                     }\r\n                 } else {\r\n                     // The hitted item is a link\r\n                     that.hitArea = '_link';\r\n                 }\r\n\r\n                 // If the hitted item is a node, display its pins\r\n                 if (_isNode(hittedItem)) {\r\n                     pinnedItem = hittedItem;\r\n                     if (checkPins(hittedItem, pt)) {\r\n                         // If the mouse is over a pin, return\r\n                         return;\r\n                     }\r\n                 }\r\n             }\r\n\r\n             // Detect if the mouse has left the node area.\r\n             // (this is necessary when creating reflexive links: the mouse\r\n             // must leave the node then return to this node)\r\n             if (!outOrg && _isCreatingLink) {\r\n                 if (hittedItem === null || !_isNode(hittedItem)) {\r\n                     outOrg = true;\r\n                 }\r\n             }\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isNode(itm)) {\r\n                     checkNodeArea(itm, pt);\r\n                 } else if (_isLink(itm)) {\r\n                     checkLinkArea(itm, pt);\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Determine if the mouse cursor is over a node pin.\r\n         function checkPins(itm, pt) {\r\n             var j;\r\n\r\n             if (!_isCreatingLink) {\r\n                 if (that.canDrawLink && itm.isOutLinkable) {\r\n                     itm.refresh();\r\n\r\n                     if (itm.pins !== null) {\r\n                         getPinAreas(itm, pinAreas);\r\n                         for (j = 0; j < pinAreas.length; j++) {\r\n                             if (pinAreas[j].containsPoint(pt)) {\r\n                                 pinOrigin = j;\r\n                                 ptPinOrigin = pinAreas[j].centerPoint();\r\n                                 that.hitArea = 'pin';\r\n                                 _cursor = 'crosshair';\r\n                                 return true;\r\n                             }\r\n                         }\r\n                     } else {\r\n                         pinAreaCentral = getCentralPinArea(itm);\r\n                         if (pinAreaCentral.containsPoint(pt)) {\r\n                             ptPinOrigin = pinAreaCentral.centerPoint();\r\n                             that.hitArea = 'centralPin';\r\n                             _cursor = 'crosshair';\r\n                             return true;\r\n                         }\r\n                     }\r\n                 }\r\n             } else {\r\n                 if (that.canDrawLink && itm.isInLinkable /*&& itm.pins !== null*/ ) {\r\n                     itm.refresh();\r\n\r\n                     if (itm.pins !== null) {\r\n                         getPinAreas(itm, pinAreas);\r\n                         for (j = 0; j < pinAreas.length; j++) {\r\n                             if (pinAreas[j].containsPoint(pt)) {\r\n                                 pinDestination = j;\r\n                                 ptPinDestination = pinAreas[j].centerPoint();\r\n                                 that.hitArea = 'pin';\r\n                                 _cursor = 'crosshair';\r\n                                 return true;\r\n                             }\r\n                         }\r\n                     }\r\n                 }\r\n             }\r\n             return false;\r\n         }\r\n\r\n         function getHittedPinIndex(itm, pt) {\r\n             var j, index;\r\n\r\n             index = -1;\r\n             if (itm.pins !== null) {\r\n                 getPinAreas(itm, pinAreas);\r\n                 for (j = 0; j < pinAreas.length; j++) {\r\n                     if (pinAreas[j].containsPoint(pt)) {\r\n                         index = j;\r\n                         break;\r\n                     }\r\n                 }\r\n             }\r\n             return index;\r\n         }\r\n\r\n         // Get the array of node pin rectangles.\r\n         function getPinAreas(node, pinAreas) {\r\n             var rc, x, y, i, size;\r\n\r\n             size = that.pinSize;\r\n             pinAreas.splice(0, pinAreas.length);\r\n             if (node.pins !== undefined && node.pins !== null) {\r\n                 for (i = 0; i < node.pins.length; i++) {\r\n                     rc = getNodeRect(node);\r\n                     x = rc.left + (rc.width / 100) * node.pins[i][0];\r\n                     y = rc.top + (rc.height / 100) * node.pins[i][1];\r\n                     pinAreas.push(new MyRect(x - size / 2, y - size / 2, size, size));\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Get the rectangular area of the central pin of a node\r\n         function getCentralPinArea(node) {\r\n             var rc, x, y, size;\r\n\r\n             size = that.pinSize;\r\n             rc = getNodeRect(node);\r\n             x = rc.left + rc.width / 2;\r\n             y = rc.top + rc.height / 2;\r\n             return new MyRect(x - size / 2, y - size / 2, size, size);\r\n         }\r\n\r\n         // Get the minimal rectangle containing a node and its selection handles\r\n         function getNodeRectWithHandles(_node) {\r\n             var inc, rc;\r\n\r\n             inc = _node.lineWidth + 5 * that.handleSize / 2;\r\n             if (_node.isContextHandle) {\r\n                 inc += that.contextHandleSize;\r\n             }\r\n             rc = getNodeRect(_node);\r\n             rc = rc.inflate(inc, inc);\r\n             return rc;\r\n         }\r\n\r\n         // Get the minimal rectangle containing a link and its selection handles\r\n         function getLinkRectWithHandles(_link) {\r\n             var rc, inc;\r\n\r\n             inc = _link.lineWidth + that.handleSize;\r\n             if (_link.isContextHandle) {\r\n                 inc += that.contextHandleSize;\r\n             }\r\n             rc = getLinkRect(_link);\r\n             rc = rc.inflate(inc, inc);\r\n             return rc;\r\n         }\r\n\r\n         // Check if the mouse cursor is over a node or over one of its selection handles\r\n         function checkNodeArea(_node, pt) {\r\n             var j, _handles, rc;\r\n\r\n             _handles = [];\r\n             rc = getNodeRectWithHandles(_node);\r\n\r\n             if (!rc.containsPoint(pt)) {\r\n                 return;\r\n             }\r\n\r\n             if (that.canShowContextHandle && _node.isContextHandle && _isMouseDown) {\r\n                 rc = getNodeContextHandle(_node);\r\n                 if (rc !== null && rc.containsPoint(pt)) {\r\n                     fireContextEvent(_node);\r\n                     _isMouseDown = false;\r\n                     return;\r\n                 }\r\n             }\r\n\r\n             getNodeHandles(_node, _handles);\r\n             for (j = 0; j < _handles.length; j++) {\r\n                 if (_handles[j].containsPoint(pt)) {\r\n                     that.hitArea = 'resizeHandle';\r\n                     that._resizeHandle = j;\r\n                     switch (that._resizeHandle) {\r\n                         case ResizeHandleEnum.left:\r\n                         case ResizeHandleEnum.right:\r\n                             if (!that.canSizeNode || !_node.isXSizeable) {\r\n                                 that.hitArea = 'outSide';\r\n                                 _cursor = 'default';\r\n                             } else {\r\n                                 _cursor = 'e-resize';\r\n                             }\r\n                             break;\r\n                         case ResizeHandleEnum.down:\r\n                         case ResizeHandleEnum.up:\r\n                             if (!that.canSizeNode || !_node.isYSizeable) {\r\n                                 that.hitArea = 'outSide';\r\n                                 _cursor = 'default';\r\n                             } else {\r\n                                 _cursor = 'n-resize';\r\n                             }\r\n                             break;\r\n                         case ResizeHandleEnum.leftDown:\r\n                         case ResizeHandleEnum.rightUp:\r\n                         case ResizeHandleEnum.leftUp:\r\n                         case ResizeHandleEnum.rightDown:\r\n                             if (!that.canSizeNode) {\r\n                                 that.hitArea = 'outSide';\r\n                                 _cursor = 'default';\r\n                             } else {\r\n                                 if (!_node.isXSizeable && !_node.isYSizeable) {\r\n                                     that.hitArea = 'outSide';\r\n                                     _cursor = 'default';\r\n                                 } else if (!_node.isXSizeable) {\r\n                                     that.hitArea = 'upHandle';\r\n                                     _cursor = 'n-resize';\r\n                                 } else if (!_node.isYSizeable) {\r\n                                     that.hitArea = 'leftHandle';\r\n                                     _cursor = 'e-resize';\r\n                                 } else {\r\n                                     if (that._resizeHandle === ResizeHandleEnum.leftDown ||\r\n                                         that._resizeHandle === ResizeHandleEnum.rightUp) {\r\n                                         _cursor = 'ne-resize';\r\n                                     } else {\r\n                                         _cursor = 'se-resize';\r\n                                     }\r\n                                 }\r\n                             }\r\n                             break;\r\n                         default:\r\n                             break;\r\n                     }\r\n                     break;\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Check if the mouse cursor is over a link or over one of its selection handles\r\n         function checkLinkArea(_link, pt) {\r\n             var j, k, point, nbHandles, rc, nbPt;\r\n\r\n             if (_isStretchingLink || _link.points.length < 2) {\r\n                 return;\r\n             }\r\n\r\n             rc = getLinkRectWithHandles(_link);\r\n             if (!rc.containsPoint(pt)) {\r\n                 return;\r\n             }\r\n\r\n             if (that.canShowContextHandle && _link.isContextHandle && _isMouseDown) {\r\n                 rc = getLinkContextHandle(_link);\r\n                 if (rc !== null && rc.containsPoint(pt)) {\r\n                     fireContextEvent(_link);\r\n                     _isMouseDown = false;\r\n                     return;\r\n                 }\r\n             }\r\n\r\n             nbPt = _link.points.length;\r\n\r\n             if (isLinkNewPointsAllowed(_link)) {\r\n                 // If it is possible to add points to this link\r\n                 // (for instance a polyline link) ...\r\n                 nbHandles = 2 * nbPt - 1;\r\n                 for (j = 0; j < nbHandles; j++) {\r\n                     if (j % 2 === 0) {\r\n                         point = _link.points[j / 2];\r\n                     } else {\r\n                         k = Math.round(j / 2) - 1;\r\n                         point = Helpers.middlePoint(_link.points[k], _link.points[k + 1]);\r\n                     }\r\n                     rc = new MyRect(point.x - that.handleSize / 2,\r\n                         point.y - that.handleSize / 2,\r\n                         that.handleSize,\r\n                         that.handleSize);\r\n                     if (rc.containsPoint(pt)) {\r\n                         stretchedLink = _link;\r\n                         that.hitArea = 'stretchHandle';\r\n                         if (j === 0) {\r\n                             // First handle clicked\r\n                             // We can perhaps change the origin node of this link\r\n                             if (that.canChangeOrg) {\r\n                                 stretchType = StretchTypeEnum.first;\r\n                                 _cursor = 'crosshair';\r\n                             }\r\n                         } else if (j === nbHandles - 1) {\r\n                             // last handle clicked\r\n                             // We can perhaps change the destination node of this link\r\n                             if (that.canChangeDst) {\r\n                                 stretchType = StretchTypeEnum.last;\r\n                                 _cursor = 'crosshair';\r\n                             }\r\n                         } else {\r\n                             // Other handle clicked\r\n                             // We can perhaps stretch it.\r\n                             if (that.canStretchLink && _link.isStretchable) {\r\n                                 _cursor = 'crosshair';\r\n                                 if (j % 2 !== 0) {\r\n                                     // The stretching action may add a point\r\n                                     stretchType = StretchTypeEnum.add;\r\n                                 } else {\r\n                                     // The stretching action may remove a point\r\n                                     stretchType = StretchTypeEnum.del;\r\n                                 }\r\n                             } else {\r\n                                 stretchType = StretchTypeEnum.none;\r\n                             }\r\n                         }\r\n                         _handle = (j % 2 !== 0) ? Math.round(j / 2) - 1 : j / 2;\r\n                         break;\r\n                     }\r\n                 }\r\n             } else {\r\n                 // If it is not possible to add points to this link \r\n                 // (for instance a bezier link) ...\r\n                 nbHandles = nbPt;\r\n                 for (j = 0; j < nbHandles; j++) {\r\n                     point = _link.points[j];\r\n                     rc = new MyRect(point.x - that.handleSize / 2,\r\n                         point.y - that.handleSize / 2,\r\n                         that.handleSize,\r\n                         that.handleSize);\r\n                     if (rc.containsPoint(pt)) {\r\n                         that.hitArea = 'stretchHandle';\r\n                         stretchedLink = _link;\r\n                         if (j === 0) {\r\n                             // First handle clicked\r\n                             // We can perhaps change the origin node of this link\r\n                             if (that.canChangeOrg) {\r\n                                 stretchType = StretchTypeEnum.first;\r\n                                 _cursor = 'crosshair';\r\n                             }\r\n                         } else if (j === nbPt - 1) {\r\n                             // last handle clicked\r\n                             // We can perhaps change the destination node of this link\r\n                             if (that.canChangeDst) {\r\n                                 stretchType = StretchTypeEnum.last;\r\n                                 _cursor = 'crosshair';\r\n                             }\r\n                         } else {\r\n                             // Other handle clicked\r\n                             // We can perhaps stretch it.\r\n                             if (that.canStretchLink && _link.isStretchable) {\r\n                                 _cursor = 'crosshair';\r\n                                 stretchType = StretchTypeEnum.change;\r\n                             } else {\r\n                                 stretchType = StretchTypeEnum.none;\r\n                             }\r\n                         }\r\n                         _handle = j;\r\n                         break;\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Determines the item pointed by the mouse cursor\r\n         function _getHitItem(pt, itemset) {\r\n             var i, itm, candidate, widthMin, itemList;\r\n\r\n             if (_isQuadtree) {\r\n                 itemList = _quadtree._getItems(new MyRect(pt.x - 5, pt.y - 5, 10, 10));\r\n             } else {\r\n                 itemList = _items;\r\n             }\r\n\r\n             candidate = null;\r\n             widthMin = linkDistance;\r\n\r\n             for (i = 0; i < itemList.length; i++) {\r\n                 itm = itemList[i];\r\n                 switch (itemset) {\r\n                     case itemsetEnum.items:\r\n                         if (_isNode(itm)) {\r\n                             if (hitNodeTest(itm, pt)) {\r\n                                 candidate = itm;\r\n                             }\r\n                         } else if (_isLink(itm)) {\r\n                             // If the link is one of the links of the candidate node,\r\n                             // we ignore it. We want to be sure to select the node\r\n                             // in this case.\r\n                             if (candidate !== null &&\r\n                                 _isNode(candidate) &&\r\n                                 (itm.dst === candidate || itm.org === candidate)) {\r\n                                 continue;\r\n                             }\r\n                             if (hitLinkTest(itm, pt)) {\r\n                                 if (linkDistance <= that.linkSelectionAreaWidth) {\r\n                                     widthMin = linkDistance;\r\n                                     candidate = itm;\r\n                                 }\r\n                             }\r\n                         }\r\n                         break;\r\n\r\n                     case itemsetEnum.nodes:\r\n                         if (_isNode(itm)) {\r\n                             if (hitNodeTest(itm, pt)) {\r\n                                 candidate = itm;\r\n                             }\r\n                         }\r\n                         break;\r\n\r\n                     case itemsetEnum.links:\r\n                         if (_isLink(itm)) {\r\n                             if (hitLinkTest(itm, pt)) {\r\n                                 if (linkDistance <= that.linkSelectionAreaWidth) {\r\n                                     widthMin = linkDistance;\r\n                                     candidate = itm;\r\n                                 }\r\n                             }\r\n                         }\r\n                         break;\r\n\r\n                     case itemsetEnum.selectableItems:\r\n                         if (itm.isSelectable) {\r\n                             if (_isNode(itm)) {\r\n                                 if (hitNodeTest(itm, pt)) {\r\n                                     candidate = itm;\r\n                                 }\r\n                             } else if (_isLink(itm)) {\r\n                                 // If the link is one of the links of the candidate node,\r\n                                 // we ignore it. We want to be sure to select the node\r\n                                 // in this case.\r\n                                 if (candidate !== null &&\r\n                                     _isNode(candidate) &&\r\n                                     (itm.dst === candidate || itm.org === candidate)) {\r\n                                     continue;\r\n                                 }\r\n                                 if (hitLinkTest(itm, pt)) {\r\n                                     if (linkDistance <= that.linkSelectionAreaWidth) {\r\n                                         widthMin = linkDistance;\r\n                                         candidate = itm;\r\n                                     }\r\n                                 }\r\n                             }\r\n                         }\r\n                         break;\r\n\r\n                     case itemsetEnum.selectableNodes:\r\n                         if (itm.isSelectable && _isNode(itm)) {\r\n                             if (hitNodeTest(itm, pt)) {\r\n                                 candidate = itm;\r\n                             }\r\n                         }\r\n                         break;\r\n\r\n                     case itemsetEnum.selectableLinks:\r\n                         if (itm.isSelectable && _isLink(itm)) {\r\n                             if (hitLinkTest(itm, pt)) {\r\n                                 if (linkDistance <= that.linkSelectionAreaWidth) {\r\n                                     widthMin = linkDistance;\r\n                                     candidate = itm;\r\n                                 }\r\n                             }\r\n                         }\r\n                         break;\r\n                 }\r\n             }\r\n             return candidate;\r\n         }\r\n\r\n\r\n         // Scroll and size helpers ------------------------------------------------------\r\n\r\n         function _beginUpdate() {\r\n             _repaint++;\r\n         }\r\n\r\n         function _endUpdate() {\r\n             _repaint--;\r\n             if (_repaint === 0) {\r\n                 updateDiagramSize();\r\n\r\n                 if (_isQuadtree) {\r\n                     _buildQuadtree();\r\n                 }\r\n\r\n                 that.refresh();\r\n             }\r\n         }\r\n\r\n         function updateScrollInfo() {\r\n             if (that.isFixedSize) {\r\n                 that.canvas.width = initialWidth;\r\n                 that.canvas.height = initialHeight;\r\n             } else {\r\n                 that.canvas.width = graphRect.width * that.zoom + initialWidth;\r\n                 that.canvas.height = graphRect.height * that.zoom + initialHeight;\r\n             }\r\n             invalidate(null);\r\n         }\r\n\r\n         function updateDiagramSize() {\r\n             if (_repaint !== 0) {\r\n                 return;\r\n             }\r\n             var rc = getGraphRect();\r\n             if (!rc.equals(graphRect)) {\r\n                 graphRect = rc;\r\n                 updateScrollInfo();\r\n             }\r\n         }\r\n\r\n         function updateDiagramSizeWithRect(rect) {\r\n             if (_repaint !== 0) {\r\n                 return;\r\n             }\r\n             var rc = graphRect.unionRect(rect);\r\n             if (!rc.equals(graphRect)) {\r\n                 graphRect = rc;\r\n                 updateScrollInfo();\r\n             }\r\n         }\r\n\r\n         function getGraphRect() {\r\n             var i, itm, rc, rc2, first;\r\n\r\n             rc = new MyRect(0, 0, 0, 0);\r\n             first = true;\r\n\r\n             for (i = 0; i < _items.length; i++) {\r\n                 itm = _items[i];\r\n                 if (that.isNode(itm)) {\r\n                     rc2 = getNodeRect(itm);\r\n                 } else {\r\n                     rc2 = getLinkRect(itm);\r\n                 }\r\n                 if (first) {\r\n                     rc = rc2;\r\n                     first = false;\r\n                 } else {\r\n                     rc.boundingRect(rc2);\r\n                 }\r\n             }\r\n             rc.width += rc.left;\r\n             rc.height += rc.top;\r\n             rc.left = 0;\r\n             rc.top = 0;\r\n             return rc;\r\n         }\r\n\r\n         function _zoomRectangle(rc) {\r\n             var div, x, y, width, height, w, h;\r\n\r\n             // Determine the new zoom factor.\r\n             // It is an isotropic zoom (same x and y zoom factor)\r\n             width = that.canvas.width;\r\n             height = that.canvas.height;\r\n             div = that.canvas.parentNode;\r\n             if (div !== null && div !== undefined) {\r\n                 w = parseInt(div.style.width, 10);\r\n                 h = parseInt(div.style.height, 10);\r\n                 if (!isNaN(w) && !isNaN(h)) {\r\n                     width = w;\r\n                     height = h;\r\n                 }\r\n             }\r\n             x = width / rc.width;\r\n             y = height / rc.height;\r\n             that.zoom = (x > y) ? y : x;\r\n             that.refresh();\r\n\r\n             // Adjust Scrolling position\r\n             if (div !== null && div !== undefined) {\r\n                 div.scrollLeft = rc.left * that.zoom;\r\n                 div.scrollTop = rc.top * that.zoom;\r\n             }\r\n         }\r\n\r\n\r\n         // Other helpers ----------------------------------------------------------------\r\n\r\n         // Determine if a node can be the destination of a link\r\n         // Several properties may determine if a node can be the destination of a link:\r\n         // the isInLinkable Link property and the canReflexLink and canMultiLink AddFlow\r\n         // properties.\r\n         function isNewDstAllowed(_link, newDst) {\r\n             if (!newDst.isInLinkable) {\r\n                 return false;\r\n             }\r\n             if (!that.canReflexLink && _link.org === newDst) {\r\n                 return false;\r\n             }\r\n             if (!that.canMultiLink && isOriginOf(_link.org, newDst)) {\r\n                 return false;\r\n             }\r\n             return true;\r\n         }\r\n\r\n         // Determine if a node can be the origin of a link\r\n         // Several properties may determine if a node can be the origin of a link:\r\n         // the isOutLinkable Link property and the canReflexLink and canMultiLink AddFlow\r\n         // properties.\r\n         function isNewOrgAllowed(_link, newOrg) {\r\n             if (!newOrg.isOutLinkable) {\r\n                 return false;\r\n             }\r\n             if (!that.canReflexLink && _link.dst === newOrg) {\r\n                 return false;\r\n             }\r\n             if (!that.canMultiLink && isDestinationOf(_link.dst, newOrg)) {\r\n                 return false;\r\n             }\r\n             return true;\r\n         }\r\n\r\n         // Capture the mouse\r\n         function setMouseCapture() {\r\n             if (that.canvas.setCapture) {\r\n                 that.canvas.setCapture();\r\n             } else {\r\n                 if (window.addEventListener) {\r\n                     // all browsers except IE before version 9\r\n                     window.addEventListener(\"mousemove\", that.canvas, true);\r\n                 }\r\n             }\r\n         }\r\n\r\n         // Release the mouse\r\n         function releaseMouseCapture() {\r\n             if (that.canvas.releaseCapture) {\r\n                 that.canvas.releaseCapture();\r\n             } else {\r\n                 if (window.removeEventListener) {\r\n                     // all browsers except IE before version 9\r\n                     window.removeEventListener(\"mousemove\", that.canvas, true);\r\n                 }\r\n             }\r\n         }\r\n\r\n         // See http://javascript.about.com/library/blmousepos.htm\r\n         // See http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\r\n         function getPosition(e) {\r\n             var x, y, rect;\r\n\r\n             rect = canvas.getBoundingClientRect();\r\n             x = e.clientX - rect.left;\r\n             y = e.clientY - rect.top;\r\n\r\n             // Add custom value to take account of specific environments.\r\n             // By default, those values are zero.\r\n             x += that.xCustomOffset;\r\n             y += that.yCustomOffset;\r\n\r\n             return {\r\n                 'x': x,\r\n                 'y': y\r\n             };\r\n         }\r\n\r\n         function readyHandler(e) {\r\n             that.refresh();\r\n         }\r\n\r\n         // Fired when a touch is initiated (iPad/iPhone support).\r\n         // See http://tenderlovingcode.com/blog/web-apps/html5-canvas-drawing-on-ipad/\r\n         function touchStartHandler(e) {\r\n             e.preventDefault();\r\n             mouseDownHandler(e);\r\n         }\r\n\r\n         // Fired while touching and moving is in progress (iPad/iPhone support).\r\n         function touchMoveHandler(e) {\r\n             e.preventDefault();\r\n             mouseMoveHandler(e);\r\n         }\r\n\r\n         // Fired when touch ends (iPad/iPhone suport).\r\n         function touchEndHandler(e) {\r\n             mouseUpHandler(e);\r\n         }\r\n\r\n         function mouseDownHandler(e) {\r\n             var clickEvent, clickedItem, pt, ClickZoneEnum, mult,\r\n                 mayMoveNode, mayCreateNode, maySelect, mayZoom, mayPan;\r\n\r\n             pt = getPosition(e);\r\n             ClickZoneEnum = {\r\n                 out: 0,\r\n                 outShift: 1,\r\n                 node: 2,\r\n                 selNode: 3,\r\n                 nodeShift: 4,\r\n                 selNodeShift: 5,\r\n                 link: 6,\r\n                 selLink: 7,\r\n                 linkShift: 8,\r\n                 selLinkShift: 9\r\n             };\r\n             mult = that.canMultiSelect && (e.shiftKey || e.ctrlKey);\r\n             mayMoveNode = false;\r\n             mayCreateNode = false;\r\n             maySelect = false;\r\n             mayZoom = false;\r\n             mayPan = false;\r\n\r\n             pt.x = pt.x / that.zoom;\r\n             pt.y = pt.y / that.zoom;\r\n             _isMouseDown = true;\r\n             startMove = true;\r\n             okToStartStretch = false;\r\n             okToStartMove = false;\r\n             okToStartNode = false;\r\n             okToStartResize = false;\r\n             okToStartLink = false;\r\n             okToStartSelect = false;\r\n             okToStartZoom = false;\r\n             okToStartPan = false;\r\n             ptStart = pt;\r\n             ptOrg = ptPrior = pt;\r\n             tmpRect = new MyRect(ptOrg.x, ptOrg.y, 0, 0);\r\n\r\n             // Where is the mouse ?\r\n             checkArea(pt);\r\n\r\n             // If a handle or a pin has been clicked, return\r\n             if (that.hitArea === 'stretchHandle') {\r\n                 okToStartStretch = true;\r\n                 return;\r\n             } else if (that.hitArea === 'resizeHandle') {\r\n                 if (that.gridSnap) {\r\n                     ptPrior = Helpers.adjustGrid(pt, that.gridSizeX, that.gridSizeY);\r\n                 }\r\n                 okToStartResize = true;\r\n                 return;\r\n             } else if (that.hitArea === 'pin' || that.hitArea === 'centralPin') {\r\n                 okToStartLink = true;\r\n                 outOrg = false;\r\n                 origin = pinnedItem;\r\n                 ptPrior = ptPinOrigin;\r\n                 ptOrg = ptPinOrigin;\r\n                 return;\r\n             }\r\n\r\n             // Get click event type\r\n             clickedItem = hittedItem;\r\n             if (clickedItem !== null && clickedItem.isSelectable) {\r\n                 if (_isLink(clickedItem)) {\r\n                     if (clickedItem.getIsSelected()) {\r\n                         clickEvent = mult ?\r\n                             ClickZoneEnum.selLinkShift : ClickZoneEnum.selLink;\r\n                     } else {\r\n                         clickEvent = mult ?\r\n                             ClickZoneEnum.linkShift : ClickZoneEnum.link;\r\n                     }\r\n                 } else if (_isNode(clickedItem)) {\r\n                     if (clickedItem.getIsSelected()) {\r\n                         clickEvent = mult ?\r\n                             ClickZoneEnum.selNodeShift : ClickZoneEnum.selNode;\r\n                     } else {\r\n                         clickEvent = mult ?\r\n                             ClickZoneEnum.nodeShift : ClickZoneEnum.node;\r\n                     }\r\n                 }\r\n             } else {\r\n                 clickEvent = mult ? ClickZoneEnum.outShift : ClickZoneEnum.out;\r\n             }\r\n\r\n             // Action to do for each event\r\n             switch (clickEvent) {\r\n                 case ClickZoneEnum.out:\r\n                     _unselectAll();\r\n                     if (that.mouseSelection === 'none') {\r\n                         if (that.canDrawNode) {\r\n                             mayCreateNode = true;\r\n                         }\r\n                     } else if (that.mouseSelection === 'zoom') {\r\n                         mayZoom = true;\r\n                     } else if (that.mouseSelection === 'pan') {\r\n                         mayPan = true;\r\n                     } else if (that.mouseSelection !== 'none' && that.mouseSelection !== 'zoom') {\r\n                         maySelect = true;\r\n                     }\r\n                     break;\r\n                 case ClickZoneEnum.link:\r\n                     _unselectAll();\r\n                     if (clickedItem !== null) {\r\n                         clickedItem.setIsSelected(true);\r\n                     }\r\n                     break;\r\n                 case ClickZoneEnum.node:\r\n                     _unselectAll();\r\n                     if (clickedItem !== null) {\r\n                         clickedItem.setIsSelected(true);\r\n                     }\r\n                     if (clickedItem !== null) {\r\n                         if (that.canMoveNode &&\r\n                             (clickedItem.isXMoveable || clickedItem.isYMoveable)) {\r\n                             mayMoveNode = true;\r\n                         }\r\n                     }\r\n                     break;\r\n                 case ClickZoneEnum.selNode:\r\n                     if (clickedItem !== null) {\r\n                         if (that.canMoveNode &&\r\n                             (clickedItem.isXMoveable || clickedItem.isYMoveable)) {\r\n                             mayMoveNode = true;\r\n                         }\r\n                     }\r\n                     break;\r\n                 case ClickZoneEnum.selLink:\r\n                     if (that.canMoveNode) {\r\n                         mayMoveNode = true;\r\n                     }\r\n                     break;\r\n                 case ClickZoneEnum.selNodeShift:\r\n                 case ClickZoneEnum.nodeShift:\r\n                 case ClickZoneEnum.selLinkShift:\r\n                 case ClickZoneEnum.linkShift:\r\n                     if (clickedItem !== null) {\r\n                         clickedItem.setIsSelected(!clickedItem.getIsSelected());\r\n                     }\r\n                     break;\r\n                 default:\r\n                     break;\r\n             }\r\n\r\n             // Init actions\r\n             if (mayMoveNode) {\r\n                 okToStartMove = true;\r\n                 if (that.gridSnap) {\r\n                     ptPrior = Helpers.adjustGrid(ptPrior, that.gridSizeX, that.gridSizeY);\r\n                 }\r\n             } else if (mayCreateNode) {\r\n                 okToStartNode = true;\r\n                 if (that.gridSnap) {\r\n                     ptPrior = Helpers.adjustGrid(ptPrior, that.gridSizeX, that.gridSizeY);\r\n                 }\r\n                 ptOrg = ptPrior;\r\n             } else if (maySelect) {\r\n                 okToStartSelect = true;\r\n             } else if (mayZoom) {\r\n                 okToStartZoom = true;\r\n             } else if (mayPan) {\r\n                 okToStartPan = true;\r\n             }\r\n\r\n             updateDrawing();\r\n         }\r\n\r\n         function mouseMoveHandler(e) {\r\n             var pt, parent, isParentDiv;\r\n\r\n             pt = getPosition(e);\r\n\r\n             parent = that.canvas.parentNode;\r\n             if (parent !== null) {\r\n                 ptScroll = {\r\n                     x: pt.x - parent.scrollLeft,\r\n                     y: pt.y - parent.scrollTop\r\n                 };\r\n             }\r\n\r\n             pt.x = pt.x / that.zoom;\r\n             pt.y = pt.y / that.zoom;\r\n\r\n             // If the mouse move is too small, we ignore it\r\n             if (startMove) {\r\n                 if (Math.abs(pt.x - ptStart.x) < moveStartDist &&\r\n                     Math.abs(pt.y - ptStart.y) < moveStartDist) {\r\n                     return;\r\n                 }\r\n                 startMove = false;\r\n             }\r\n\r\n             // Check area under mouse (down or up). Don't take account of grid here.\r\n             checkArea(pt);\r\n\r\n             // Set the cursor\r\n             that.canvas.style.cursor = _cursor;\r\n\r\n             if (_isMouseDown) {\r\n                 if (okToStartNode) {\r\n                     if (!doAutoScrolling(autoNode, parent)) {\r\n                         doNode(pt);\r\n                     }\r\n                 } else if (okToStartLink) {\r\n                     if (!doAutoScrolling(autoLink, parent)) {\r\n                         doLink(pt);\r\n                     }\r\n                 } else if (okToStartMove) {\r\n                     if (!doAutoScrolling(autoMove, parent)) {\r\n                         doMove(pt);\r\n                     }\r\n                 } else if (okToStartResize) {\r\n                     if (!doAutoScrolling(autoSize, parent)) {\r\n                         doResize(pt);\r\n                     }\r\n                 } else if (okToStartStretch) {\r\n                     if (!doAutoScrolling(autoStretch, parent)) {\r\n                         doStretch(pt);\r\n                     }\r\n                 } else if (okToStartSelect) {\r\n                     if (!doAutoScrolling(autoSelect, parent)) {\r\n                         doSelect(pt);\r\n                     }\r\n                 } else if (okToStartZoom) {\r\n                     if (!doAutoScrolling(autoZoom, parent)) {\r\n                         doZoom(pt);\r\n                     }\r\n                 } else if (okToStartPan) {\r\n                     doPan(pt);\r\n                 }\r\n             }\r\n         }\r\n\r\n         function mouseUpHandler(e) {\r\n             releaseMouseCapture();\r\n\r\n             if (_isMouseDown) {\r\n                 _isMouseDown = false;\r\n\r\n                 if (_isCreatingNode) {\r\n                     _isCreatingNode = false;\r\n                     endNode();\r\n                 } else if (_isCreatingLink) {\r\n                     _isCreatingLink = false;\r\n                     endLink();\r\n                 } else if (_isMovingNode) {\r\n                     _isMovingNode = false;\r\n                     endMove();\r\n                 } else if (_isResizingNode) {\r\n                     _isResizingNode = false;\r\n                     endResize();\r\n                 } else if (_isStretchingLink) {\r\n                     _isStretchingLink = false;\r\n                     endStretch();\r\n                 } else if (_isSelecting) {\r\n                     _isSelecting = false;\r\n                     endSelect();\r\n                 } else if (_isZooming) {\r\n                     _isZooming = false;\r\n                     endZoom();\r\n                 } else if (_isPanning) {\r\n                     _isPanning = false;\r\n                     endPan();\r\n                 }\r\n             }\r\n         }\r\n\r\n         function doAutoScrolling(autoJob, div) {\r\n             var xScroll, yScroll, rc, w, h;\r\n\r\n             if (div === null || div === undefined) {\r\n                 return false;\r\n             }\r\n             w = parseInt(div.style.width, 10);\r\n             h = parseInt(div.style.height, 10);\r\n             if (isNaN(w) || isNaN(h)) {\r\n                 return false;\r\n             }\r\n\r\n             xScroll = div.scrollLeft;\r\n             yScroll = div.scrollTop;\r\n             rc = new MyRect(0, 0, w, h);\r\n             rc.width -= 20;\r\n             rc.height -= 20;\r\n             if (!rc.containsPoint(ptScroll)) {\r\n                 if (that.canDragScroll) {\r\n                     xScrollDir = 'none';\r\n                     yScrollDir = 'none';\r\n                     if (ptScroll.x > rc.left + rc.width) {\r\n                         xScrollDir = 'right';\r\n                     } else if (ptScroll.x < rc.left && xScroll > 0) {\r\n                         xScrollDir = 'left';\r\n                     }\r\n                     if (ptScroll.y > rc.top + rc.height) {\r\n                         yScrollDir = 'bottom';\r\n                     } else if (ptScroll.y < rc.top && yScroll > 0) {\r\n                         yScrollDir = 'top';\r\n                     }\r\n\r\n                     if (xScrollDir !== 'none' || yScrollDir !== 'none') {\r\n                         if (!timerStarted) {\r\n                             timer = setInterval(autoJob, millisec);\r\n                             timerStarted = true;\r\n                         }\r\n                     }\r\n                 }\r\n                 return true;\r\n             }\r\n\r\n             // Here, the mouse is again in the client area so the timer can be killed.\r\n             if (timer !== null) {\r\n                 clearInterval(timer);\r\n             }\r\n             timerStarted = false;\r\n             return false;\r\n         }\r\n\r\n         function autoMove() {\r\n             doMove(autoScroll());\r\n         }\r\n\r\n         function autoSize() {\r\n             doResize(autoScroll());\r\n         }\r\n\r\n         function autoStretch() {\r\n             doStretch(autoScroll());\r\n         }\r\n\r\n         function autoNode() {\r\n             doNode(autoScroll());\r\n         }\r\n\r\n         function autoLink() {\r\n             doLink(autoScroll());\r\n         }\r\n\r\n         function autoSelect() {\r\n             doSelect(autoScroll());\r\n         }\r\n\r\n         function autoZoom() {\r\n             doZoom(autoScroll());\r\n         }\r\n\r\n         function autoScroll() {\r\n             var dxScroll, dyScroll, div, xScroll, yScroll;\r\n\r\n             if (!_isMouseDown) {\r\n                 if (timer !== null) {\r\n                     clearInterval(timer);\r\n                 }\r\n                 timerStarted = false;\r\n             }\r\n\r\n             dxScroll = 0;\r\n             dyScroll = 0;\r\n             if (xScrollDir !== 'none') {\r\n                 dxScroll = (xScrollDir === 'right') ? xScrollUnit : -xScrollUnit;\r\n             }\r\n             if (yScrollDir !== 'none') {\r\n                 dyScroll = (yScrollDir === 'bottom') ? yScrollUnit : -yScrollUnit;\r\n             }\r\n\r\n             div = that.canvas.parentNode;\r\n             if (div !== null && div !== undefined) {\r\n                 xScroll = div.scrollLeft;\r\n                 yScroll = div.scrollTop;\r\n                 div.scrollLeft = xScroll + dxScroll;\r\n                 div.scrollTop = yScroll + dyScroll;\r\n                 return {\r\n                     x: div.scrollLeft + ptScroll.x,\r\n                     y: div.scrollTop + ptScroll.y\r\n                 };\r\n             }\r\n             return {\r\n                 x: 0,\r\n                 y: 0\r\n             };\r\n         }\r\n\r\n\r\n         // Node creation-----------------------------------------------------------------\r\n\r\n         function beginNode() {\r\n             _isCreatingNode = true;\r\n             setMouseCapture();\r\n         }\r\n\r\n         function doNode(pt) {\r\n             var rc, inc;\r\n\r\n             if (that.gridSnap) {\r\n                 pt = Helpers.adjustGrid(pt, that.gridSizeX, that.gridSizeY);\r\n             }\r\n\r\n             if (!_isCreatingNode) {\r\n                 beginNode();\r\n             }\r\n\r\n             inc = that.nodeModel.lineWidth + that.handleSize;\r\n\r\n             rc = Helpers.getRectByTwoPoints(ptOrg, ptPrior);\r\n             rc = rc.inflate(inc, inc);\r\n             invalidate(rc);\r\n\r\n             rc = Helpers.getRectByTwoPoints(ptOrg, pt);\r\n             rc = rc.inflate(inc, inc);\r\n             invalidate(rc);\r\n\r\n             updateDrawing();\r\n             ptPrior = pt;\r\n         }\r\n\r\n         function endNode() {\r\n             var rc, rc2, inc, _node;\r\n\r\n             rc = Helpers.getRectByTwoPoints(ptOrg, ptPrior);\r\n             inc = that.nodeModel.lineWidth + that.handleSize;\r\n             rc2 = rc.inflate(inc, inc);\r\n             invalidate(rc2);\r\n             updateDrawing();\r\n\r\n             if (!that.canDrawNode) {\r\n                 return;\r\n             }\r\n\r\n             // We refuse too small nodes\r\n             if (rc.width > minNodeSize && rc.height > minNodeSize) {\r\n                 // Create the node\r\n                 _node = _addNode(rc.left, rc.top, rc.width, rc.height);\r\n                 if (_node !== null && _node.isSelectable) {\r\n                     // Update selection\r\n                     _unselectAll();\r\n                     _node.setIsSelected(true);\r\n                 }\r\n             }\r\n         }\r\n\r\n\r\n         // Link Creation-----------------------------------------------------------------\r\n\r\n         function beginLink() {\r\n             _isCreatingLink = true;\r\n             setMouseCapture();\r\n         }\r\n\r\n         function doLink(pt) {\r\n             var rc, inc;\r\n\r\n             if (!_isCreatingLink) {\r\n                 beginLink();\r\n             }\r\n\r\n             // Detect if the mouse has left the node area.\r\n             // (this is necessary when creating reflexive links: the mouse\r\n             // must leave the node then return to this node)\r\n             if (!outOrg) {\r\n                 if (hittedItem === null || !_isNode(hittedItem)) {\r\n                     outOrg = true;\r\n                 }\r\n             }\r\n\r\n             inc = 2 * that.linkModel.lineWidth;\r\n\r\n             rc = Helpers.getRectByTwoPoints(ptOrg, ptPrior);\r\n             rc = rc.inflate(inc, inc);\r\n             invalidate(rc);\r\n\r\n             rc = Helpers.getRectByTwoPoints(ptOrg, pt);\r\n             rc = rc.inflate(inc, inc);\r\n             invalidate(rc);\r\n\r\n             ptPrior = pt;\r\n\r\n             updateDrawing();\r\n         }\r\n\r\n         function endLink() {\r\n             var rc, pinOrg, pinDst, destination, _link, lineStyle, inc;\r\n\r\n             inc = 2 * that.linkModel.lineWidth;\r\n             rc = Helpers.getRectByTwoPoints(ptOrg, ptPrior);\r\n             rc = rc.inflate(inc, inc);\r\n             invalidate(rc);\r\n             updateDrawing();\r\n\r\n             if (!that.canDrawLink) {\r\n                 return;\r\n             }\r\n\r\n             pinOrg = pinOrigin;\r\n             pinDst = pinDestination;\r\n             pinOrigin = null;\r\n             pinDestination = null;\r\n\r\n             // Memorize destination node\r\n             destination = pinnedItem !== null ?\r\n                 pinnedItem : _getHitItem(ptPrior, itemsetEnum.nodes);\r\n\r\n             if (destination === null || origin === null) {\r\n                 return;\r\n             }\r\n             if (!destination.isInLinkable) {\r\n                 return;\r\n             }\r\n             if (origin === destination) {\r\n                 if (!that.canReflexLink) {\r\n                     return;\r\n                 }\r\n                 if (!outOrg) {\r\n                     return;\r\n                 }\r\n             }\r\n             if (!that.canMultiLink && isOriginOf(origin, destination)) {\r\n                 return;\r\n             }\r\n             if (origin.pins !== null && pinOrg === null) {\r\n                 return;\r\n             }\r\n             if (destination.pins !== null && pinDst === null) {\r\n                 return;\r\n             }\r\n\r\n             // Create the link and select it\r\n             lineStyle = that.linkModel.getLineStyle();\r\n             _link = _addLink(origin, destination, '', pinOrg, pinDst);\r\n             if (_link !== null && _link.isSelectable) {\r\n                 // Update selection\r\n                 _unselectAll();\r\n                 _link.setIsSelected(true);\r\n             }\r\n         }\r\n\r\n\r\n         // Node moving-------------------------------------------------------------------\r\n\r\n         function beginMove() {\r\n             var i, j, _link, itm, _links;\r\n\r\n             _isMovingNode = true;\r\n             setMouseCapture();\r\n\r\n             // Calculate selection rectangle\r\n             selRect = getSelRect();\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isNode(itm)) {\r\n                     if (_taskManager.undoAllowed()) {\r\n                         itm.tsk = new NodeLayoutTask(that, itm, getNodeRect(itm));\r\n                     }\r\n                     _links = itm.getLinks();\r\n                     for (j = 0; j < _links.length; j++) {\r\n                         _links[j].flag = true;\r\n                     }\r\n                 }\r\n             }\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isNode(itm)) {\r\n                     _links = itm.getLinks();\r\n                     for (j = 0; j < _links.length; j++) {\r\n                         _link = _links[j];\r\n                         //if (_link.org.isSelected && _link.dst.isSelected)\r\n                         //    _link.drag = true;\r\n                         if (_link.flag) {\r\n                             _link.tsk = new StretchLinkTask(that, _link);\r\n                             _link.flag = false;\r\n                         }\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         function doMove(pt) {\r\n             var i, itm, xMove, yMove;\r\n\r\n             if (that.gridSnap) {\r\n                 pt = Helpers.adjustGrid(pt, that.gridSizeX, that.gridSizeY);\r\n             }\r\n\r\n             if (!_isMovingNode) {\r\n                 beginMove();\r\n             }\r\n\r\n             _taskManager.skipUndo = true;\r\n\r\n             xMove = pt.x - ptPrior.x;\r\n             yMove = pt.y - ptPrior.y;\r\n             ptPrior = pt;\r\n\r\n             if (selRect.left + xMove < 0) {\r\n                 xMove -= selRect.left + xMove;\r\n             }\r\n             if (selRect.top + yMove < 0) {\r\n                 yMove -= selRect.top + yMove;\r\n             }\r\n\r\n             if (xMove !== 0 || yMove !== 0) {\r\n                 resetFlagOfLinks();\r\n\r\n                 for (i = 0; i < _selectedItems.length; i++) {\r\n                     itm = _selectedItems[i];\r\n                     if (_isNode(itm)) {\r\n                         moveNode(itm, xMove, yMove);\r\n                     }\r\n                 }\r\n\r\n                 // Calculate selection rectangle\r\n                 selRect = getSelRect();\r\n             }\r\n\r\n             updateDiagramSize();\r\n             updateDrawing();\r\n\r\n             _taskManager.skipUndo = false;\r\n         }\r\n\r\n         function moveNode(_node, xMove, yMove) {\r\n             var pt, j, k, _link, n, _links, xMove2, yMove2;\r\n\r\n             xMove2 = _node.isXMoveable ? xMove : 0;\r\n             yMove2 = _node.isYMoveable ? yMove : 0;\r\n             if (xMove2 === 0 && yMove2 === 0) {\r\n                 return;\r\n             }\r\n             if (_isQuadtree) {\r\n                 _quadtree._remove(_node);\r\n             }\r\n\r\n             _links = getNodeLinks(_node);\r\n             for (j = 0; j < _links.length; j++) {\r\n                 _link = _links[j];\r\n                 n = _link.points.length; // number of points\r\n                 invalidateLink(_link);\r\n                 if (_link.org.getIsSelected() && _link.dst.getIsSelected()) {\r\n                     // If the origin and destination nodes are moved ...\r\n                     if (_link.flag) {\r\n                         // If the link has not still been moved, indicates it is the \r\n                         // case now (to avoid moving it two times, one with its origin\r\n                         // node and one with its destination node)\r\n                         _link.flag = false;\r\n                         for (k = 0; k < n; k++) {\r\n                             // Translate each point\r\n                             pt = _link.points[k];\r\n                             _link.points[k] = {\r\n                                 x: pt.x + xMove2,\r\n                                 y: pt.y + yMove2\r\n                             };\r\n                         }\r\n                     }\r\n                 } else {\r\n                     // If there is a pin or if the first (last) point can be changed, \r\n                     // translate the corresponding link point.\r\n                     if (_node === _link.dst) {\r\n                         if (_link.dst.pins !== null || _link.isDstPointAdjustable) {\r\n                             pt = _link.points[n - 1];\r\n                             _link.points[n - 1] = {\r\n                                 x: pt.x + xMove2,\r\n                                 y: pt.y + yMove2\r\n                             };\r\n                         }\r\n                     }\r\n                     if (_node === _link.org) {\r\n                         if (_link.org.pins !== null || _link.isOrgPointAdjustable) {\r\n                             pt = _link.points[0];\r\n                             _link.points[0] = {\r\n                                 x: pt.x + xMove2,\r\n                                 y: pt.y + yMove2\r\n                             };\r\n                         }\r\n                     }\r\n                 }\r\n                 invalidateLink(_link);\r\n                 _link.refresh();\r\n             }\r\n             invalidateNode(_node);\r\n             _node.x += xMove2;\r\n             _node.y += yMove2;\r\n             _node.bounds = getNodeRect(_node);\r\n             if (_isQuadtree) {\r\n                 _quadtree._insert(_node, _node.bounds);\r\n             }\r\n             _node.refresh();\r\n             adjustNodeLinks(_node);\r\n         }\r\n\r\n         function getSelRect() {\r\n             var rc, rc2, i, j, itm, _links, _link;\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 if (that.isNode(itm)) {\r\n                     rc2 = getNodeRect(itm);\r\n                 } else {\r\n                     rc2 = getLinkRect(itm);\r\n                 }\r\n                 if (i === 0) {\r\n                     rc = rc2;\r\n                 } else {\r\n                     rc.boundingRect(rc2);\r\n                 }\r\n                 if (_isNode(itm)) {\r\n                     _links = itm.getLinks();\r\n                     for (j = 0; j < _links.length; j++) {\r\n                         _link = _links[j];\r\n                         if (_link.org.getIsSelected() && _link.dst.getIsSelected()) {\r\n                             rc.boundingRect(getLinkRect(_link));\r\n                         }\r\n                     }\r\n                 } else if (_isLink(itm)) {\r\n                     if (i === 0 && (itm.org.getIsSelected() && itm.dst.getIsSelected())) {\r\n                         rc = getLinkRect(itm);\r\n                     }\r\n                 }\r\n             }\r\n             return rc;\r\n         }\r\n\r\n         function resetFlagOfLinks() {\r\n             var i, j, _links, itm;\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isNode(itm)) {\r\n                     _links = itm.getLinks();\r\n                     for (j = 0; j < _links.length; j++) {\r\n                         // This flag will be used to avoid moving a link two times\r\n                         _links[j].flag = true;\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         function endMove() {\r\n             var itm, _link, _links, i, j;\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 // Store the action in the undo list\r\n                 _taskManager._beginActionInternal('AF_moveSelectedNodes');\r\n\r\n                 resetFlagOfLinks();\r\n\r\n                 for (i = 0; i < _selectedItems.length; i++) {\r\n                     itm = _selectedItems[i];\r\n                     if (_isNode(itm)) {\r\n                         _taskManager._submitTask(itm.tsk);\r\n                         itm.tsk = null;\r\n                         _links = itm.getLinks();\r\n                         for (j = 0; j < _links.length; j++) {\r\n                             _link = _links[j];\r\n                             invalidateLink(_link);\r\n                             if (_link.flag !== undefined) {\r\n                                 if (_link.flag) {\r\n                                     _link.flag = false;\r\n                                     if (_link.tsk !== null) {\r\n                                         _taskManager._submitTask(_link.tsk);\r\n                                         _link.tsk = null;\r\n                                     }\r\n                                 }\r\n                                 // Remove this temporary property\r\n                                 delete _link[\"flag\"];\r\n                             }\r\n                         }\r\n                     }\r\n                 }\r\n\r\n                 _taskManager._endActionInternal();\r\n             }\r\n         }\r\n\r\n\r\n         // Node resizing-----------------------------------------------------------------\r\n\r\n         function beginResize() {\r\n             var i, j, itm, _links;\r\n\r\n             _isResizingNode = true;\r\n             setMouseCapture();\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isNode(itm)) {\r\n                     if (_taskManager.undoAllowed()) {\r\n                         itm.tsk = new NodeLayoutTask(that, itm, getNodeRect(itm));\r\n                     }\r\n                     _links = itm.getLinks();\r\n                     for (j = 0; j < _links.length; j++) {\r\n                         _links[j].flag = true;\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         function doResize(pt) {\r\n             var i, itm, deltaX, deltaY, rc, x, y;\r\n\r\n             if (that.gridSnap) {\r\n                 pt = Helpers.adjustGrid(pt, that.gridSizeX, that.gridSizeY);\r\n             }\r\n\r\n             if (!_isResizingNode) {\r\n                 beginResize();\r\n             }\r\n\r\n             _taskManager.skipUndo = true;\r\n\r\n             deltaX = pt.x - ptPrior.x;\r\n             deltaY = pt.y - ptPrior.y;\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isNode(itm)) {\r\n                     if (_isQuadtree) {\r\n                         _quadtree._remove(itm);\r\n                     }\r\n                     rc = getNodeRect(itm);\r\n                     x = rc.left;\r\n                     y = rc.top;\r\n                     var dx = (x + deltaX < 0) ? 0 : deltaX;\r\n                     var dy = (y + deltaY < 0) ? 0 : deltaY;\r\n\r\n                     // Change the size by the amount the user drags the mouse\r\n                     switch (that._resizeHandle) {\r\n                         case ResizeHandleEnum.leftUp:\r\n                             rc.width = Math.max(rc.width - dx, that.handleSize);\r\n                             rc.height = Math.max(rc.height - dy, that.handleSize);\r\n                             rc.left = x + dx;\r\n                             rc.top = y + dy;\r\n                             break;\r\n                         case ResizeHandleEnum.up:\r\n                             rc.height = Math.max(rc.height - dy, that.handleSize);\r\n                             rc.top = y + dy;\r\n                             break;\r\n                         case ResizeHandleEnum.rightUp:\r\n                             rc.width = Math.max(rc.width + dx, that.handleSize);\r\n                             rc.height = Math.max(rc.height - dy, that.handleSize);\r\n                             rc.top = y + dy;\r\n                             break;\r\n                         case ResizeHandleEnum.left:\r\n                             rc.width = Math.max(rc.width - dx, that.handleSize);\r\n                             rc.left = x + dx;\r\n                             break;\r\n                         case ResizeHandleEnum.right:\r\n                             rc.width = Math.max(rc.width + dx, that.handleSize);\r\n                             break;\r\n                         case ResizeHandleEnum.leftDown:\r\n                             rc.width = Math.max(rc.width - dx, that.handleSize);\r\n                             rc.height = Math.max(dy + rc.height, that.handleSize);\r\n                             rc.left = x + dx;\r\n                             break;\r\n                         case ResizeHandleEnum.down:\r\n                             rc.height = Math.max(rc.height + dy, that.handleSize);\r\n                             break;\r\n                         case ResizeHandleEnum.rightDown:\r\n                             rc.width = Math.max(rc.width + dx, that.handleSize);\r\n                             rc.height = Math.max(dy + rc.height, that.handleSize);\r\n                             break;\r\n                     }\r\n                     setNodeRect(itm, rc);\r\n                     itm.bounds = rc;\r\n                     if (_isQuadtree) {\r\n                         _quadtree._insert(itm, itm.bounds);\r\n                     }\r\n\r\n                     itm.refresh();\r\n                     manageLinksOfResizingNode(itm, rc);\r\n                 }\r\n             }\r\n             _taskManager.skipUndo = false;\r\n\r\n             updateDiagramSize();\r\n             updateDrawing();\r\n             ptPrior = pt;\r\n         }\r\n\r\n         function manageLinksOfResizingNode(itm, rc) {\r\n             var X, Y, j, _links, _link, nbPt;\r\n\r\n             _links = itm.getLinks();\r\n             for (j = 0; j < _links.length; j++) {\r\n                 _link = _links[j];\r\n                 if (!_link.flag) {\r\n                     if (itm === _link.dst) {\r\n                         if (_link.dst.pins !== null) {\r\n                             nbPt = _link.points.length;\r\n                             X = (rc.width === 0) ?\r\n                                 0 :\r\n                                 ((_link.points[nbPt - 1].x - rc.left) * rc.width) / rc.width;\r\n                             Y = (rc.height === 0) ?\r\n                                 0 :\r\n                                 (_link.points[nbPt - 1].y - rc.top) * rc.height / rc.height;\r\n                             _link.points[nbPt - 1] = {\r\n                                 x: rc.left + X,\r\n                                 y: rc.top + Y\r\n                             };\r\n                         }\r\n                     }\r\n\r\n                     if (itm === _link.org) {\r\n                         if (_link.org.pins !== null) {\r\n                             X = (rc.width === 0) ?\r\n                                 0 :\r\n                                 (_link.points[0].x - rc.left) * rc.width / rc.width;\r\n                             Y = (rc.height === 0) ?\r\n                                 0 :\r\n                                 (_link.points[0].y - rc.top) * rc.height / rc.height;\r\n                             _link.points[0] = {\r\n                                 x: rc.left + X,\r\n                                 y: rc.top + Y\r\n                             };\r\n                         }\r\n                     }\r\n                 }\r\n                 if (isLinkReflexive(_link)) {\r\n                     _link.flag = !_link.flag;\r\n                 }\r\n             }\r\n             updateFirstAndLastPointsOfLinks(itm);\r\n         }\r\n\r\n         function updateFirstAndLastPointsOfLinks(_node) {\r\n             var j, n, _link, _links;\r\n\r\n             if (_node.pins !== null) {\r\n                 _links = _node.getLinks();\r\n                 for (j = 0; j < _links.length; j++) {\r\n                     _link = _links[j];\r\n                     if (_link.org === _node && _link.pinOrg !== null) {\r\n                         _link.points[0] = getPinPosition(_node, _link.pinOrg);\r\n                     } else if (_link.dst === _node && _link.pinDst !== null) {\r\n                         n = _link.points.length;\r\n                         _link.points[n - 1] = getPinPosition(_node, _link.pinDst);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         function endResize() {\r\n             var i, j, itm, _link, _links;\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 // Store the action in the undo list\r\n                 _taskManager._beginActionInternal('AF_resizeSelectedNodes');\r\n                 for (i = 0; i < _selectedItems.length; i++) {\r\n                     itm = _selectedItems[i];\r\n                     if (_isNode(itm)) {\r\n                         _taskManager._submitTask(itm.tsk);\r\n                     }\r\n                 }\r\n                 _taskManager._endActionInternal();\r\n             }\r\n\r\n             for (i = 0; i < _selectedItems.length; i++) {\r\n                 itm = _selectedItems[i];\r\n                 if (_isNode(itm)) {\r\n                     _links = itm.getLinks();\r\n                     for (j = 0; j < _links.length; j++) {\r\n                         _link = _links[j];\r\n                         invalidateLink(_link);\r\n                         if (_link.flag !== undefined) {\r\n                             // Remove this temporary property\r\n                             delete _link[\"flag\"];\r\n                         }\r\n                     }\r\n                 }\r\n             }\r\n\r\n             updateDrawing();\r\n         }\r\n\r\n\r\n         // Link stretching---------------------------------------------------------------\r\n\r\n         function beginStretch(_link) {\r\n             var pt2;\r\n\r\n             _isStretchingLink = true;\r\n             setMouseCapture();\r\n\r\n             if (_taskManager.undoAllowed()) {\r\n                 _link.tsk = new StretchLinkTask(that, _link);\r\n             }\r\n\r\n             if (_link.getLineStyle() === 'database') {\r\n                 // Save the old points\r\n                 saveLinkPoints(_link);\r\n             } else {\r\n                 // Save the old points\r\n                 saveLinkPoints(_link);\r\n\r\n                 if (stretchType === StretchTypeEnum.add) {\r\n                     // If streching adds a point to the link, we add a point\r\n                     // in the link collection of points.\r\n                     pt2 = Helpers.middlePoint(_link.points[_handle],\r\n                         _link.points[_handle + 1]);\r\n                     insertLinkPoint(_link, pt2, _handle);\r\n                     _handle++;\r\n                 }\r\n             }\r\n         }\r\n\r\n         function doStretch(pt) {\r\n             if (stretchedLink === null) {\r\n                 return;\r\n             }\r\n\r\n             if (!_isStretchingLink) {\r\n                 beginStretch(stretchedLink);\r\n             }\r\n\r\n             if (pt.x < 0) {\r\n                 pt.x = 0;\r\n             }\r\n             if (pt.y < 0) {\r\n                 pt.y = 0;\r\n             }\r\n             if (_isQuadtree) {\r\n                 _quadtree._remove(stretchedLink);\r\n             }\r\n             invalidateLink(stretchedLink);\r\n             if (stretchedLink.getLineStyle() === 'database') {\r\n                 stretchDatabase(pt, stretchedLink);\r\n             } else if (stretchedLink.getLineStyle() === 'orthogonal') {\r\n                 stretchOrthogonal(pt, stretchedLink);\r\n             } else {\r\n                 stretchPoly(pt, stretchedLink);\r\n             }\r\n             invalidateLink(stretchedLink);\r\n             stretchedLink.bounds = getLinkRect(stretchedLink);\r\n             if (_isQuadtree) {\r\n                 _quadtree._insert(stretchedLink, stretchedLink.bounds);\r\n             }\r\n             ptPrior = pt;\r\n             updateDiagramSize();\r\n             updateDrawing();\r\n         }\r\n\r\n         function endStretch() {\r\n             var _link, pt, dist, org, dst;\r\n\r\n             _link = stretchedLink;\r\n             stretchedLink = null;\r\n\r\n             _handle = Math.max(Math.min(_handle, _link.points.length - 1), 0);\r\n             pt = _link.points[_handle];\r\n\r\n             // Remove new Point if too near of the segment\r\n             if (isLinkNewPointsAllowed(_link) && (stretchType === StretchTypeEnum.add ||\r\n                     stretchType === StretchTypeEnum.del)) {\r\n                 if (_handle > 0 && _handle < _link.points.length - 1) {\r\n                     dist = Helpers.getSegDist(_link.points[_handle - 1],\r\n                         _link.points[_handle + 1], _link.points[_handle]);\r\n                     if (dist <= that.removePointDistance) {\r\n                         invalidateLink(_link);\r\n                         _link.removePoint(_handle);\r\n                         invalidateLink(_link);\r\n                         stretchType = StretchTypeEnum.none;\r\n                         updateDrawing();\r\n                         return;\r\n                     }\r\n                 }\r\n             }\r\n\r\n             invalidateLink(_link);\r\n             if (_link.getLineStyle() === 'database') {\r\n                 fixDatabaseLinkPoints(_link);\r\n             } else if (_link.getLineStyle() === 'orthogonal') {\r\n                 fixOrthogonalLinkPoints(_link);\r\n             }\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n             invalidateLink(_link);\r\n             updateDrawing();\r\n\r\n             if (stretchType === StretchTypeEnum.first && that.canChangeOrg) {\r\n                 org = _getHitItem(pt, itemsetEnum.nodes);\r\n                 if (org === null) {\r\n                     _link.tsk.undo();\r\n                     return;\r\n                 } else {\r\n                     if (org !== _link.org) {\r\n                         if (!isNewOrgAllowed(_link, org)) {\r\n                             _link.tsk.undo();\r\n                             return;\r\n                         }\r\n\r\n                         if (_taskManager.undoAllowed) {\r\n                             _taskManager._beginActionInternal('AF_linkStretch');\r\n                         }\r\n                         if (_taskManager.undoAllowed()) {\r\n                             _taskManager._submitTask(_link.tsk);\r\n                         }\r\n                         setLinkPinOrg(_link, getHittedPinIndex(org, pt));\r\n                         _link.setOrg(org);\r\n                         updateDrawing();\r\n                         if (_taskManager.undoAllowed) {\r\n                             _taskManager._endActionInternal();\r\n                         }\r\n                         return;\r\n                     }\r\n                 }\r\n             }\r\n\r\n             if (stretchType === StretchTypeEnum.last && that.canChangeDst) {\r\n                 dst = _getHitItem(pt, itemsetEnum.nodes);\r\n                 if (dst === null) {\r\n                     _link.tsk.undo();\r\n                     return;\r\n                 } else {\r\n                     if (dst !== _link.dst) {\r\n                         if (!isNewDstAllowed(_link, dst)) {\r\n                             _link.tsk.undo();\r\n                             return;\r\n                         }\r\n\r\n                         if (_taskManager.undoAllowed) {\r\n                             _taskManager._beginActionInternal('AF_linkStretch');\r\n                         }\r\n                         if (_taskManager.undoAllowed()) {\r\n                             _taskManager._submitTask(_link.tsk);\r\n                         }\r\n                         setLinkPinDst(_link, getHittedPinIndex(dst, pt));\r\n                         _link.setDst(dst);\r\n                         updateDrawing();\r\n                         if (_taskManager.undoAllowed) {\r\n                             _taskManager._endActionInternal();\r\n                         }\r\n                         return;\r\n                     }\r\n                 }\r\n             }\r\n\r\n             // we submit the task only if is a true stretching, not just a change\r\n             // of the origin or the destination node.\r\n             if (_taskManager.undoAllowed()) {\r\n                 _taskManager._submitTask(_link.tsk);\r\n             }\r\n         }\r\n\r\n         function stretchPoly(pt, _link) {\r\n             if (_handle >= 0 && _handle <= _link.points.length - 1) {\r\n                 _link.points[_handle] = pt;\r\n             }\r\n             if (_link.org.pins === null && !_link.isOrgPointAdjustable &&\r\n                 stretchType !== StretchTypeEnum.first) {\r\n                 calcLinkStartPoint(_link);\r\n             }\r\n             if (_link.dst.pins === null && !_link.isDstPointAdjustable &&\r\n                 stretchType !== StretchTypeEnum.last) {\r\n                 calcLinkEndPoint(_link);\r\n             }\r\n         }\r\n\r\n         function stretchDatabase(pt, _link) {\r\n             var d1, d2;\r\n\r\n             switch (_handle) {\r\n                 case 0:\r\n                     d1 = _link.points[1].x - _link.points[0].x;\r\n                     _link.points[0] = pt;\r\n                     _link.points[1] = {\r\n                         x: _link.points[0].x + d1,\r\n                         y: pt.y\r\n                     };\r\n                     break;\r\n                 case 1:\r\n                     _link.points[1] = {\r\n                         x: pt.x,\r\n                         y: _link.points[1].y\r\n                     };\r\n                     break;\r\n                 case 2:\r\n                     _link.points[2] = {\r\n                         x: pt.x,\r\n                         y: _link.points[2].y\r\n                     };\r\n                     break;\r\n                 case 3:\r\n                     d2 = _link.points[2].x - _link.points[3].x;\r\n                     _link.points[3] = pt;\r\n                     _link.points[2] = {\r\n                         x: _link.points[3].x + d2,\r\n                         y: pt.y\r\n                     };\r\n                     break;\r\n             }\r\n         }\r\n\r\n         function stretchOrthogonal(pt, _link) {\r\n             var n, firstSegmentVertical, lastSegmentVertical;\r\n\r\n             n = _link.points.length;\r\n\r\n             if (n === 3) {\r\n                 if (_handle === 0) {\r\n                     if (!_link.firstSegmentHorizontal) {\r\n                         _link.points[0] = pt;\r\n                         _link.points[1] = {\r\n                             x: pt.x,\r\n                             y: _link.points[1].y\r\n                         };\r\n                     } else {\r\n                         _link.points[0] = pt;\r\n                         _link.points[1] = {\r\n                             x: _link.points[1].x,\r\n                             y: pt.y\r\n                         };\r\n                     }\r\n                 } else if (_handle === 1) {\r\n                     if (!_link.firstSegmentHorizontal) {\r\n                         pt.x = Math.min(pt.x, _link.org.x + _link.org.w);\r\n                         pt.x = Math.max(pt.x, _link.org.x);\r\n                         pt.y = Math.min(pt.y, _link.dst.y + _link.dst.h);\r\n                         pt.y = Math.max(pt.y, _link.dst.y);\r\n\r\n                         if (_link.org.pins === null) {\r\n                             _link.points[0] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[0].y\r\n                             };\r\n                             _link.points[1] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[1].y\r\n                             };\r\n                         }\r\n                         if (_link.dst.pins === null) {\r\n                             _link.points[2] = {\r\n                                 x: _link.points[2].x,\r\n                                 y: pt.y\r\n                             };\r\n                             _link.points[1] = {\r\n                                 x: _link.points[1].x,\r\n                                 y: pt.y\r\n                             };\r\n                         }\r\n                     } else {\r\n                         pt.x = Math.min(pt.x, _link.dst.x + _link.dst.w);\r\n                         pt.x = Math.max(pt.x, _link.dst.x);\r\n                         pt.y = Math.min(pt.y, _link.org.y + _link.org.h);\r\n                         pt.y = Math.max(pt.y, _link.org.y);\r\n                         if (_link.org.pins === null) {\r\n                             _link.points[0] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[0].y\r\n                             };\r\n                             _link.points[1] = {\r\n                                 x: _link.points[1].x,\r\n                                 y: pt.y\r\n                             };\r\n                         }\r\n                         if (_link.dst.pins === null) {\r\n                             _link.points[2] = {\r\n                                 x: _link.points[2].x,\r\n                                 y: pt.y\r\n                             };\r\n                             _link.points[1] = {\r\n                                 x: pt.x,\r\n                                 y: _link.points[1].y\r\n                             };\r\n                         }\r\n                     }\r\n                 } else if (_handle === 2) {\r\n                     if (!_link.firstSegmentHorizontal) {\r\n                         _link.points[2] = pt;\r\n                         _link.points[1] = {\r\n                             x: _link.points[1].x,\r\n                             y: pt.y\r\n                         };\r\n                     } else {\r\n                         _link.points[2] = pt;\r\n                         _link.points[1] = {\r\n                             x: pt.x,\r\n                             y: _link.points[1].y\r\n                         };\r\n                     }\r\n                 }\r\n             } else {\r\n                 if (_handle <= 1) {\r\n                     if (_handle === 1) {\r\n                         if (!_link.firstSegmentHorizontal) {\r\n                             if (_link.org.pins !== null) {\r\n                                 _link.points[1] = {\r\n                                     x: _link.points[1].x,\r\n                                     y: pt.y\r\n                                 };\r\n                             } else {\r\n                                 pt.x = Math.min(pt.x, _link.org.x + _link.org.w);\r\n                                 pt.x = Math.max(pt.x, _link.org.x);\r\n                                 _link.points[0] = {\r\n                                     x: pt.x,\r\n                                     y: _link.points[0].y\r\n                                 };\r\n                                 _link.points[1] = pt;\r\n                             }\r\n                         } else {\r\n                             if (_link.org.pins !== null) {\r\n                                 _link.points[1] = {\r\n                                     x: pt.x,\r\n                                     y: _link.points[1].y\r\n                                 };\r\n                             } else {\r\n                                 pt.y = Math.min(pt.y, _link.org.y + _link.org.h);\r\n                                 pt.y = Math.max(pt.y, _link.org.y);\r\n                                 _link.points[0] = {\r\n                                     x: _link.points[0].x,\r\n                                     y: pt.y\r\n                                 };\r\n                                 _link.points[1] = pt;\r\n                             }\r\n                         }\r\n                     }\r\n                 } else if (_handle >= n - 2) {\r\n                     lastSegmentVertical = (_link.firstSegmentHorizontal && (n - 1) % 2 === 0) ||\r\n                         (!_link.firstSegmentHorizontal && (n - 1) % 2 === 1);\r\n                     if (_handle === n - 2) {\r\n                         if (lastSegmentVertical) {\r\n                             if (_link.dst.pins !== null) {\r\n                                 _link.points[n - 2] = {\r\n                                     x: _link.points[n - 1].x,\r\n                                     y: pt.y\r\n                                 };\r\n                             } else {\r\n                                 pt.x = Math.min(pt.x, _link.dst.x + _link.dst.w);\r\n                                 pt.x = Math.max(pt.x, _link.dst.x);\r\n                                 _link.points[n - 1] = {\r\n                                     x: pt.x,\r\n                                     y: _link.points[n - 1].y\r\n                                 };\r\n                                 _link.points[n - 2] = pt;\r\n                             }\r\n                         } else {\r\n                             if (_link.dst.pins !== null) {\r\n                                 _link.points[n - 2] = {\r\n                                     x: pt.x,\r\n                                     y: _link.points[n - 1].y\r\n                                 };\r\n                             } else {\r\n                                 pt.y = Math.min(pt.y, _link.dst.y + _link.dst.h);\r\n                                 pt.y = Math.max(pt.y, _link.dst.y);\r\n                                 _link.points[n - 1] = {\r\n                                     x: _link.points[n - 1].x,\r\n                                     y: pt.y\r\n                                 };\r\n                                 _link.points[n - 2] = pt;\r\n                             }\r\n                         }\r\n                     }\r\n                 }\r\n             }\r\n\r\n             updateLinkPoints(_link, pt, _handle);\r\n         }\r\n\r\n\r\n         // Selection---------------------------------------------------------------------\r\n\r\n         function beginSelect() {\r\n             _isSelecting = true;\r\n             setMouseCapture();\r\n         }\r\n\r\n         function doSelect(pt) {\r\n             var rc;\r\n\r\n             if (!_isSelecting) {\r\n                 beginSelect();\r\n             }\r\n\r\n             rc = tmpRect.inflate(that.selRectLineWidth, that.selRectLineWidth);\r\n             invalidate(rc);\r\n\r\n             tmpRect = Helpers.getRectByTwoPoints(ptOrg, pt);\r\n\r\n             rc = tmpRect.inflate(that.selRectLineWidth, that.selRectLineWidth);\r\n             invalidate(rc);\r\n\r\n             if (that.canSelectOnMouseMove) {\r\n                 doSelection();\r\n             }\r\n\r\n             updateDrawing();\r\n         }\r\n\r\n         function endSelect() {\r\n             var rc = tmpRect.inflate(that.selRectLineWidth, that.selRectLineWidth);\r\n             invalidate(rc);\r\n\r\n             if (!that.canSelectOnMouseMove) {\r\n                 doSelection();\r\n             }\r\n\r\n             updateDrawing();\r\n         }\r\n\r\n         function doSelection() {\r\n             _unselectAll();\r\n\r\n             var rcSelection = tmpRect;\r\n\r\n             switch (that.mouseSelection) {\r\n                 case 'selection2':\r\n                     if (that.canMultiSelect) {\r\n                         selectItemsEntirelyInRect(rcSelection);\r\n                     }\r\n                     break;\r\n\r\n                 case 'selection':\r\n                     if (that.canMultiSelect) {\r\n                         selectItemsPartiallyInRect(rcSelection);\r\n                     }\r\n                     break;\r\n             }\r\n         }\r\n\r\n         function selectItemsEntirelyInRect(rcSelection) {\r\n             var i, rc, itm;\r\n\r\n             _unselectAll();\r\n\r\n             for (i = 0; i < _items.length; i++) {\r\n                 itm = _items[i];\r\n                 if (that.isNode(itm)) {\r\n                     rc = getNodeRect(itm);\r\n                 } else {\r\n                     rc = getLinkRect(itm);\r\n                 }\r\n\r\n                 // Select the item if it is completely inside the rectangle\r\n                 if (rcSelection.containsRect(rc)) {\r\n                     if (itm.isSelectable) {\r\n                         itm.setIsSelected(true);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         function selectItemsPartiallyInRect(rcSelection) {\r\n             var i, rc, itm;\r\n\r\n             _unselectAll();\r\n\r\n             for (i = 0; i < _items.length; i++) {\r\n                 itm = _items[i];\r\n                 if (that.isNode(itm)) {\r\n                     rc = getNodeRect(itm);\r\n                 } else {\r\n                     rc = getLinkRect(itm);\r\n                 }\r\n\r\n                 // Select the item if it is completely inside the rectangle\r\n                 if (rcSelection.intersectsWith(rc)) {\r\n                     if (itm.isSelectable) {\r\n                         itm.setIsSelected(true);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n\r\n         // Zoom-------------------------------------------------------------------------\r\n\r\n         function beginZoom() {\r\n             _isZooming = true;\r\n             setMouseCapture();\r\n         }\r\n\r\n         function doZoom(pt) {\r\n             var rc;\r\n\r\n             if (!_isZooming) {\r\n                 beginZoom();\r\n             }\r\n\r\n             rc = tmpRect.inflate(that.selRectLineWidth, that.selRectLineWidth);\r\n             invalidate(rc);\r\n\r\n             tmpRect = Helpers.getRectByTwoPoints(ptOrg, pt);\r\n\r\n             rc = tmpRect.inflate(that.selRectLineWidth, that.selRectLineWidth);\r\n             invalidate(rc);\r\n\r\n             updateDrawing();\r\n         }\r\n\r\n         function endZoom() {\r\n             var rc = tmpRect.inflate(that.selRectLineWidth, that.selRectLineWidth);\r\n             invalidate(rc);\r\n             updateDrawing();\r\n\r\n             if (rc.width > moveStartDist && rc.height > moveStartDist) {\r\n                 _zoomRectangle(rc);\r\n             }\r\n         }\r\n\r\n\r\n         // Pan---------------------------------------------------------------------------\r\n\r\n         function beginPan(pt) {\r\n             var div = that.canvas.parentNode;\r\n             if (div !== null && div !== undefined) {\r\n                 _isPanning = true;\r\n                 xoffset = div.scrollLeft;\r\n                 yoffset = div.scrollTop;\r\n                 scrollStartPoint = pt;\r\n                 setMouseCapture();\r\n             }\r\n         }\r\n\r\n         function doPan(pt) {\r\n             var canScroll, xdelta, ydelta, div, w, h;\r\n\r\n             if (!_isPanning) {\r\n                 beginPan(pt);\r\n             }\r\n\r\n             div = that.canvas.parentNode;\r\n             if (div !== null && div !== undefined) {\r\n                 w = parseInt(div.style.width, 10);\r\n                 h = parseInt(div.style.height, 10);\r\n                 if (!isNaN(w) && !isNaN(h)) {\r\n                     // Update the cursor\r\n                     canScroll = (that.canvas.width > w) ||\r\n                         (that.canvas.height > h);\r\n                     _cursor = canScroll ? 'pointer' : 'default';\r\n\r\n                     xdelta = (pt.x > scrollStartPoint.x) ?\r\n                         -(pt.x - scrollStartPoint.x) : (scrollStartPoint.x - pt.x);\r\n                     ydelta = (pt.y > scrollStartPoint.y) ?\r\n                         -(pt.y - scrollStartPoint.y) : (scrollStartPoint.y - pt.y);\r\n\r\n                     // Scroll to the new position.\r\n                     if (xdelta !== 0) {\r\n                         xoffset += xdelta;\r\n                         div.scrollLeft = xoffset;\r\n                     }\r\n                     if (ydelta !== 0) {\r\n                         yoffset += ydelta;\r\n                         div.scrollTop = yoffset;\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n\r\n         function endPan() {\r\n             // Nothing to do\r\n         }\r\n     }\r\n };","export default [\r\n    {\r\n        id: \"001\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"矩形\",\r\n        shapeFamily: \"rectangle\",\r\n        img: \"\"\r\n    },\r\n    {\r\n        id: \"002\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"losange\",\r\n        shapeFamily: \"polygon\",\r\n        polygon: [[0, 50], [50, 0], [100, 50], [50, 100]],\r\n        img: \"\",\r\n        pins:[],\r\n    },\r\n    {\r\n        id: \"003\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"circle\",\r\n        shapeFamily: \"ellipse\",\r\n        img: \"\"\r\n    },\r\n    {\r\n        id: \"004\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"四边形\",\r\n        shapeFamily: \"polygon\",\r\n        polygon: [[10, 0], [60, 0], [50, 40], [0, 40]],\r\n        img: \"\",\r\n        pins:[],\r\n    },\r\n    {\r\n        id: \"005\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"hello\",\r\n        shapeFamily: \"polygon\",\r\n        img: \"\"\r\n    },\r\n    {\r\n        id: \"006\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"hello\",\r\n        shapeFamily: \"polygon\",\r\n        img: \"\"\r\n    },\r\n    {\r\n        id: \"007\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"hello\",\r\n        shapeFamily: \"polygon\",\r\n        img: \"\"\r\n    },\r\n    {\r\n        id: \"008\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"hello\",\r\n        shapeFamily: \"polygon\",\r\n        img: \"\"\r\n    },\r\n    {\r\n        id: \"009\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"hello\",\r\n        shapeFamily: \"polygon\",\r\n        img: \"\"\r\n    },\r\n    {\r\n        id: \"010\",\r\n        x: 0,\r\n        y: 0,\r\n        w: 80,\r\n        h: 80,\r\n        text: \"hello\",\r\n        shapeFamily: \"polygon\",\r\n        img: \"\"\r\n    },\r\n]","/* This file offers two methods for serializing an AddFlow diagram in JSON format.\r\n- toJSON\r\n- fromJSON\r\nBoth methods are used in the file json.htm.\r\nNotice that both methods contains code specific to the diagram drawn in json.htm.\r\nThe \"specific\" code is between \r\n                // BEGIN SPECIFIC\r\n                and\r\n                // END SPECIFIC\r\nYou may adapt this file to your own serializing needs.\r\n*/\r\n\r\nexport default {\r\n    /** Save an AddFlow diagram to data in JSON format */\r\n    toJSON: function (flow) {\r\n        var jsonItems, items, item, i;\r\n\r\n        function JsonNode(_node) {\r\n            this.node = _node.clone();\r\n            this.node.index = _node.index;\r\n            this.node.flow = null;\r\n\r\n            // Replace the image by a link to this image\r\n            if (this.node.image !== undefined && this.node.image !== null) {\r\n                this.node.srcImage = this.image.src;\r\n                this.node.image = null;\r\n            }\r\n\r\n            this.toJSON = function () {\r\n                var propertyName;\r\n\r\n                // BEGIN SPECIFIC\r\n                // JSON does not save functions. So we just replace the function by a key \r\n                // and we suppose that the destination AddFlow component will know what to do \r\n                // with that key\r\n                this.node.drawShapeKey = 'drawTerminator';\r\n                this.node.fillShapeKey = 'fillPredefinedProcess';\r\n                // END SPECIFIC\r\n\r\n                for (propertyName in this.node) {\r\n                    if (this.node[propertyName] === null ||\r\n                        (this.node[propertyName] === _node.flow.nodeModel[propertyName] &&\r\n                            propertyName !== 'kindOfItem')) {\r\n                        delete this.node[propertyName];\r\n                    }\r\n                }\r\n                return this.node;\r\n            };\r\n        }\r\n\r\n        function JsonLink(_link) {\r\n            this.link = _link.clone();\r\n            this.link.index = _link.index;\r\n            this.link.idOrg = _link.org != null ? _link.org.index : -1;\r\n            this.link.idDst = _link.dst != null ? _link.dst.index : -1;\r\n            this.link.org = null;\r\n            this.link.dst = null;\r\n            this.link.flow = null;\r\n\r\n            this.toJSON = function () {\r\n                var propertyName;\r\n\r\n                for (propertyName in this.link) {\r\n                    if (this.link[propertyName] === null ||\r\n                        (this.link[propertyName] === _link.flow.linkModel[propertyName] &&\r\n                            propertyName !== 'kindOfItem')) {\r\n                        delete this.link[propertyName];\r\n                    }\r\n                }\r\n                return this.link;\r\n            };\r\n        }\r\n\r\n\r\n        jsonItems = [];\r\n        items = flow.getItems();\r\n        for (i = 0; i < items.length; i++) {\r\n            item = items[i];\r\n            if (flow.isNode(item)) {\r\n                jsonItems.push(new JsonNode(item));\r\n            } else if (flow.isLink(item)) {\r\n                jsonItems.push(new JsonLink(item));\r\n            }\r\n        }\r\n\r\n        return JSON.stringify(jsonItems, undefined, ' ');\r\n    },\r\n\r\n    /** Load an AddFlow diagram from data in JSON format */\r\n    fromJSON: function (flow, jsonData) {\r\n        var i, k, jsonItems, node, link, jnode, jlink, items, links,\r\n            oldItemCount, org, dst, image, idxOrder, idxOrderNodeMax;\r\n\r\n        function copyNodeProperties(node, model) {\r\n            if (model.strokeStyle !== undefined) {\r\n                node.strokeStyle = model.strokeStyle;\r\n            }\r\n            if (model.fillStyle !== undefined) {\r\n                node.fillStyle = model.fillStyle;\r\n            }\r\n            if (model.gradientFillStyle !== undefined) {\r\n                node.gradientFillStyle = model.gradientFillStyle;\r\n            }\r\n            if (model.textFillStyle !== undefined) {\r\n                node.textFillStyle = model.textFillStyle;\r\n            }\r\n            if (model.lineWidth !== undefined) {\r\n                node.lineWidth = model.lineWidth;\r\n            }\r\n            if (model.shapeFamily !== undefined) {\r\n                node.shapeFamily = model.shapeFamily;\r\n            }\r\n            if (model.polygon !== undefined) {\r\n                node.polygon = model.polygon;\r\n            }\r\n            if (model.drawShape !== undefined) {\r\n                node.drawShape = model.drawShape;\r\n            }\r\n            if (model.fillShape !== undefined) {\r\n                node.fillShape = model.fillShape;\r\n            }\r\n            if (model.pins !== undefined) {\r\n                node.pins = model.pins;\r\n            }\r\n            if (model.isXSizeable !== undefined) {\r\n                node.isXSizeable = model.isXSizeable;\r\n            }\r\n            if (model.isYSizeable !== undefined) {\r\n                node.isYSizeable = model.isYSizeable;\r\n            }\r\n            if (model.isXMoveable !== undefined) {\r\n                node.isXMoveable = model.isXMoveable;\r\n            }\r\n            if (model.isYMoveable !== undefined) {\r\n                node.isYMoveable = model.isYMoveable;\r\n            }\r\n            if (model.isOutLinkable !== undefined) {\r\n                node.isOutLinkable = model.isOutLinkable;\r\n            }\r\n            if (model.isInLinkable !== undefined) {\r\n                node.isInLinkable = model.isInLinkable;\r\n            }\r\n            if (model.isSelectable !== undefined) {\r\n                node.isSelectable = model.isSelectable;\r\n            }\r\n            if (model.isContextHandle !== undefined) {\r\n                node.isContextHandle = model.isContextHandle;\r\n            }\r\n            if (model.isShadowed !== undefined) {\r\n                node.isShadowed = model.isShadowed;\r\n            }\r\n            if (model.image !== undefined) {\r\n                node.image = model.image;\r\n            }\r\n            if (model.textMargin !== undefined) {\r\n                node.textMargin = model.textMargin;\r\n            }\r\n            if (model.imageMargin !== undefined) {\r\n                node.imageMargin = model.imageMargin;\r\n            }\r\n            if (model.textPosition !== undefined) {\r\n                node.textPosition = model.textPosition;\r\n            }\r\n            if (model.imagePosition !== undefined) {\r\n                node.imagePosition = model.imagePosition;\r\n            }\r\n            if (model.font !== undefined) {\r\n                node.font = model.font;\r\n            }\r\n            if (model.textLineHeight !== undefined) {\r\n                node.textLineHeight = model.textLineHeight;\r\n            }\r\n        }\r\n\r\n        function copyLinkProperties(link, model) {\r\n            if (model.strokeStyle !== undefined) {\r\n                link.strokeStyle = model.strokeStyle;\r\n            }\r\n            if (model.fillStyle !== undefined) {\r\n                link.fillStyle = model.fillStyle;\r\n            }\r\n            if (model.textFillStyle !== undefined) {\r\n                link.textFillStyle = model.textFillStyle;\r\n            }\r\n            if (model.lineWidth !== undefined) {\r\n                link.lineWidth = model.lineWidth;\r\n            }\r\n            if (model.isStretchable !== undefined) {\r\n                link.isStretchable = model.isStretchable;\r\n            }\r\n            if (model.isSelectable !== undefined) {\r\n                link.isSelectable = model.isSelectable;\r\n            }\r\n            if (model.isContextHandle !== undefined) {\r\n                link.isContextHandle = model.isContextHandle;\r\n            }\r\n            if (model.isShadowed !== undefined) {\r\n                link.isShadowed = model.isShadowed;\r\n            }\r\n            if (model.font !== undefined) {\r\n                link.font = model.font;\r\n            }\r\n            if (model.roundedCornerSize !== undefined) {\r\n                link.roundedCornerSize = model.roundedCornerSize;\r\n            }\r\n            if (model.isOrientedText !== undefined) {\r\n                link.isOrientedText = model.isOrientedText;\r\n            }\r\n            if (model.isOpaque !== undefined) {\r\n                link.isOpaque = model.isOpaque;\r\n            }\r\n            if (model.arrowDst !== undefined) {\r\n                link.arrowDst = model.arrowDst;\r\n            }\r\n            if (model.arrowOrg !== undefined) {\r\n                link.arrowOrg = model.arrowOrg;\r\n            }\r\n            if (model.lineStyle !== undefined) {\r\n                link.lineStyle = model.lineStyle;\r\n            }\r\n            if (model.orthoMargin !== undefined) {\r\n                link.orthoMargin = model.orthoMargin;\r\n            }\r\n            if (model.points !== undefined) {\r\n                link.points = model.points.slice();\r\n            }\r\n        }\r\n\r\n        if (jsonData === undefined || jsonData === null || jsonData === '') {\r\n            return;\r\n        }\r\n\r\n        // The AddFlow component may already contains items.\r\n        idxOrderNodeMax = 0;\r\n        items = flow.getItems();\r\n        oldItemCount = items.length;\r\n\r\n        // Parse the json data to obtain a Serial object\r\n        jsonItems = JSON.parse(jsonData);\r\n\r\n        // 3 steps:\r\n        // - creation of nodes\r\n        // - creation of links\r\n        // - ZOrder adjustments. The links have beeen created after the nodes and therefore \r\n        // have a zorder index superior to the nodes. However some links may have \r\n        // a zorder inferior so we have to adjust that.\r\n\r\n        // First step: create the nodes\r\n        for (i = 0; i < jsonItems.length; i++) {\r\n            if (jsonItems[i].kindOfItem === 'Node') {\r\n                jnode = jsonItems[i];\r\n\r\n                // Create the node\r\n                node = flow.addNode(jnode.x, jnode.y, jnode.w, jnode.h, jnode.text);\r\n\r\n                // Set its properties \r\n                copyNodeProperties(node, jnode);\r\n\r\n                // Image\r\n                if (jnode.srcImage !== undefined && jnode.srcImage !== null) {\r\n                    image = new Image();\r\n                    image.src = jnode.srcImage;\r\n                    node.image = image;\r\n                    node.image.onload = function () {\r\n                        node.refresh();\r\n                    };\r\n                }\r\n\r\n                // BEGIN SPECIFIC\r\n                // Specific treatment for custom drawShape and fillShape methods\r\n                // if (jnode.drawShapeKey === 'drawTerminator') {\r\n                //     node.drawShape = drawTerminator;\r\n                // }\r\n                // if (jnode.fillShapeKey === 'fillPredefinedProcess') {\r\n                //     node.fillShape = fillPredefinedProcess;\r\n                // }\r\n                // END SPECIFIC\r\n\r\n                // We update the item in the array. This will be used to \r\n                // retrieve the org and dst of links in the second step.\r\n                jsonItems[i] = node;\r\n\r\n                idxOrder = jnode.index + oldItemCount;\r\n                if (idxOrder > idxOrderNodeMax) {\r\n                    idxOrderNodeMax = idxOrder;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Second step: Create the links\r\n        links = []; // An array to store the links. Will be used in third step\r\n        for (i = 0; i < jsonItems.length; i++) {\r\n            if (jsonItems[i].kindOfItem === 'Link') {\r\n                jlink = jsonItems[i];\r\n                org = jsonItems[jlink.idOrg];\r\n                dst = jsonItems[jlink.idDst];\r\n                if (org !== null && dst !== null) {\r\n                    // Create the link\r\n                    link = flow.addLink(org, dst, jlink.text, jlink.pinOrg, jlink.pinDst);\r\n\r\n                    // Set its properties\r\n                    copyLinkProperties(link, jlink);\r\n\r\n                    // We fill the links arrays for the third step\r\n                    links.push(link);\r\n                    link.tmpIdx = jlink.index + oldItemCount;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Third step; preserve the zordering of links\r\n        for (k = 0; k < links.length; k++) {\r\n            link = links[k];\r\n            if (link.tmpIdx < idxOrderNodeMax) {\r\n                // Remove item from the list\r\n                items.splice(link.index, 1);\r\n                // Insert it at the proper place\r\n                items.splice(link.tmpIdx, 0, link);\r\n            }\r\n            delete link['tmpIdx'];\r\n        }\r\n\r\n        flow.refresh();\r\n    }\r\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-drawer',{staticClass:\"no-user-select\",attrs:{\"title\":\"详细信息\",\"before-close\":_vm.handleClose,\"visible\":_vm.dialog,\"direction\":\"rtl\"},on:{\"update:visible\":function($event){_vm.dialog=$event}}},[_c('el-form',{attrs:{\"model\":_vm.selectedNode,\"label-width\":\"80px\"},nativeOn:{\"submit\":function($event){$event.preventDefault();}}},[_c('el-form-item',{attrs:{\"label\":\"ID\"}},[_c('el-input',{ref:\"title\",nativeOn:{\"keydown\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }return _vm.handleClose.apply(null, arguments)}},model:{value:(_vm.selectedNode.text),callback:function ($$v) {_vm.$set(_vm.selectedNode, \"text\", $$v)},expression:\"selectedNode.text\"}})],1),_c('el-form-item',{attrs:{\"label\":\"活动名称\"}},[_c('el-input',{ref:\"title\",nativeOn:{\"keydown\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }return _vm.handleClose.apply(null, arguments)}},model:{value:(_vm.selectedNode.text),callback:function ($$v) {_vm.$set(_vm.selectedNode, \"text\", $$v)},expression:\"selectedNode.text\"}})],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <!-- 节点信息Dialog -->\r\n    <el-drawer\r\n      title=\"详细信息\"\r\n      :before-close=\"handleClose\"\r\n      :visible.sync=\"dialog\"\r\n      direction=\"rtl\"\r\n      class=\"no-user-select\"\r\n    >\r\n      <el-form :model=\"selectedNode\" label-width=\"80px\" @submit.native.prevent>\r\n        <el-form-item label=\"ID\">\r\n          <el-input\r\n            v-model=\"selectedNode.text\"\r\n            @keydown.enter.native=\"handleClose\"\r\n            ref=\"title\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"活动名称\">\r\n          <el-input\r\n            v-model=\"selectedNode.text\"\r\n            @keydown.enter.native=\"handleClose\"\r\n            ref=\"title\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-drawer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"DrawerBox\",\r\n  props: [\"flow\"],\r\n  data() {\r\n    return {\r\n      dialog: false,\r\n      selectedNode:{},\r\n    };\r\n  },\r\n  methods: {\r\n    handleClose() {\r\n      this.dialog = false;\r\n      this.flow.refresh();\r\n    },\r\n    showInfo() {\r\n      // 自动聚焦到title上\r\n      setTimeout(() => {\r\n        this.$nextTick(() => {\r\n          this.$refs.title.focus();\r\n        });\r\n      }, 600);\r\n      let temp = this.getSelectedNode();\r\n      if (temp === undefined) {\r\n        return;\r\n      }\r\n      this.selectedNode = temp;\r\n      this.dialog = true;\r\n    },\r\n    getSelectedNode() {\r\n      if (this.flow !== null) {\r\n        return this.flow.getSelectedItems()[0];\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DrawerBox.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DrawerBox.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DrawerBox.vue?vue&type=template&id=54755a18&\"\nimport script from \"./DrawerBox.vue?vue&type=script&lang=js&\"\nexport * from \"./DrawerBox.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-unused-vars */\r\n<template>\r\n  <div>\r\n    <!-- 操作栏 -->\r\n    <Menu @download=\"download\" @upload=\"upload\" @command=\"command\" ref=\"menu\" />\r\n    <el-row :gutter=\"10\" justify=\"center\" type=\"flex\" class=\"margin-10\">\r\n      <el-col :span=\"4\">\r\n        <!-- 元素 -->\r\n        <draggable\r\n          id=\"components\"\r\n          tag=\"div\"\r\n          :list=\"elements\"\r\n          :group=\"{ name: 'addflow', pull: 'clone', put: false }\"\r\n          :move=\"moveNode\"\r\n          @end=\"addNewNode\"\r\n          drag-class=\"ghost\"\r\n        >\r\n          <!-- 展示元素 -->\r\n          <div\r\n            class=\"component-item no-user-select\"\r\n            v-for=\"item in elements\"\r\n            :key=\"item.id\"\r\n          >\r\n            {{ item.text }}\r\n          </div>\r\n        </draggable>\r\n      </el-col>\r\n\r\n      <el-col :span=\"20\">\r\n        <!-- 画布 -->\r\n        <draggable\r\n          id=\"canvas-wrapper\"\r\n          tag=\"div\"\r\n          :list=\"list\"\r\n          group=\"addflow\"\r\n          draggable=\".drag\"\r\n        >\r\n          <canvas ref=\"canvas\" height=\"800\" width=\"800\"></canvas>\r\n        </draggable>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 节点信息Dialog -->\r\n    <drawer-box :flow=\"flow\" ref=\"drawer\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport draggable from \"vuedraggable\";\r\nimport Menu from \"./Menu.vue\";\r\nimport { Lassalle } from \"../js/addflow.js\";\r\nimport elements from \"../js/mockData\";\r\nimport JSONFlow from \"../js/jsonflow.js\";\r\nimport DrawerBox from \"./DrawerBox.vue\";\r\nexport default {\r\n  name: \"AddFlow\",\r\n  components: {\r\n    draggable,\r\n    Menu,\r\n    DrawerBox,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      // flow实例对象\r\n      flow: null,\r\n      // 节点信息框显示标志位\r\n      dialog: false,\r\n      // 当前被选中的Node\r\n      selectedNode: {\r\n        text: \"\",\r\n      },\r\n      // flow配置\r\n      config: {\r\n        canDrawNode: false,\r\n        gridSnap: false,\r\n        gridDraw: false,\r\n        fillStyle: \"black\",\r\n      },\r\n      // 用来接收元素\r\n      list: [],\r\n      // 元素列表\r\n      elements: elements,\r\n      // 所有的节点\r\n      nodes: [],\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    //将新节点添加到flow中\r\n    addNewNode(event) {\r\n      let temp = this.list.pop();\r\n      temp.x = Math.round(\r\n        event.originalEvent.layerX / this.flow.zoom - temp.w / 2\r\n      );\r\n      temp.y = Math.round(\r\n        event.originalEvent.layerY / this.flow.zoom - temp.h / 2\r\n      );\r\n      this.flow.beginUpdate();\r\n      let node = this.flow.addNode(temp.x, temp.y, temp.w, temp.h, temp.text);\r\n      if (temp.polygon) {\r\n        node.polygon = temp.polygon;\r\n      }\r\n      node.shapeFamily = temp.shapeFamily;\r\n      this.flow.endUpdate();\r\n      this.updateNodes();\r\n    },\r\n\r\n    // 节点移动过程中\r\n    moveNode(source, event) {\r\n      let item = source.draggedContext.element;\r\n      let x = Math.round(event.layerX / this.flow.zoom - item.w /2);\r\n      let y = Math.round(event.layerY / this.flow.zoom - item.h /2);\r\n      for(let node of this.nodes){\r\n        if(node.x == x){\r\n          console.log(x);\r\n          return;\r\n        }\r\n        if(node.y == y){\r\n          console.log(y);\r\n          return;\r\n        }\r\n      }\r\n    },\r\n\r\n    // 更新nodes\r\n    updateNodes() {\r\n      console.log(\"node\");\r\n      let items = this.flow.getItems();\r\n      this.nodes = [];\r\n      for (let item of items) {\r\n        if (this.flow.isNode(item)) {\r\n          this.nodes.push(item);\r\n        }\r\n      }\r\n    },\r\n\r\n    //鼠标双击更改node文本信息\r\n    showInfo() {\r\n      this.$refs.drawer.showInfo();\r\n    },\r\n    // 将flow下载成json文件\r\n    download() {\r\n      let json = JSONFlow.toJSON(this.flow);\r\n      var a = document.createElement(\"a\");\r\n      var file = new Blob([json], { type: \"text/plain\" });\r\n      a.href = URL.createObjectURL(file);\r\n      a.download = \"addflow.json\";\r\n      a.click();\r\n    },\r\n    // 从json文件中加载flow\r\n    upload(json) {\r\n      this.flow.clear();\r\n      JSONFlow.fromJSON(this.flow, json);\r\n    },\r\n    // 工具栏操作\r\n    command(type) {\r\n      if (type === \"undo\") {\r\n        this.flow.taskManager.undo();\r\n      }\r\n      if (type === \"redo\") {\r\n        this.flow.taskManager.redo();\r\n      }\r\n      if (type === \"refresh\") {\r\n        this.flow.refresh();\r\n      }\r\n      if (type === \"delete\") {\r\n        this.flow.deleteSel();\r\n      }\r\n      if (type === \"zoom-in\") {\r\n        this.flow.unselectAll();\r\n        this.flow.zoom += 0.1;\r\n        this.flow.refresh();\r\n      }\r\n      if (type === \"zoom-out\") {\r\n        this.flow.unselectAll();\r\n        this.flow.zoom -= 0.1;\r\n        this.flow.refresh();\r\n      }\r\n    },\r\n    // 鼠标滚轮事件\r\n    // scroll(e){\r\n    //   let direct = e.wheelDeltaY;\r\n    //   if(direct > 0){\r\n    //     this.$refs.menu.zoomIn();\r\n    //   }else{\r\n    //     this.$refs.menu.zoomOut();\r\n    //   }\r\n    // }\r\n  },\r\n\r\n  created() {\r\n    // 添加Ctrl+z快捷键\r\n    this.$shortcut.bind(\"ctrl+z\", (_) => {\r\n      this.command(\"undo\");\r\n    });\r\n    // 添加Ctrl+r快捷键\r\n    this.$shortcut.bind(\"ctrl+r\", (_) => {\r\n      this.command(\"redo\");\r\n    });\r\n    // 添加Delete快捷键\r\n    this.$shortcut.bind(\"delete\", (_) => {\r\n      this.command(\"delete\");\r\n    });\r\n    // 添加鼠标双击node节点监听\r\n    document.addEventListener(\"dblclick\", this.showInfo, false);\r\n  },\r\n\r\n  mounted() {\r\n    const canvas = this.$refs.canvas;\r\n    this.flow = new Lassalle.Flow(canvas);\r\n\r\n    // 设置画布\r\n    this.flow.canDrawNode = false; //禁止在画布中直接绘制Node\r\n    this.flow.gridSnap = true; // 网格吸附\r\n    this.flow.gridDraw = false; // 显示网格\r\n    this.flow.gridSizeX = 10; // 网格大小\r\n    this.flow.gridSizeY = 10; // 网格大小\r\n    this.flow.fillStyle = \"yellow\"; //设置画布填充颜色\r\n    this.flow.mouseSelection = \"selection\"; // 设置鼠标动作方式\r\n    //设置节点样式\r\n    this.flow.nodeModel.isContextHandle = false; // 右上角句柄\r\n    this.flow.nodeModel.strokeStyle = \"black\";\r\n    this.flow.nodeModel.textFillStyle = \"black\";\r\n    this.flow.nodeModel.lineWidth = 2;\r\n    this.flow.nodeModel.textLineHeight = 15;\r\n    this.flow.pinSize = 10; //控制节点的大小\r\n    this.flow.nodeModel.pins = [\r\n      [0, 25],\r\n      [0, 50],\r\n      [0, 75],\r\n      [25, 0],\r\n      [50, 0],\r\n      [75, 0],\r\n      [100, 25],\r\n      [100, 50],\r\n      [100, 75],\r\n      [25, 100],\r\n      [50, 100],\r\n      [75, 100],\r\n    ];\r\n\r\n    //设置线条类型\r\n    this.flow.linkModel.strokeStyle = \"black\";\r\n    this.flow.linkModel.textFillStyle = \"black\";\r\n    this.flow.linkModel.lineStyle = \"orthogonal\";\r\n    this.flow.linkModel.lineWidth = 2;\r\n    this.flow.linkModel.isShadowed = true;\r\n\r\n    this.flow.refresh();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#components {\r\n  height: 90vh;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  overflow: auto;\r\n  justify-content: center;\r\n  border-style: solid;\r\n  background: greenyellow;\r\n}\r\n.component-item {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-color: black;\r\n  border-style: solid;\r\n  text-align: center;\r\n  line-height: 80px;\r\n  margin: 10px;\r\n}\r\n.ghost {\r\n  background-color: red;\r\n}\r\n#canvas-wrapper {\r\n  border-style: solid;\r\n  width: 100%;\r\n  height: 90vh;\r\n  overflow: auto;\r\n  background-color: yellow;\r\n}\r\n.margin-10 {\r\n  margin-top: 10px;\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AddFlow.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AddFlow.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AddFlow.vue?vue&type=template&id=3198cf54&scoped=true&\"\nimport script from \"./AddFlow.vue?vue&type=script&lang=js&\"\nexport * from \"./AddFlow.vue?vue&type=script&lang=js&\"\nimport style0 from \"./AddFlow.vue?vue&type=style&index=0&id=3198cf54&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3198cf54\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n  <div>\r\n    <AddFlow />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//引入组件\r\nimport AddFlow from \"./components/AddFlow.vue\";\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    AddFlow,\r\n  },\r\n  data() {\r\n    return {};\r\n  },\r\n  methods: {},\r\n  watch: {},\r\n};\r\n</script>\r\n\r\n<style>\r\nbody,\r\nh1,\r\nh2,\r\nh3 {\r\n  margin: 0px;\r\n  padding: 0px;\r\n}\r\n\r\nbody {\r\n  overflow: hidden;\r\n}\r\n\r\n.no-user-select {\r\n  user-select: none;\r\n}\r\n.align-center {\r\n  align-items: center;\r\n}\r\n</style>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=2bec9cb8&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\r\nimport keymaster from 'keymaster'\r\nconst bindKeyHandler = fn => {\r\n    return () => {\r\n        fn()\r\n        return false\r\n    }\r\n}\r\nexport const shortcut = {\r\n    bind: (seed, func) => keymaster(seed, bindKeyHandler(func)),\r\n    ...keymaster\r\n}\r\nVue.prototype.$shortcut = shortcut","import Vue from 'vue';\r\nimport App from './App';\r\nimport './js/shortcut.js';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Drawer,\r\n    Form,\r\n    FormItem,\r\n    Input,\r\n    Upload,\r\n} from \"element-ui\"\r\nimport 'element-ui/lib/theme-chalk/index.css'\r\n\r\nVue.component(Row.name, Row);\r\nVue.component(Col.name, Col);\r\nVue.component(Button.name, Button);\r\nVue.component(Drawer.name, Drawer);\r\nVue.component(Form.name, Form);\r\nVue.component(FormItem.name, FormItem);\r\nVue.component(Input.name, Input);\r\nVue.component(Upload.name, Upload);\r\n\r\n//关闭生产提示\r\nVue.config.productionTip = false\r\nnew Vue({\r\n    el: \"#root\",\r\n    render: h => h(App)\r\n});","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AddFlow.vue?vue&type=style&index=0&id=3198cf54&scoped=true&lang=css&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Menu.vue?vue&type=style&index=0&id=80dab468&scoped=true&lang=css&\""],"sourceRoot":""}